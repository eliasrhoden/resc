
resc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800befc  0800befc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800befc  0800befc  0001befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf04  0800bf04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf08  0800bf08  0001bf08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800bf0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b1e8  20000078  0800bf84  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b260  0800bf84  0002b260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023382  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004851  00000000  00000000  0004342a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  00047c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  000497e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270af  00000000  00000000  0004b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220c3  00000000  00000000  0007223f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaf16  00000000  00000000  00094302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c4  00000000  00000000  0017f268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9e8 	.word	0x0800b9e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b9e8 	.word	0x0800b9e8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <as5601_init>:


I2C_HandleTypeDef * i2c;


void as5601_init(I2C_HandleTypeDef * i2c_handler){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	i2c = i2c_handler;
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <as5601_init+0x20>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
	set_update_rate(0xFF);
 8000ebe:	20ff      	movs	r0, #255	; 0xff
 8000ec0:	f000 f94a 	bl	8001158 <set_update_rate>
	set_zero_power_mode();
 8000ec4:	f000 f968 	bl	8001198 <set_zero_power_mode>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000094 	.word	0x20000094

08000ed4 <read_bytes>:
 * @param nr_bytes nr of bytes to read, if more that 1 the bytes in the consecutive
 * registers are returned as well
 * @param rec_buffer pointer to recieve area
 * @returns 1 if successful, 0 otherwise
 * */
uint8_t read_bytes(uint8_t reg_addr, uint8_t nr_bytes, uint8_t * rec_buffer){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	603a      	str	r2, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef tr_stat, rec_stat;

	// Send register that we want to read
	tr_stat = HAL_I2C_Master_Transmit(i2c, AS5_I2C_WRITE_ADDR, &reg_addr, 1, I2C_HAL_TIMEOUT);
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <read_bytes+0x60>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	1dfa      	adds	r2, r7, #7
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	216c      	movs	r1, #108	; 0x6c
 8000ef4:	f002 fd7a 	bl	80039ec <HAL_I2C_Master_Transmit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]

	// Read
	rec_stat = HAL_I2C_Master_Receive(i2c, AS5_I2C_READ_ADDR, rec_buffer, nr_bytes, I2C_HAL_TIMEOUT);
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <read_bytes+0x60>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f08:	9200      	str	r2, [sp, #0]
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	216d      	movs	r1, #109	; 0x6d
 8000f0e:	f002 fe6b 	bl	8003be8 <HAL_I2C_Master_Receive>
 8000f12:	4603      	mov	r3, r0
 8000f14:	73bb      	strb	r3, [r7, #14]

	return tr_stat == HAL_OK && rec_stat == HAL_OK;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <read_bytes+0x52>
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <read_bytes+0x52>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <read_bytes+0x54>
 8000f26:	2300      	movs	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000094 	.word	0x20000094

08000f38 <get_int_from_2bytes>:

/**
 * Converts the 2-bytes into a uint16
 * */
uint16_t get_int_from_2bytes(uint8_t *pdata){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	return (*pdata<<8) + *(pdata+1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <read_status>:

void read_status(AS5_STATUS * status){
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b084      	sub	sp, #16
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	uint8_t stat1,stat2,stat3;
	uint8_t status_req;


	// Status reg
	stat1 = read_bytes(0x0B, 1, &status_req);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2101      	movs	r1, #1
 8000f72:	200b      	movs	r0, #11
 8000f74:	f7ff ffae 	bl	8000ed4 <read_bytes>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]

	status->magnet_detected = (status_req & (1<<5)) > 0;
 8000f7c:	7b3b      	ldrb	r3, [r7, #12]
 8000f7e:	f003 0320 	and.w	r3, r3, #32
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfcc      	ite	gt
 8000f86:	2301      	movgt	r3, #1
 8000f88:	2300      	movle	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	709a      	strb	r2, [r3, #2]
	status->magnet_to_strong = (status_req & (1<<3)) > 0;
 8000f92:	7b3b      	ldrb	r3, [r7, #12]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bfcc      	ite	gt
 8000f9c:	2301      	movgt	r3, #1
 8000f9e:	2300      	movle	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	701a      	strb	r2, [r3, #0]
	status->magnet_to_weak = (status_req & (1<<4)) > 0;
 8000fa8:	7b3b      	ldrb	r3, [r7, #12]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bfcc      	ite	gt
 8000fb2:	2301      	movgt	r3, #1
 8000fb4:	2300      	movle	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	705a      	strb	r2, [r3, #1]

	// Automatic gain
	stat2 = read_bytes(0x1A,1, &status->auto_magnetic_gain);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3303      	adds	r3, #3
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	201a      	movs	r0, #26
 8000fc8:	f7ff ff84 	bl	8000ed4 <read_bytes>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73bb      	strb	r3, [r7, #14]

	// Magnet magnitude
	uint8_t resp2[2];
	stat3 = read_bytes(0x1B,2, resp2);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	201b      	movs	r0, #27
 8000fda:	f7ff ff7b 	bl	8000ed4 <read_bytes>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	737b      	strb	r3, [r7, #13]

	status->magnitude = get_int_from_2bytes(resp2);
 8000fe2:	f107 0308 	add.w	r3, r7, #8
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffa6 	bl	8000f38 <get_int_from_2bytes>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	809a      	strh	r2, [r3, #4]

	if(stat1 == 0 || stat2 == 0 || stat3 == 0){
		// Error handling...
	}

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <read_output>:
		// Error handling...
	}

}

void read_output(AS5_OUTPUT * output){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

	uint8_t stat1;
	uint8_t buffer[4];

	// Read raw and clean angle
	stat1 = read_bytes(0x0C, 4, buffer);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	461a      	mov	r2, r3
 800100a:	2104      	movs	r1, #4
 800100c:	200c      	movs	r0, #12
 800100e:	f7ff ff61 	bl	8000ed4 <read_bytes>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]

	// Raw is the first 2 bytes
	output->raw_angle = get_int_from_2bytes(buffer);
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff8c 	bl	8000f38 <get_int_from_2bytes>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	801a      	strh	r2, [r3, #0]

	// Clean angle is the second 2 bytes
	output->angle = get_int_from_2bytes(buffer+2);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	3302      	adds	r3, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff82 	bl	8000f38 <get_int_from_2bytes>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	805a      	strh	r2, [r3, #2]

	if(stat1 == 0){
		// Error handling...
	}

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <read_conf>:

void read_conf(AS5_CONF * conf){
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

	uint8_t tmp_stat, stat;
	uint8_t buffer[4];

	// Zero status of all reads
	stat = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]

	// Nr of zero pos writes
	tmp_stat = read_bytes(0x00, 1, buffer);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	461a      	mov	r2, r3
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff ff3b 	bl	8000ed4 <read_bytes>
 800105e:	4603      	mov	r3, r0
 8001060:	73bb      	strb	r3, [r7, #14]
	conf->nr_zero_writes = buffer[0] & 0x3;
 8001062:	7a3b      	ldrb	r3, [r7, #8]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	701a      	strb	r2, [r3, #0]
	stat |= tmp_stat;
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	4313      	orrs	r3, r2
 8001074:	73fb      	strb	r3, [r7, #15]

	// Zero pos
	tmp_stat = read_bytes(0x01, 2, buffer);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	461a      	mov	r2, r3
 800107c:	2102      	movs	r1, #2
 800107e:	2001      	movs	r0, #1
 8001080:	f7ff ff28 	bl	8000ed4 <read_bytes>
 8001084:	4603      	mov	r3, r0
 8001086:	73bb      	strb	r3, [r7, #14]
	conf->zero_pos = get_int_from_2bytes(buffer);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff53 	bl	8000f38 <get_int_from_2bytes>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	805a      	strh	r2, [r3, #2]
	stat |= tmp_stat << 1;
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	b25a      	sxtb	r2, r3
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	73fb      	strb	r3, [r7, #15]

	// Slow filter
	tmp_stat = read_bytes(0x07, 3, buffer);
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	461a      	mov	r2, r3
 80010b0:	2103      	movs	r1, #3
 80010b2:	2007      	movs	r0, #7
 80010b4:	f7ff ff0e 	bl	8000ed4 <read_bytes>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73bb      	strb	r3, [r7, #14]
	stat |= tmp_stat << 2;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	b25a      	sxtb	r2, r3
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
	conf->slow_filter = buffer[0] & 0x3;
 80010cc:	7a3b      	ldrb	r3, [r7, #8]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	711a      	strb	r2, [r3, #4]

	// Fast filter
	conf->fast_filter = (buffer[0] & (0x7 << 2)) >> 2;
 80010d8:	7a3b      	ldrb	r3, [r7, #8]
 80010da:	109b      	asrs	r3, r3, #2
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	719a      	strb	r2, [r3, #6]

	// Watchdog
	conf->watchdog_timer = (buffer[0] & (0x1 << 5)) > 0;
 80010e8:	7a3b      	ldrb	r3, [r7, #8]
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfcc      	ite	gt
 80010f2:	2301      	movgt	r3, #1
 80010f4:	2300      	movle	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	71da      	strb	r2, [r3, #7]

	// Powermode
	conf->power_mode = buffer[1] & 0x3;
 80010fe:	7a7b      	ldrb	r3, [r7, #9]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	b2da      	uxtb	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	721a      	strb	r2, [r3, #8]

	//Hysteresis
	conf->hyster = (buffer[1] & (0x3<<2)) >> 2;
 800110a:	7a7b      	ldrb	r3, [r7, #9]
 800110c:	109b      	asrs	r3, r3, #2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	b2da      	uxtb	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	715a      	strb	r2, [r3, #5]

	// ABN/Update rate
	conf->output_update_rate = buffer[2] & 0xF;
 800111a:	7abb      	ldrb	r3, [r7, #10]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	725a      	strb	r2, [r3, #9]

	// Push threshold
	tmp_stat = read_bytes(0x0A, 1, buffer);
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	461a      	mov	r2, r3
 800112c:	2101      	movs	r1, #1
 800112e:	200a      	movs	r0, #10
 8001130:	f7ff fed0 	bl	8000ed4 <read_bytes>
 8001134:	4603      	mov	r3, r0
 8001136:	73bb      	strb	r3, [r7, #14]
	stat |= tmp_stat << 3;
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	b25a      	sxtb	r2, r3
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4313      	orrs	r3, r2
 8001144:	b25b      	sxtb	r3, r3
 8001146:	73fb      	strb	r3, [r7, #15]
	conf->push_thr = buffer[0];
 8001148:	7a3a      	ldrb	r2, [r7, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	729a      	strb	r2, [r3, #10]

	if (stat != 0xF){
		// Error handler...
	}

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <set_update_rate>:
/**
 * Sets the update rate of the module
 * ABN Register, ONLY 4 bits!
 *
 * */
void set_update_rate(uint8_t rate){
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tr_stat;

	uint8_t send_buffer[2];

	// register address
	send_buffer[0] = 0x09;
 8001162:	2309      	movs	r3, #9
 8001164:	733b      	strb	r3, [r7, #12]

	// ABN value
	send_buffer[1] = rate & 0xF;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	b2db      	uxtb	r3, r3
 800116e:	737b      	strb	r3, [r7, #13]

	// Send register that we want to read
	tr_stat = HAL_I2C_Master_Transmit(i2c, AS5_I2C_WRITE_ADDR, send_buffer, 2, I2C_HAL_TIMEOUT);
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <set_update_rate+0x3c>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2302      	movs	r3, #2
 8001180:	216c      	movs	r1, #108	; 0x6c
 8001182:	f002 fc33 	bl	80039ec <HAL_I2C_Master_Transmit>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]


	if(tr_stat != HAL_OK){
		//Error handling...
	}
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000094 	.word	0x20000094

08001198 <set_zero_power_mode>:


void set_zero_power_mode(){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af02      	add	r7, sp, #8

	uint8_t buffer;
	HAL_StatusTypeDef tr_stat;
	uint8_t send_buffer[2];

	read_bytes(0x08, 1, &buffer);
 800119e:	1dbb      	adds	r3, r7, #6
 80011a0:	461a      	mov	r2, r3
 80011a2:	2101      	movs	r1, #1
 80011a4:	2008      	movs	r0, #8
 80011a6:	f7ff fe95 	bl	8000ed4 <read_bytes>


	// register address
	send_buffer[0] = 0x08;
 80011aa:	2308      	movs	r3, #8
 80011ac:	713b      	strb	r3, [r7, #4]

	// ABN value
	send_buffer[1] = buffer & ~(0x3);
 80011ae:	79bb      	ldrb	r3, [r7, #6]
 80011b0:	f023 0303 	bic.w	r3, r3, #3
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	717b      	strb	r3, [r7, #5]

	// Send register that we want to read
	tr_stat = HAL_I2C_Master_Transmit(i2c, AS5_I2C_WRITE_ADDR, send_buffer, 2, I2C_HAL_TIMEOUT);
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <set_zero_power_mode+0x40>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	1d3a      	adds	r2, r7, #4
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2302      	movs	r3, #2
 80011c6:	216c      	movs	r1, #108	; 0x6c
 80011c8:	f002 fc10 	bl	80039ec <HAL_I2C_Master_Transmit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
	if(tr_stat != HAL_OK){
		//Error handling...
	}


}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000094 	.word	0x20000094

080011dc <encoder_init>:

AS5_STATUS status;
AS5_CONF conf;


void encoder_init(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	//HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
	set_update_rate(0x3);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f7ff ffb9 	bl	8001158 <set_update_rate>
	set_zero_power_mode();
 80011e6:	f7ff ffd7 	bl	8001198 <set_zero_power_mode>
	as5601_init(&hi2c1);
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <encoder_init+0x24>)
 80011ec:	f7ff fe60 	bl	8000eb0 <as5601_init>
	read_status(&status);
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <encoder_init+0x28>)
 80011f2:	f7ff feb6 	bl	8000f62 <read_status>
	read_conf(&conf);
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <encoder_init+0x2c>)
 80011f8:	f7ff ff24 	bl	8001044 <read_conf>



}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200065e4 	.word	0x200065e4
 8001204:	200000a4 	.word	0x200000a4
 8001208:	200000ac 	.word	0x200000ac
 800120c:	00000000 	.word	0x00000000

08001210 <encoder_update>:
		vTaskDelay(1.0/portTICK_PERIOD_MS);

	}
}

void encoder_update(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

	AS5_OUTPUT out;
	float ts = 0.0005;
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <encoder_update+0xa0>)
 8001218:	60fb      	str	r3, [r7, #12]

	read_output(&out);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff feed 	bl	8000ffc <read_output>

	uint16_t pulse_count = out.raw_angle;
 8001222:	88bb      	ldrh	r3, [r7, #4]
 8001224:	817b      	strh	r3, [r7, #10]
	encoder.angle = pulse_count * 1.0/encoder_pulses_per_rev * 2*PI;
 8001226:	897b      	ldrh	r3, [r7, #10]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f943 	bl	80004b4 <__aeabi_i2d>
 800122e:	a31c      	add	r3, pc, #112	; (adr r3, 80012a0 <encoder_update+0x90>)
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff fad2 	bl	80007dc <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f7fe ffea 	bl	800021c <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	a315      	add	r3, pc, #84	; (adr r3, 80012a8 <encoder_update+0x98>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f997 	bl	8000588 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fc53 	bl	8000b0c <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <encoder_update+0xa4>)
 800126a:	6013      	str	r3, [r2, #0]
	encoder.velocity = (encoder.angle - old_angle)*1/ts;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <encoder_update+0xa4>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <encoder_update+0xa8>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 6a67 	vsub.f32	s13, s14, s15
 800127c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <encoder_update+0xa4>)
 8001286:	edc3 7a01 	vstr	s15, [r3, #4]
	old_angle = encoder.angle;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <encoder_update+0xa4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <encoder_update+0xa8>)
 8001290:	6013      	str	r3, [r2, #0]

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40affe00 	.word	0x40affe00
 80012a8:	60000000 	.word	0x60000000
 80012ac:	400921fb 	.word	0x400921fb
 80012b0:	3a03126f 	.word	0x3a03126f
 80012b4:	20000098 	.word	0x20000098
 80012b8:	200000a0 	.word	0x200000a0

080012bc <HAL_UART_RxCpltCallback>:
volatile uint8_t waiting_to_send = 1;
uint8_t logging_started = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	waiting_for_host = 0;
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_UART_RxCpltCallback+0x1c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	waiting_to_send = 0;
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <HAL_UART_TxCpltCallback+0x1c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000001 	.word	0x20000001

080012fc <wait_for_host>:

/*
 * Tries to establish a initalization with the host.
 *
 * */
void wait_for_host(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0

	char ping[5] = "glenn";
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <wait_for_host+0xb4>)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130c:	6018      	str	r0, [r3, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	7019      	strb	r1, [r3, #0]
	uint8_t resp[10];
	char exp_resp[4] = "hepp";
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <wait_for_host+0xb8>)
 8001314:	603b      	str	r3, [r7, #0]

	// Rec from host
	waiting_for_host = 1;
 8001316:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <wait_for_host+0xbc>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (uart,(uint8_t*)  resp, 4);
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <wait_for_host+0xc0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	1d39      	adds	r1, r7, #4
 8001322:	2204      	movs	r2, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f005 fa4f 	bl	80067c8 <HAL_UART_Receive_IT>

	while(waiting_for_host){
 800132a:	e002      	b.n	8001332 <wait_for_host+0x36>
		vTaskDelay(5.0/portTICK_RATE_MS);
 800132c:	2005      	movs	r0, #5
 800132e:	f007 fab5 	bl	800889c <vTaskDelay>
	while(waiting_for_host){
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <wait_for_host+0xbc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f7      	bne.n	800132c <wait_for_host+0x30>
	}

	char msg_ok = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	77fb      	strb	r3, [r7, #31]

	for(int i=0;i<4;i++){
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
 8001344:	e015      	b.n	8001372 <wait_for_host+0x76>
		msg_ok &= resp[i] == exp_resp[i];
 8001346:	1d3a      	adds	r2, r7, #4
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	4413      	add	r3, r2
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	4639      	mov	r1, r7
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	440b      	add	r3, r1
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	b25a      	sxtb	r2, r3
 8001362:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001366:	4013      	ands	r3, r2
 8001368:	b25b      	sxtb	r3, r3
 800136a:	77fb      	strb	r3, [r7, #31]
	for(int i=0;i<4;i++){
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	3301      	adds	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b03      	cmp	r3, #3
 8001376:	dde6      	ble.n	8001346 <wait_for_host+0x4a>
	}

	if(msg_ok){
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d013      	beq.n	80013a6 <wait_for_host+0xaa>
		waiting_to_send = 1;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <wait_for_host+0xc4>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(uart, (uint8_t*) ping, 5);
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <wait_for_host+0xc0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f107 0110 	add.w	r1, r7, #16
 800138c:	2205      	movs	r2, #5
 800138e:	4618      	mov	r0, r3
 8001390:	f005 f9d5 	bl	800673e <HAL_UART_Transmit_IT>

		while(waiting_to_send){
 8001394:	e002      	b.n	800139c <wait_for_host+0xa0>
			vTaskDelay(1.0/portTICK_RATE_MS);
 8001396:	2001      	movs	r0, #1
 8001398:	f007 fa80 	bl	800889c <vTaskDelay>
		while(waiting_to_send){
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <wait_for_host+0xc4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f7      	bne.n	8001396 <wait_for_host+0x9a>
		}
	}


}
 80013a6:	bf00      	nop
 80013a8:	3720      	adds	r7, #32
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800ba00 	.word	0x0800ba00
 80013b4:	70706568 	.word	0x70706568
 80013b8:	20000000 	.word	0x20000000
 80013bc:	200000b8 	.word	0x200000b8
 80013c0:	20000001 	.word	0x20000001

080013c4 <logger_task>:




void logger_task(UART_HandleTypeDef* uart_handle){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]


	uart = uart_handle;
 80013cc:	4a2f      	ldr	r2, [pc, #188]	; (800148c <logger_task+0xc8>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]

	wait_for_host();
 80013d2:	f7ff ff93 	bl	80012fc <wait_for_host>

	// Send nr of floats
	uint32_t msg_len = (int) log_nr_signals;
 80013d6:	230f      	movs	r3, #15
 80013d8:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(uart, (uint8_t*) &msg_len, 4, uart_timeout);
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <logger_task+0xc8>)
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	f107 0108 	add.w	r1, r7, #8
 80013e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e6:	2204      	movs	r2, #4
 80013e8:	f005 f917 	bl	800661a <HAL_UART_Transmit>

	// Send buffersize
	msg_len = (int) buffer_size;
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(uart, (uint8_t*) &msg_len, 4, uart_timeout);
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <logger_task+0xc8>)
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f107 0108 	add.w	r1, r7, #8
 80013f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fc:	2204      	movs	r2, #4
 80013fe:	f005 f90c 	bl	800661a <HAL_UART_Transmit>

	uint32_t tick_timestamp;

	active_buffer = log_buffer0;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <logger_task+0xcc>)
 8001404:	4a23      	ldr	r2, [pc, #140]	; (8001494 <logger_task+0xd0>)
 8001406:	601a      	str	r2, [r3, #0]
	buffer_index = 0;
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <logger_task+0xd4>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	logging_started = 1;
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <logger_task+0xd8>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]

	for(;;){

		// Save values to buffer
		tick_timestamp =  osKernelGetTickCount() *  portTICK_RATE_MS;
 8001414:	f006 f9f4 	bl	8007800 <osKernelGetTickCount>
 8001418:	60f8      	str	r0, [r7, #12]
		current_sample.tic = tick_timestamp;
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <logger_task+0xdc>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6013      	str	r3, [r2, #0]

		memcpy(active_buffer + log_index, &current_sample, sizeof(LogSample));
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <logger_task+0xcc>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <logger_task+0xe0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	019b      	lsls	r3, r3, #6
 800142a:	4413      	add	r3, r2
 800142c:	2240      	movs	r2, #64	; 0x40
 800142e:	491c      	ldr	r1, [pc, #112]	; (80014a0 <logger_task+0xdc>)
 8001430:	4618      	mov	r0, r3
 8001432:	f009 fc5f 	bl	800acf4 <memcpy>

		log_index += 1;
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <logger_task+0xe0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <logger_task+0xe0>)
 800143e:	6013      	str	r3, [r2, #0]

		if(log_index >= buffer_size){
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <logger_task+0xe0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2bc7      	cmp	r3, #199	; 0xc7
 8001446:	dd1c      	ble.n	8001482 <logger_task+0xbe>
			// Send buffer in non-blocking mode
			HAL_UART_Transmit_IT(uart, (uint8_t*) active_buffer, sizeof(LogSample)*buffer_size);
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <logger_task+0xc8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <logger_task+0xcc>)
 800144e:	6811      	ldr	r1, [r2, #0]
 8001450:	f44f 5248 	mov.w	r2, #12800	; 0x3200
 8001454:	4618      	mov	r0, r3
 8001456:	f005 f972 	bl	800673e <HAL_UART_Transmit_IT>
			if(buffer_index == 0){
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <logger_task+0xd4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <logger_task+0xac>
				active_buffer = log_buffer1;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <logger_task+0xcc>)
 8001464:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <logger_task+0xe4>)
 8001466:	601a      	str	r2, [r3, #0]
				buffer_index = 1;
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <logger_task+0xd4>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e005      	b.n	800147c <logger_task+0xb8>
			}else{
				active_buffer = log_buffer0;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <logger_task+0xcc>)
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <logger_task+0xd0>)
 8001474:	601a      	str	r2, [r3, #0]
				buffer_index = 0;
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <logger_task+0xd4>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			}
			log_index = 0;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <logger_task+0xe0>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
		}
		// LOGGING RATE
		vTaskDelay(8.0/portTICK_RATE_MS); // 4 MINIMUM
 8001482:	2008      	movs	r0, #8
 8001484:	f007 fa0a 	bl	800889c <vTaskDelay>
		tick_timestamp =  osKernelGetTickCount() *  portTICK_RATE_MS;
 8001488:	e7c4      	b.n	8001414 <logger_task+0x50>
 800148a:	bf00      	nop
 800148c:	200000b8 	.word	0x200000b8
 8001490:	200064fc 	.word	0x200064fc
 8001494:	200000fc 	.word	0x200000fc
 8001498:	20006500 	.word	0x20006500
 800149c:	20006508 	.word	0x20006508
 80014a0:	200000bc 	.word	0x200000bc
 80014a4:	20006504 	.word	0x20006504
 80014a8:	200032fc 	.word	0x200032fc

080014ac <update_log_signal>:
	}
}


void update_log_signal(float value, int index){
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014b6:	6038      	str	r0, [r7, #0]
	// Float is atomic so currnently there is no need
	// for a sempahore here. double -> 64bits -> two words -> not atomic!
	current_sample.signals[index] = value;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <update_log_signal+0x28>)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3304      	adds	r3, #4
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]

}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	200000bc 	.word	0x200000bc

080014d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == BLUE_BUTTON_Pin){
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e8:	d10a      	bne.n	8001500 <HAL_GPIO_EXTI_Callback+0x28>
		if(elec_search_state2){
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_GPIO_EXTI_Callback+0x34>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_EXTI_Callback+0x22>
			elec_search_state2 = 0;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_GPIO_EXTI_Callback+0x34>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
		}else{
			elec_search_state2 = 1;
		}
	}

}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_EXTI_Callback+0x28>
			elec_search_state2 = 1;
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_GPIO_EXTI_Callback+0x34>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20006780 	.word	0x20006780

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f001 f91e 	bl	8002754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f856 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 fb7c 	bl	8001c18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001520:	f000 fb50 	bl	8001bc4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001524:	f000 f8c4 	bl	80016b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001528:	f000 f914 	bl	8001754 <MX_ADC2_Init>
  MX_ADC3_Init();
 800152c:	f000 f964 	bl	80017f8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001530:	f000 f9e2 	bl	80018f8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001534:	f000 f9b2 	bl	800189c <MX_I2C1_Init>
  MX_TIM5_Init();
 8001538:	f000 fab8 	bl	8001aac <MX_TIM5_Init>
  MX_TIM3_Init();
 800153c:	f000 fa68 	bl	8001a10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  mtr_init();
 8001540:	f000 fc40 	bl	8001dc4 <mtr_init>
  mtr_set_U(0.5);
 8001544:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001548:	f000 fd84 	bl	8002054 <mtr_set_U>
  mtr_set_W(0.5);
 800154c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001550:	f000 fdcc 	bl	80020ec <mtr_set_W>
  mtr_set_V(0.5);
 8001554:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001558:	f000 fda2 	bl	80020a0 <mtr_set_V>
  encoder_init();
 800155c:	f7ff fe3e 	bl	80011dc <encoder_init>


  HAL_TIM_Base_Start_IT(&htim3);
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <main+0x90>)
 8001562:	f003 ff4f 	bl	8005404 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001566:	f006 f901 	bl	800776c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <main+0x94>)
 800156c:	2100      	movs	r1, #0
 800156e:	480e      	ldr	r0, [pc, #56]	; (80015a8 <main+0x98>)
 8001570:	f006 f95b 	bl	800782a <osThreadNew>
 8001574:	4603      	mov	r3, r0
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <main+0x9c>)
 8001578:	6013      	str	r3, [r2, #0]

  /* creation of logging_task */
  logging_taskHandle = osThreadNew(start_logging_task, NULL, &logging_task_attributes);
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <main+0xa0>)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	; (80015b4 <main+0xa4>)
 8001580:	f006 f953 	bl	800782a <osThreadNew>
 8001584:	4603      	mov	r3, r0
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <main+0xa8>)
 8001588:	6013      	str	r3, [r2, #0]

  /* creation of servo_task */
  servo_taskHandle = osThreadNew(start_servo_task, NULL, &servo_task_attributes);
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <main+0xac>)
 800158c:	2100      	movs	r1, #0
 800158e:	480c      	ldr	r0, [pc, #48]	; (80015c0 <main+0xb0>)
 8001590:	f006 f94b 	bl	800782a <osThreadNew>
 8001594:	4603      	mov	r3, r0
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <main+0xb4>)
 8001598:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800159a:	f006 f90b 	bl	80077b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800159e:	e7fe      	b.n	800159e <main+0x8e>
 80015a0:	20006680 	.word	0x20006680
 80015a4:	0800ba48 	.word	0x0800ba48
 80015a8:	08001d25 	.word	0x08001d25
 80015ac:	20006754 	.word	0x20006754
 80015b0:	0800ba6c 	.word	0x0800ba6c
 80015b4:	08001d41 	.word	0x08001d41
 80015b8:	20006758 	.word	0x20006758
 80015bc:	0800ba90 	.word	0x0800ba90
 80015c0:	08001d5d 	.word	0x08001d5d
 80015c4:	2000675c 	.word	0x2000675c

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b094      	sub	sp, #80	; 0x50
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	2234      	movs	r2, #52	; 0x34
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 fb9a 	bl	800ad10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <SystemClock_Config+0xe0>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <SystemClock_Config+0xe0>)
 80015f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <SystemClock_Config+0xe0>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001608:	2300      	movs	r3, #0
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <SystemClock_Config+0xe4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a26      	ldr	r2, [pc, #152]	; (80016ac <SystemClock_Config+0xe4>)
 8001612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b24      	ldr	r3, [pc, #144]	; (80016ac <SystemClock_Config+0xe4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162c:	2310      	movs	r3, #16
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001634:	2300      	movs	r3, #0
 8001636:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001638:	2310      	movs	r3, #16
 800163a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800163c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001640:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001646:	2302      	movs	r3, #2
 8001648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4618      	mov	r0, r3
 8001654:	f003 fbe8 	bl	8004e28 <HAL_RCC_OscConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800165e:	f000 fbab 	bl	8001db8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001662:	f003 f815 	bl	8004690 <HAL_PWREx_EnableOverDrive>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800166c:	f000 fba4 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001670:	230f      	movs	r3, #15
 8001672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001674:	2303      	movs	r3, #3
 8001676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800167c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	2105      	movs	r1, #5
 800168e:	4618      	mov	r0, r3
 8001690:	f003 f84e 	bl	8004730 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800169a:	f000 fb8d 	bl	8001db8 <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3750      	adds	r7, #80	; 0x50
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000

080016b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_ADC1_Init+0x9c>)
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <MX_ADC1_Init+0xa0>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <MX_ADC1_Init+0x9c>)
 80016ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_ADC1_Init+0x9c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_ADC1_Init+0x9c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <MX_ADC1_Init+0x9c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_ADC1_Init+0x9c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_ADC1_Init+0x9c>)
 80016ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC1;
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <MX_ADC1_Init+0x9c>)
 80016f4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_ADC1_Init+0x9c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_ADC1_Init+0x9c>)
 8001702:	2201      	movs	r2, #1
 8001704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_ADC1_Init+0x9c>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_ADC1_Init+0x9c>)
 8001710:	2201      	movs	r2, #1
 8001712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_ADC1_Init+0x9c>)
 8001716:	f001 f85f 	bl	80027d8 <HAL_ADC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001720:	f000 fb4a 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001724:	2305      	movs	r3, #5
 8001726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800172c:	2301      	movs	r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_ADC1_Init+0x9c>)
 8001736:	f001 faa3 	bl	8002c80 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001740:	f000 fb3a 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	2000650c 	.word	0x2000650c
 8001750:	40012000 	.word	0x40012000

08001754 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <MX_ADC2_Init+0xa0>)
 800176a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_ADC2_Init+0x9c>)
 800176e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001772:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_ADC2_Init+0x9c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001782:	2200      	movs	r2, #0
 8001784:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC2;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_ADC2_Init+0x9c>)
 8001798:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017ba:	f001 f80d 	bl	80027d8 <HAL_ADC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 80017c4:	f000 faf8 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80017c8:	2306      	movs	r3, #6
 80017ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017cc:	2301      	movs	r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_ADC2_Init+0x9c>)
 80017da:	f001 fa51 	bl	8002c80 <HAL_ADC_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80017e4:	f000 fae8 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20006554 	.word	0x20006554
 80017f4:	40012100 	.word	0x40012100

080017f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_ADC3_Init+0x9c>)
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <MX_ADC3_Init+0xa0>)
 800180e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001812:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001816:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <MX_ADC3_Init+0x9c>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001826:	2200      	movs	r2, #0
 8001828:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_ADC3_Init+0x9c>)
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T5_CC3;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_ADC3_Init+0x9c>)
 800183c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_ADC3_Init+0x9c>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_ADC3_Init+0x9c>)
 8001858:	2201      	movs	r2, #1
 800185a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_ADC3_Init+0x9c>)
 800185e:	f000 ffbb 	bl	80027d8 <HAL_ADC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8001868:	f000 faa6 	bl	8001db8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800186c:	230c      	movs	r3, #12
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_ADC3_Init+0x9c>)
 800187e:	f001 f9ff 	bl	8002c80 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001888:	f000 fa96 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	2000659c 	.word	0x2000659c
 8001898:	40012200 	.word	0x40012200

0800189c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C1_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_I2C1_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C1_Init+0x50>)
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_I2C1_Init+0x58>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_I2C1_Init+0x50>)
 80018da:	f001 ff43 	bl	8003764 <HAL_I2C_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f000 fa68 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200065e4 	.word	0x200065e4
 80018f0:	40005400 	.word	0x40005400
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	615a      	str	r2, [r3, #20]
 8001926:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <MX_TIM2_Init+0x114>)
 800192a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <MX_TIM2_Init+0x114>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <MX_TIM2_Init+0x114>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <MX_TIM2_Init+0x114>)
 800193e:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8001942:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <MX_TIM2_Init+0x114>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <MX_TIM2_Init+0x114>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001950:	482e      	ldr	r0, [pc, #184]	; (8001a0c <MX_TIM2_Init+0x114>)
 8001952:	f003 fd07 	bl	8005364 <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800195c:	f000 fa2c 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	4619      	mov	r1, r3
 800196c:	4827      	ldr	r0, [pc, #156]	; (8001a0c <MX_TIM2_Init+0x114>)
 800196e:	f004 f8a5 	bl	8005abc <HAL_TIM_ConfigClockSource>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001978:	f000 fa1e 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800197c:	4823      	ldr	r0, [pc, #140]	; (8001a0c <MX_TIM2_Init+0x114>)
 800197e:	f003 fdb1 	bl	80054e4 <HAL_TIM_PWM_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001988:	f000 fa16 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800198c:	2320      	movs	r3, #32
 800198e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4619      	mov	r1, r3
 800199a:	481c      	ldr	r0, [pc, #112]	; (8001a0c <MX_TIM2_Init+0x114>)
 800199c:	f004 fd60 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80019a6:	f000 fa07 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80019ae:	2364      	movs	r3, #100	; 0x64
 80019b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4812      	ldr	r0, [pc, #72]	; (8001a0c <MX_TIM2_Init+0x114>)
 80019c2:	f003 ffb9 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80019cc:	f000 f9f4 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2204      	movs	r2, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <MX_TIM2_Init+0x114>)
 80019d8:	f003 ffae 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019e2:	f000 f9e9 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2208      	movs	r2, #8
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <MX_TIM2_Init+0x114>)
 80019ee:	f003 ffa3 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80019f8:	f000 f9de 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <MX_TIM2_Init+0x114>)
 80019fe:	f000 fd1f 	bl	8002440 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3738      	adds	r7, #56	; 0x38
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20006638 	.word	0x20006638

08001a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a24:	463b      	mov	r3, r7
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	; (8001aa8 <MX_TIM3_Init+0x98>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30000;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a40:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a52:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a54:	f003 fc86 	bl	8005364 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 f9ab 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a70:	f004 f824 	bl	8005abc <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a7a:	f000 f99d 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_TIM3_Init+0x94>)
 8001a8c:	f004 fce8 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a96:	f000 f98f 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20006680 	.word	0x20006680
 8001aa8:	40000400 	.word	0x40000400

08001aac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08e      	sub	sp, #56	; 0x38
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ade:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001ae0:	4a37      	ldr	r2, [pc, #220]	; (8001bc0 <MX_TIM5_Init+0x114>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001af2:	f04f 32ff 	mov.w	r2, #4294967295
 8001af6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b06:	f003 fc2d 	bl	8005364 <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001b10:	f000 f952 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b16:	f003 fce5 	bl	80054e4 <HAL_TIM_PWM_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001b20:	f000 f94a 	bl	8001db8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b24:	2304      	movs	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	4822      	ldr	r0, [pc, #136]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b34:	f004 f889 	bl	8005c4a <HAL_TIM_SlaveConfigSynchro>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8001b3e:	f000 f93b 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	481a      	ldr	r0, [pc, #104]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b52:	f004 fc85 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001b5c:	f000 f92c 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b60:	2360      	movs	r3, #96	; 0x60
 8001b62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b78:	f003 fede 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 8001b82:	f000 f919 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2204      	movs	r2, #4
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001b8e:	f003 fed3 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001b98:	f000 f90e 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_TIM5_Init+0x110>)
 8001ba4:	f003 fec8 	bl	8005938 <HAL_TIM_PWM_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8001bae:	f000 f903 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200066c8 	.word	0x200066c8
 8001bc0:	40000c00 	.word	0x40000c00

08001bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <MX_USART2_UART_Init+0x50>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bfa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	; (8001c10 <MX_USART2_UART_Init+0x4c>)
 8001bfe:	f004 fcbf 	bl	8006580 <HAL_UART_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001c08:	f000 f8d6 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20006710 	.word	0x20006710
 8001c14:	40004400 	.word	0x40004400

08001c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a39      	ldr	r2, [pc, #228]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <MX_GPIO_Init+0x104>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15|DEBUG_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8001ca4:	481e      	ldr	r0, [pc, #120]	; (8001d20 <MX_GPIO_Init+0x108>)
 8001ca6:	f001 fd2b 	bl	8003700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4817      	ldr	r0, [pc, #92]	; (8001d20 <MX_GPIO_Init+0x108>)
 8001cc2:	f001 fb89 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4810      	ldr	r0, [pc, #64]	; (8001d20 <MX_GPIO_Init+0x108>)
 8001ce0:	f001 fb7a 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8001ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4808      	ldr	r0, [pc, #32]	; (8001d20 <MX_GPIO_Init+0x108>)
 8001cfe:	f001 fb6b 	bl	80033d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2106      	movs	r1, #6
 8001d06:	2028      	movs	r0, #40	; 0x28
 8001d08:	f001 faaa 	bl	8003260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d0c:	2028      	movs	r0, #40	; 0x28
 8001d0e:	f001 fac3 	bl	8003298 <HAL_NVIC_EnableIRQ>

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020800 	.word	0x40020800

08001d24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	vTaskDelay(500/portTICK_RATE_MS);
 8001d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d30:	f006 fdb4 	bl	800889c <vTaskDelay>
	for(;;){
		//INF
		vTaskDelay(5000/portTICK_RATE_MS);
 8001d34:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d38:	f006 fdb0 	bl	800889c <vTaskDelay>
 8001d3c:	e7fa      	b.n	8001d34 <StartDefaultTask+0x10>
	...

08001d40 <start_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_logging_task */

	logger_task(&huart2);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <start_logging_task+0x18>)
 8001d4a:	f7ff fb3b 	bl	80013c4 <logger_task>

  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001d4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001d52:	f005 fdfc 	bl	800794e <osDelay>
 8001d56:	e7fa      	b.n	8001d4e <start_logging_task+0xe>
 8001d58:	20006710 	.word	0x20006710

08001d5c <start_servo_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_servo_task */
void start_servo_task(void *argument)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_servo_task */
  /* Infinite loop */
  for(;;)
  {
	encoder_update();
 8001d64:	f7ff fa54 	bl	8001210 <encoder_update>
	update_log_signal(encoder.angle, 0);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <start_servo_task+0x34>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	2000      	movs	r0, #0
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	f7ff fb9a 	bl	80014ac <update_log_signal>
	update_log_signal(encoder.velocity, 1);
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <start_servo_task+0x34>)
 8001d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d7e:	2001      	movs	r0, #1
 8001d80:	eeb0 0a67 	vmov.f32	s0, s15
 8001d84:	f7ff fb92 	bl	80014ac <update_log_signal>
	osDelay(4);
 8001d88:	2004      	movs	r0, #4
 8001d8a:	f005 fde0 	bl	800794e <osDelay>
	encoder_update();
 8001d8e:	e7e9      	b.n	8001d64 <start_servo_task+0x8>
 8001d90:	20000098 	.word	0x20000098

08001d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001da6:	f000 fcf7 	bl	8002798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>
	...

08001dc4 <mtr_init>:
extern EncoderSignals encoder;

CurrCtrl_IN cc_in;
CurrCtrl_OUT cc_out;

void mtr_init(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

	// MTR Voltage PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4811      	ldr	r0, [pc, #68]	; (8001e10 <mtr_init+0x4c>)
 8001dcc:	f003 fbe4 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	480f      	ldr	r0, [pc, #60]	; (8001e10 <mtr_init+0x4c>)
 8001dd4:	f003 fbe0 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001dd8:	2108      	movs	r1, #8
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <mtr_init+0x4c>)
 8001ddc:	f003 fbdc 	bl	8005598 <HAL_TIM_PWM_Start>

	//HAL_ADCEx_InjectedStart_IT(&hadc1);
	//HAL_ADCEx_InjectedStart_IT(&hadc2);
	//HAL_ADCEx_InjectedStart_IT(&hadc3);

	HAL_ADC_Start_IT(&hadc1);
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <mtr_init+0x50>)
 8001de2:	f000 fd3d 	bl	8002860 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8001de6:	480c      	ldr	r0, [pc, #48]	; (8001e18 <mtr_init+0x54>)
 8001de8:	f000 fd3a 	bl	8002860 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc3);
 8001dec:	480b      	ldr	r0, [pc, #44]	; (8001e1c <mtr_init+0x58>)
 8001dee:	f000 fd37 	bl	8002860 <HAL_ADC_Start_IT>
	//HAL_ADCEx_InjectedStart(&hadc1);
	//HAL_ADCEx_InjectedStart(&hadc2);
	//HAL_ADCEx_InjectedStart(&hadc3);

	// PWM for ADC Trigger
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001df2:	2100      	movs	r1, #0
 8001df4:	480a      	ldr	r0, [pc, #40]	; (8001e20 <mtr_init+0x5c>)
 8001df6:	f003 fbcf 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <mtr_init+0x5c>)
 8001dfe:	f003 fbcb 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001e02:	2108      	movs	r1, #8
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <mtr_init+0x5c>)
 8001e06:	f003 fbc7 	bl	8005598 <HAL_TIM_PWM_Start>
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20006638 	.word	0x20006638
 8001e14:	2000650c 	.word	0x2000650c
 8001e18:	20006554 	.word	0x20006554
 8001e1c:	2000659c 	.word	0x2000659c
 8001e20:	200066c8 	.word	0x200066c8

08001e24 <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

	//if (hadc == &hadc1){
		adc_U_phase = HAL_ADC_GetValue(&hadc1);
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001e2e:	f000 ff05 	bl	8002c3c <HAL_ADC_GetValue>
 8001e32:	4603      	mov	r3, r0
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_ADC_ConvCpltCallback+0x40>)
 8001e38:	801a      	strh	r2, [r3, #0]
	//}
	//if (hadc == &hadc2){
		adc_V_phase = HAL_ADC_GetValue(&hadc2);
 8001e3a:	480b      	ldr	r0, [pc, #44]	; (8001e68 <HAL_ADC_ConvCpltCallback+0x44>)
 8001e3c:	f000 fefe 	bl	8002c3c <HAL_ADC_GetValue>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_ADC_ConvCpltCallback+0x48>)
 8001e46:	801a      	strh	r2, [r3, #0]
	//}

	//if (hadc == &hadc3){
		adc_W_phase = HAL_ADC_GetValue(&hadc3);
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001e4a:	f000 fef7 	bl	8002c3c <HAL_ADC_GetValue>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_ADC_ConvCpltCallback+0x50>)
 8001e54:	801a      	strh	r2, [r3, #0]
	//}

}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000650c 	.word	0x2000650c
 8001e64:	20006760 	.word	0x20006760
 8001e68:	20006554 	.word	0x20006554
 8001e6c:	20006762 	.word	0x20006762
 8001e70:	2000659c 	.word	0x2000659c
 8001e74:	20006764 	.word	0x20006764

08001e78 <limit_duty>:



float limit_duty(float duty){
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(duty > max_duty){
 8001e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e86:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001ec0 <limit_duty+0x48>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dd01      	ble.n	8001e98 <limit_duty+0x20>
		duty = max_duty;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <limit_duty+0x4c>)
 8001e96:	607b      	str	r3, [r7, #4]
	}

	if(duty < 0.0){
 8001e98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d502      	bpl.n	8001eac <limit_duty+0x34>
		duty = 0.0f;
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
	}

	return duty;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	ee07 3a90 	vmov	s15, r3
}
 8001eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	3f666666 	.word	0x3f666666
 8001ec4:	3f666666 	.word	0x3f666666

08001ec8 <mtr_current_ctrl_step>:

float theta = 0;
float speed_gain = 1;
uint8_t edge = 0;

void mtr_current_ctrl_step(void){
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

	// 0.66 ms

	// Convert ADC to currents
	mtr_currents.U = adc_U_phase;
 8001ecc:	4b58      	ldr	r3, [pc, #352]	; (8002030 <mtr_current_ctrl_step+0x168>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed8:	4b56      	ldr	r3, [pc, #344]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]
	mtr_currents.V = adc_V_phase;
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <mtr_current_ctrl_step+0x170>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	4b52      	ldr	r3, [pc, #328]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001eec:	edc3 7a01 	vstr	s15, [r3, #4]
	mtr_currents.W = adc_W_phase;
 8001ef0:	4b52      	ldr	r3, [pc, #328]	; (800203c <mtr_current_ctrl_step+0x174>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efc:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001efe:	edc3 7a02 	vstr	s15, [r3, #8]


	// Inputs
	cc_in.Iu = mtr_currents.U;
 8001f02:	4b4c      	ldr	r3, [pc, #304]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a4e      	ldr	r2, [pc, #312]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f08:	6153      	str	r3, [r2, #20]
	cc_in.Iv = mtr_currents.V;
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4a4c      	ldr	r2, [pc, #304]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f10:	6193      	str	r3, [r2, #24]
	cc_in.Iw = mtr_currents.W;
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f18:	61d3      	str	r3, [r2, #28]

	cc_in.current_ctrl_cmd = elec_search_state2;
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <mtr_current_ctrl_step+0x17c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a48      	ldr	r2, [pc, #288]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f20:	6113      	str	r3, [r2, #16]

	cc_in.ref_Id = 0;
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
	cc_in.ref_Iq = 0;
 8001f2a:	4b45      	ldr	r3, [pc, #276]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]

	cc_in.rotor_ang = encoder.angle;
 8001f32:	4b45      	ldr	r3, [pc, #276]	; (8002048 <mtr_current_ctrl_step+0x180>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f38:	6093      	str	r3, [r2, #8]
	cc_in.rotor_vel = encoder.velocity;
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <mtr_current_ctrl_step+0x180>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f40:	60d3      	str	r3, [r2, #12]

	current_ctrl(&cc_in, &cc_out);
 8001f42:	4942      	ldr	r1, [pc, #264]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001f44:	483e      	ldr	r0, [pc, #248]	; (8002040 <mtr_current_ctrl_step+0x178>)
 8001f46:	f008 fc6d 	bl	800a824 <current_ctrl>

	mtr_voltages.U = cc_out.phase_U;
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001f50:	6013      	str	r3, [r2, #0]
	mtr_voltages.V = cc_out.phase_V;
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a3e      	ldr	r2, [pc, #248]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001f58:	6053      	str	r3, [r2, #4]
	mtr_voltages.W = cc_out.phase_W;
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001f60:	6093      	str	r3, [r2, #8]

	update_log_signal(mtr_currents.U, 2);
 8001f62:	4b34      	ldr	r3, [pc, #208]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	2002      	movs	r0, #2
 8001f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6e:	f7ff fa9d 	bl	80014ac <update_log_signal>
	update_log_signal(mtr_currents.V, 3);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f74:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f78:	2003      	movs	r0, #3
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f7ff fa95 	bl	80014ac <update_log_signal>
	update_log_signal(mtr_currents.W, 4);
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <mtr_current_ctrl_step+0x16c>)
 8001f84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f88:	2004      	movs	r0, #4
 8001f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8e:	f7ff fa8d 	bl	80014ac <update_log_signal>

	update_log_signal(mtr_voltages.U, 5);
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	2005      	movs	r0, #5
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	f7ff fa85 	bl	80014ac <update_log_signal>
	update_log_signal(mtr_voltages.V, 6);
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001fa4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa8:	2006      	movs	r0, #6
 8001faa:	eeb0 0a67 	vmov.f32	s0, s15
 8001fae:	f7ff fa7d 	bl	80014ac <update_log_signal>
	update_log_signal(mtr_voltages.W, 7);
 8001fb2:	4b27      	ldr	r3, [pc, #156]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8001fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb8:	2007      	movs	r0, #7
 8001fba:	eeb0 0a67 	vmov.f32	s0, s15
 8001fbe:	f7ff fa75 	bl	80014ac <update_log_signal>

	update_log_signal(cc_out.debug0, 8);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001fc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc8:	2008      	movs	r0, #8
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	f7ff fa6d 	bl	80014ac <update_log_signal>
	update_log_signal(cc_out.debug1, 9);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001fd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd8:	2009      	movs	r0, #9
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	f7ff fa65 	bl	80014ac <update_log_signal>
	update_log_signal(cc_out.debug2, 10);
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001fe4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fe8:	200a      	movs	r0, #10
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	f7ff fa5d 	bl	80014ac <update_log_signal>
	update_log_signal(cc_out.debug3, 11);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <mtr_current_ctrl_step+0x184>)
 8001ff4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ff8:	200b      	movs	r0, #11
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	f7ff fa55 	bl	80014ac <update_log_signal>

	// Set voltage to PWM
	mtr_set_U(mtr_voltages.U);
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	f000 f822 	bl	8002054 <mtr_set_U>
	mtr_set_V(mtr_voltages.V);
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8002012:	edd3 7a01 	vldr	s15, [r3, #4]
 8002016:	eeb0 0a67 	vmov.f32	s0, s15
 800201a:	f000 f841 	bl	80020a0 <mtr_set_V>
	mtr_set_W(mtr_voltages.W);
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <mtr_current_ctrl_step+0x188>)
 8002020:	edd3 7a02 	vldr	s15, [r3, #8]
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	f000 f860 	bl	80020ec <mtr_set_W>

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20006760 	.word	0x20006760
 8002034:	20006774 	.word	0x20006774
 8002038:	20006762 	.word	0x20006762
 800203c:	20006764 	.word	0x20006764
 8002040:	20006784 	.word	0x20006784
 8002044:	20006780 	.word	0x20006780
 8002048:	20000098 	.word	0x20000098
 800204c:	200067a4 	.word	0x200067a4
 8002050:	20006768 	.word	0x20006768

08002054 <mtr_set_U>:

void mtr_set_U(float duty){
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t duty_int = limit_duty(duty)*max_timer;
 800205e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002062:	f7ff ff09 	bl	8001e78 <limit_duty>
 8002066:	eef0 7a40 	vmov.f32	s15, s0
 800206a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002098 <mtr_set_U+0x44>
 800206e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 3a90 	vmov	r3, s15
 800207a:	81fb      	strh	r3, [r7, #14]

	TIM2->CCR1 = duty_int; 		// PWM
 800207c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	6353      	str	r3, [r2, #52]	; 0x34
	//TIM5->SR = ~TIM_SR_CC1IF; // Clear interupt flag
	TIM5->CCR1 = TIM2->CCR1 + adc_offset;	// ADC Sampling
 8002084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <mtr_set_U+0x48>)
 800208c:	3364      	adds	r3, #100	; 0x64
 800208e:	6353      	str	r3, [r2, #52]	; 0x34


}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	46034000 	.word	0x46034000
 800209c:	40000c00 	.word	0x40000c00

080020a0 <mtr_set_V>:

void mtr_set_V(float duty){
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t duty_int = limit_duty(duty)*max_timer;
 80020aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80020ae:	f7ff fee3 	bl	8001e78 <limit_duty>
 80020b2:	eef0 7a40 	vmov.f32	s15, s0
 80020b6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80020e4 <mtr_set_V+0x44>
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c2:	ee17 3a90 	vmov	r3, s15
 80020c6:	81fb      	strh	r3, [r7, #14]

	TIM2->CCR2 = duty_int; 		// PWM
 80020c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	6393      	str	r3, [r2, #56]	; 0x38
	//TIM5->SR = ~TIM_SR_CC2IF; // Clear interupt flag
	TIM5->CCR2 = TIM2->CCR2 + adc_offset;	// ADC Sampling
 80020d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <mtr_set_V+0x48>)
 80020d8:	3364      	adds	r3, #100	; 0x64
 80020da:	6393      	str	r3, [r2, #56]	; 0x38

}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	46034000 	.word	0x46034000
 80020e8:	40000c00 	.word	0x40000c00

080020ec <mtr_set_W>:


void mtr_set_W(float duty){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	ed87 0a01 	vstr	s0, [r7, #4]

	uint16_t duty_int = limit_duty(duty)*max_timer;
 80020f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80020fa:	f7ff febd 	bl	8001e78 <limit_duty>
 80020fe:	eef0 7a40 	vmov.f32	s15, s0
 8002102:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002130 <mtr_set_W+0x44>
 8002106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	81fb      	strh	r3, [r7, #14]

	TIM2->CCR3 = duty_int; 		// PWM
 8002114:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	63d3      	str	r3, [r2, #60]	; 0x3c
	//TIM5->SR = ~TIM_SR_CC3IF; // Clear interupt flag
	TIM5->CCR3 = TIM2->CCR3 + adc_offset;	// ADC Sampling
 800211c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	4a04      	ldr	r2, [pc, #16]	; (8002134 <mtr_set_W+0x48>)
 8002124:	3364      	adds	r3, #100	; 0x64
 8002126:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	46034000 	.word	0x46034000
 8002134:	40000c00 	.word	0x40000c00

08002138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_MspInit+0x54>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_MspInit+0x54>)
 8002148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800214c:	6453      	str	r3, [r2, #68]	; 0x44
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_MspInit+0x54>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_MspInit+0x54>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_MspInit+0x54>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_MspInit+0x54>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	210f      	movs	r1, #15
 800217a:	f06f 0001 	mvn.w	r0, #1
 800217e:	f001 f86f 	bl	8003260 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_ADC_MspInit+0x164>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d130      	bne.n	8002214 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a48      	ldr	r2, [pc, #288]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ea:	2320      	movs	r3, #32
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ee:	2303      	movs	r3, #3
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4619      	mov	r1, r3
 80021fc:	483f      	ldr	r0, [pc, #252]	; (80022fc <HAL_ADC_MspInit+0x16c>)
 80021fe:	f001 f8eb 	bl	80033d8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2105      	movs	r1, #5
 8002206:	2012      	movs	r0, #18
 8002208:	f001 f82a 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800220c:	2012      	movs	r0, #18
 800220e:	f001 f843 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002212:	e06a      	b.n	80022ea <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a39      	ldr	r2, [pc, #228]	; (8002300 <HAL_ADC_MspInit+0x170>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d130      	bne.n	8002280 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b32      	ldr	r3, [pc, #200]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002256:	2340      	movs	r3, #64	; 0x40
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225a:	2303      	movs	r3, #3
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	4619      	mov	r1, r3
 8002268:	4824      	ldr	r0, [pc, #144]	; (80022fc <HAL_ADC_MspInit+0x16c>)
 800226a:	f001 f8b5 	bl	80033d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2105      	movs	r1, #5
 8002272:	2012      	movs	r0, #18
 8002274:	f000 fff4 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002278:	2012      	movs	r0, #18
 800227a:	f001 f80d 	bl	8003298 <HAL_NVIC_EnableIRQ>
}
 800227e:	e034      	b.n	80022ea <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_ADC_MspInit+0x174>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12f      	bne.n	80022ea <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 8002294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_ADC_MspInit+0x168>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c2:	2304      	movs	r3, #4
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c6:	2303      	movs	r3, #3
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d2:	4619      	mov	r1, r3
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <HAL_ADC_MspInit+0x178>)
 80022d6:	f001 f87f 	bl	80033d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80022da:	2200      	movs	r2, #0
 80022dc:	2105      	movs	r1, #5
 80022de:	2012      	movs	r0, #18
 80022e0:	f000 ffbe 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022e4:	2012      	movs	r0, #18
 80022e6:	f000 ffd7 	bl	8003298 <HAL_NVIC_EnableIRQ>
}
 80022ea:	bf00      	nop
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40012000 	.word	0x40012000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40012100 	.word	0x40012100
 8002304:	40012200 	.word	0x40012200
 8002308:	40020800 	.word	0x40020800

0800230c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a19      	ldr	r2, [pc, #100]	; (8002390 <HAL_I2C_MspInit+0x84>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d12b      	bne.n	8002386 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b18      	ldr	r3, [pc, #96]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a17      	ldr	r2, [pc, #92]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800234e:	2312      	movs	r3, #18
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800235a:	2304      	movs	r3, #4
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	480c      	ldr	r0, [pc, #48]	; (8002398 <HAL_I2C_MspInit+0x8c>)
 8002366:	f001 f837 	bl	80033d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_I2C_MspInit+0x88>)
 8002374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_I2C_MspInit+0x88>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40005400 	.word	0x40005400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ac:	d10e      	bne.n	80023cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023ca:	e02e      	b.n	800242a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <HAL_TIM_Base_MspInit+0x9c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d116      	bne.n	8002404 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2105      	movs	r1, #5
 80023f6:	201d      	movs	r0, #29
 80023f8:	f000 ff32 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023fc:	201d      	movs	r0, #29
 80023fe:	f000 ff4b 	bl	8003298 <HAL_NVIC_EnableIRQ>
}
 8002402:	e012      	b.n	800242a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_TIM_Base_MspInit+0xa0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_TIM_Base_MspInit+0x98>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40000400 	.word	0x40000400
 800243c:	40000c00 	.word	0x40000c00

08002440 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d11e      	bne.n	80024a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_TIM_MspPostInit+0x68>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_TIM_MspPostInit+0x68>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	6313      	str	r3, [r2, #48]	; 0x30
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_TIM_MspPostInit+0x68>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB8     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MTR_V_PWM_Pin|MTR_W_PWM_Pin|MTR_U_PWM_Pin;
 800247e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002490:	2301      	movs	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	4619      	mov	r1, r3
 800249a:	4804      	ldr	r0, [pc, #16]	; (80024ac <HAL_TIM_MspPostInit+0x6c>)
 800249c:	f000 ff9c 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400

080024b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	; 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_UART_MspInit+0x94>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d133      	bne.n	800253a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_UART_MspInit+0x98>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_UART_MspInit+0x98>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800250a:	230c      	movs	r3, #12
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251a:	2307      	movs	r3, #7
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	4809      	ldr	r0, [pc, #36]	; (800254c <HAL_UART_MspInit+0x9c>)
 8002526:	f000 ff57 	bl	80033d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2107      	movs	r1, #7
 800252e:	2026      	movs	r0, #38	; 0x26
 8002530:	f000 fe96 	bl	8003260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002534:	2026      	movs	r0, #38	; 0x26
 8002536:	f000 feaf 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40004400 	.word	0x40004400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020000 	.word	0x40020000

08002550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_InitTick+0xd4>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	4a2e      	ldr	r2, [pc, #184]	; (8002624 <HAL_InitTick+0xd4>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6453      	str	r3, [r2, #68]	; 0x44
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_InitTick+0xd4>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	f107 0310 	add.w	r3, r7, #16
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f002 f9ec 	bl	8004964 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800258c:	f002 f9d6 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8002590:	4603      	mov	r3, r0
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002598:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_InitTick+0xd8>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	3b01      	subs	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_InitTick+0xdc>)
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_InitTick+0xe0>)
 80025a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_InitTick+0xdc>)
 80025ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <HAL_InitTick+0xdc>)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_InitTick+0xdc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_InitTick+0xdc>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_InitTick+0xdc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80025ca:	4818      	ldr	r0, [pc, #96]	; (800262c <HAL_InitTick+0xdc>)
 80025cc:	f002 feca 	bl	8005364 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80025d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11b      	bne.n	8002616 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80025de:	4813      	ldr	r0, [pc, #76]	; (800262c <HAL_InitTick+0xdc>)
 80025e0:	f002 ff10 	bl	8005404 <HAL_TIM_Base_Start_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80025ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025f2:	2019      	movs	r0, #25
 80025f4:	f000 fe50 	bl	8003298 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	d808      	bhi.n	8002610 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025fe:	2200      	movs	r2, #0
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	2019      	movs	r0, #25
 8002604:	f000 fe2c 	bl	8003260 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002608:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <HAL_InitTick+0xe4>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e002      	b.n	8002616 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800261a:	4618      	mov	r0, r3
 800261c:	3730      	adds	r7, #48	; 0x30
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	431bde83 	.word	0x431bde83
 800262c:	200067c0 	.word	0x200067c0
 8002630:	40010000 	.word	0x40010000
 8002634:	20000008 	.word	0x20000008

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800263c:	e7fe      	b.n	800263c <NMI_Handler+0x4>

0800263e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002642:	e7fe      	b.n	8002642 <HardFault_Handler+0x4>

08002644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002648:	e7fe      	b.n	8002648 <MemManage_Handler+0x4>

0800264a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264e:	e7fe      	b.n	800264e <BusFault_Handler+0x4>

08002650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002654:	e7fe      	b.n	8002654 <UsageFault_Handler+0x4>

08002656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <ADC_IRQHandler+0x1c>)
 800266a:	f000 f9d7 	bl	8002a1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <ADC_IRQHandler+0x20>)
 8002670:	f000 f9d4 	bl	8002a1c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002674:	4804      	ldr	r0, [pc, #16]	; (8002688 <ADC_IRQHandler+0x24>)
 8002676:	f000 f9d1 	bl	8002a1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000650c 	.word	0x2000650c
 8002684:	20006554 	.word	0x20006554
 8002688:	2000659c 	.word	0x2000659c

0800268c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002692:	f003 f849 	bl	8005728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	200067c0 	.word	0x200067c0

080026a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// 45 MHz
	mtr_current_ctrl_step();
 80026a4:	f7ff fc10 	bl	8001ec8 <mtr_current_ctrl_step>

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <TIM3_IRQHandler+0x14>)
 80026aa:	f003 f83d 	bl	8005728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20006680 	.word	0x20006680

080026b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART2_IRQHandler+0x10>)
 80026be:	f004 f8b3 	bl	8006828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20006710 	.word	0x20006710

080026cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80026d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026d4:	f001 f82e 	bl	8003734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002706:	490e      	ldr	r1, [pc, #56]	; (8002740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800270c:	e002      	b.n	8002714 <LoopCopyDataInit>

0800270e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002712:	3304      	adds	r3, #4

08002714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002718:	d3f9      	bcc.n	800270e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800271c:	4c0b      	ldr	r4, [pc, #44]	; (800274c <LoopFillZerobss+0x26>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002720:	e001      	b.n	8002726 <LoopFillZerobss>

08002722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002724:	3204      	adds	r2, #4

08002726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002728:	d3fb      	bcc.n	8002722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800272a:	f7ff ffd7 	bl	80026dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800272e:	f008 fabb 	bl	800aca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002732:	f7fe feed 	bl	8001510 <main>
  bx  lr    
 8002736:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800273c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002740:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002744:	0800bf0c 	.word	0x0800bf0c
  ldr r2, =_sbss
 8002748:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800274c:	2000b260 	.word	0x2000b260

08002750 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002750:	e7fe      	b.n	8002750 <CAN1_RX0_IRQHandler>
	...

08002754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_Init+0x40>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0d      	ldr	r2, [pc, #52]	; (8002794 <HAL_Init+0x40>)
 800275e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_Init+0x40>)
 800276a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a07      	ldr	r2, [pc, #28]	; (8002794 <HAL_Init+0x40>)
 8002776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 fd64 	bl	800324a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002782:	2004      	movs	r0, #4
 8002784:	f7ff fee4 	bl	8002550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002788:	f7ff fcd6 	bl	8002138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20006808 	.word	0x20006808

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20006808 	.word	0x20006808

080027d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e033      	b.n	8002856 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fcca 	bl	8002190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d118      	bne.n	8002848 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800281e:	f023 0302 	bic.w	r3, r3, #2
 8002822:	f043 0202 	orr.w	r2, r3, #2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fb5a 	bl	8002ee4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f023 0303 	bic.w	r3, r3, #3
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
 8002846:	e001      	b.n	800284c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_Start_IT+0x1a>
 8002876:	2302      	movs	r3, #2
 8002878:	e0bd      	b.n	80029f6 <HAL_ADC_Start_IT+0x196>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d018      	beq.n	80028c2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a0:	4b58      	ldr	r3, [pc, #352]	; (8002a04 <HAL_ADC_Start_IT+0x1a4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_ADC_Start_IT+0x1a8>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0c9a      	lsrs	r2, r3, #18
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028b4:	e002      	b.n	80028bc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f9      	bne.n	80028b6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 8085 	bne.w	80029dc <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d106      	bne.n	8002920 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f023 0206 	bic.w	r2, r3, #6
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
 800291e:	e002      	b.n	8002926 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292e:	4b37      	ldr	r3, [pc, #220]	; (8002a0c <HAL_ADC_Start_IT+0x1ac>)
 8002930:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800293a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12a      	bne.n	80029b2 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <HAL_ADC_Start_IT+0x1b0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d015      	beq.n	8002992 <HAL_ADC_Start_IT+0x132>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a2a      	ldr	r2, [pc, #168]	; (8002a14 <HAL_ADC_Start_IT+0x1b4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d105      	bne.n	800297c <HAL_ADC_Start_IT+0x11c>
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <HAL_ADC_Start_IT+0x1ac>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_ADC_Start_IT+0x1b8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d136      	bne.n	80029f4 <HAL_ADC_Start_IT+0x194>
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_ADC_Start_IT+0x1ac>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b00      	cmp	r3, #0
 8002990:	d130      	bne.n	80029f4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d129      	bne.n	80029f4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	e020      	b.n	80029f4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <HAL_ADC_Start_IT+0x1b0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11b      	bne.n	80029f4 <HAL_ADC_Start_IT+0x194>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d114      	bne.n	80029f4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	e00b      	b.n	80029f4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0210 	orr.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000004 	.word	0x20000004
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	40012300 	.word	0x40012300
 8002a10:	40012000 	.word	0x40012000
 8002a14:	40012100 	.word	0x40012100
 8002a18:	40012200 	.word	0x40012200

08002a1c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d049      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0xca>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d046      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d12b      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d127      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0220 	bic.w	r2, r2, #32
 8002ab0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f9a4 	bl	8001e24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0212 	mvn.w	r2, #18
 8002ae4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d057      	beq.n	8002bac <HAL_ADC_IRQHandler+0x190>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d054      	beq.n	8002bac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d139      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d12b      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d124      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d11d      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d119      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa9d 	bl	80030dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 020c 	mvn.w	r2, #12
 8002baa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d017      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x1d6>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d014      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f837 	bl	8002c56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0201 	mvn.w	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c00:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x218>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f043 0202 	orr.w	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0220 	mvn.w	r2, #32
 8002c22:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f820 	bl	8002c6a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0220 	mvn.w	r2, #32
 8002c32:	601a      	str	r2, [r3, #0]
  }
}
 8002c34:	bf00      	nop
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1c>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e113      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x244>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	d925      	bls.n	8002cf8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b1e      	subs	r3, #30
 8002cc2:	2207      	movs	r2, #7
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	400a      	ands	r2, r1
 8002cd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4403      	add	r3, r0
 8002cea:	3b1e      	subs	r3, #30
 8002cec:	409a      	lsls	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	e022      	b.n	8002d3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6919      	ldr	r1, [r3, #16]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	400a      	ands	r2, r1
 8002d1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6919      	ldr	r1, [r3, #16]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	4603      	mov	r3, r0
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4403      	add	r3, r0
 8002d34:	409a      	lsls	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b06      	cmp	r3, #6
 8002d44:	d824      	bhi.n	8002d90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	3b05      	subs	r3, #5
 8002d58:	221f      	movs	r2, #31
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	400a      	ands	r2, r1
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4618      	mov	r0, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b05      	subs	r3, #5
 8002d82:	fa00 f203 	lsl.w	r2, r0, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	e04c      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d824      	bhi.n	8002de2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	3b23      	subs	r3, #35	; 0x23
 8002daa:	221f      	movs	r2, #31
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43da      	mvns	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	400a      	ands	r2, r1
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b23      	subs	r3, #35	; 0x23
 8002dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
 8002de0:	e023      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	3b41      	subs	r3, #65	; 0x41
 8002df4:	221f      	movs	r2, #31
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	4618      	mov	r0, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b41      	subs	r3, #65	; 0x41
 8002e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <HAL_ADC_ConfigChannel+0x250>)
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a28      	ldr	r2, [pc, #160]	; (8002ed4 <HAL_ADC_ConfigChannel+0x254>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10f      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1d8>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b12      	cmp	r3, #18
 8002e3e:	d10b      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ed4 <HAL_ADC_ConfigChannel+0x254>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d12b      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x23a>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	; (8002ed8 <HAL_ADC_ConfigChannel+0x258>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <HAL_ADC_ConfigChannel+0x1f4>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b11      	cmp	r3, #17
 8002e72:	d122      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_ADC_ConfigChannel+0x258>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d111      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_ADC_ConfigChannel+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_ADC_ConfigChannel+0x260>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0c9a      	lsrs	r2, r3, #18
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	40012000 	.word	0x40012000
 8002ed8:	10000012 	.word	0x10000012
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eec:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <ADC_Init+0x1f0>)
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	021a      	lsls	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6899      	ldr	r1, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <ADC_Init+0x1f4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6899      	ldr	r1, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6899      	ldr	r1, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	e00f      	b.n	8002fe2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0202 	bic.w	r2, r2, #2
 8002ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6899      	ldr	r1, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7e1b      	ldrb	r3, [r3, #24]
 8002ffc:	005a      	lsls	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800302e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	3b01      	subs	r3, #1
 800303c:	035a      	lsls	r2, r3, #13
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	e007      	b.n	8003058 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003056:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	3b01      	subs	r3, #1
 8003074:	051a      	lsls	r2, r3, #20
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800308c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800309a:	025a      	lsls	r2, r3, #9
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	029a      	lsls	r2, r3, #10
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40012300 	.word	0x40012300
 80030d8:	0f000001 	.word	0x0f000001

080030dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	60d3      	str	r3, [r2, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff4c 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003272:	f7ff ff61 	bl	8003138 <__NVIC_GetPriorityGrouping>
 8003276:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	6978      	ldr	r0, [r7, #20]
 800327e:	f7ff ffb1 	bl	80031e4 <NVIC_EncodePriority>
 8003282:	4602      	mov	r2, r0
 8003284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff80 	bl	8003190 <__NVIC_SetPriority>
}
 8003290:	bf00      	nop
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff54 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032c2:	f7ff fa7d 	bl	80027c0 <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d008      	beq.n	80032e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2280      	movs	r2, #128	; 0x80
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e052      	b.n	800338c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0216 	bic.w	r2, r2, #22
 80032f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003304:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <HAL_DMA_Abort+0x62>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0208 	bic.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003336:	e013      	b.n	8003360 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003338:	f7ff fa42 	bl	80027c0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b05      	cmp	r3, #5
 8003344:	d90c      	bls.n	8003360 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2203      	movs	r2, #3
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e015      	b.n	800338c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e4      	bne.n	8003338 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003372:	223f      	movs	r2, #63	; 0x3f
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d004      	beq.n	80033b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00c      	b.n	80033cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2205      	movs	r2, #5
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b089      	sub	sp, #36	; 0x24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e165      	b.n	80036c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	429a      	cmp	r2, r3
 800340e:	f040 8154 	bne.w	80036ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b01      	cmp	r3, #1
 800341c:	d005      	beq.n	800342a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	2b02      	cmp	r3, #2
 8003428:	d130      	bne.n	800348c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	2203      	movs	r2, #3
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003460:	2201      	movs	r2, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 0201 	and.w	r2, r3, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d017      	beq.n	80034c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d123      	bne.n	800351c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	08da      	lsrs	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3208      	adds	r2, #8
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	220f      	movs	r2, #15
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	08da      	lsrs	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3208      	adds	r2, #8
 8003516:	69b9      	ldr	r1, [r7, #24]
 8003518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80ae 	beq.w	80036ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b5d      	ldr	r3, [pc, #372]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800357a:	4a58      	ldr	r2, [pc, #352]	; (80036dc <HAL_GPIO_Init+0x304>)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_GPIO_Init+0x308>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x21a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4e      	ldr	r2, [pc, #312]	; (80036e4 <HAL_GPIO_Init+0x30c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x216>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4d      	ldr	r2, [pc, #308]	; (80036e8 <HAL_GPIO_Init+0x310>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x212>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4c      	ldr	r2, [pc, #304]	; (80036ec <HAL_GPIO_Init+0x314>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4b      	ldr	r2, [pc, #300]	; (80036f0 <HAL_GPIO_Init+0x318>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x20a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a4a      	ldr	r2, [pc, #296]	; (80036f4 <HAL_GPIO_Init+0x31c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x206>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a49      	ldr	r2, [pc, #292]	; (80036f8 <HAL_GPIO_Init+0x320>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x202>
 80035d6:	2306      	movs	r3, #6
 80035d8:	e00c      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035da:	2307      	movs	r3, #7
 80035dc:	e00a      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035de:	2305      	movs	r3, #5
 80035e0:	e008      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035e2:	2304      	movs	r3, #4
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035e6:	2303      	movs	r3, #3
 80035e8:	e004      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x21c>
 80035f2:	2300      	movs	r3, #0
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	0092      	lsls	r2, r2, #2
 80035fc:	4093      	lsls	r3, r2
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003604:	4935      	ldr	r1, [pc, #212]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_GPIO_Init+0x324>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003636:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_GPIO_Init+0x324>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x324>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <HAL_GPIO_Init+0x324>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_GPIO_Init+0x324>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_GPIO_Init+0x324>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_GPIO_Init+0x324>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b4:	4a11      	ldr	r2, [pc, #68]	; (80036fc <HAL_GPIO_Init+0x324>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f ae96 	bls.w	80033f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3724      	adds	r7, #36	; 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40013800 	.word	0x40013800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40020800 	.word	0x40020800
 80036ec:	40020c00 	.word	0x40020c00
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40021400 	.word	0x40021400
 80036f8:	40021800 	.word	0x40021800
 80036fc:	40013c00 	.word	0x40013c00

08003700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
 800370c:	4613      	mov	r3, r2
 800370e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800371c:	e003      	b.n	8003726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	041a      	lsls	r2, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	619a      	str	r2, [r3, #24]
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fec0 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e12b      	b.n	80039ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe fdbe 	bl	800230c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c8:	f001 f8a4 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a81      	ldr	r2, [pc, #516]	; (80039d8 <HAL_I2C_Init+0x274>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d807      	bhi.n	80037e8 <HAL_I2C_Init+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a80      	ldr	r2, [pc, #512]	; (80039dc <HAL_I2C_Init+0x278>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e006      	b.n	80037f6 <HAL_I2C_Init+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a7d      	ldr	r2, [pc, #500]	; (80039e0 <HAL_I2C_Init+0x27c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e7      	b.n	80039ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a78      	ldr	r2, [pc, #480]	; (80039e4 <HAL_I2C_Init+0x280>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a6a      	ldr	r2, [pc, #424]	; (80039d8 <HAL_I2C_Init+0x274>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <HAL_I2C_Init+0xd4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	e009      	b.n	800384c <HAL_I2C_Init+0xe8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <HAL_I2C_Init+0x284>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800385e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	495c      	ldr	r1, [pc, #368]	; (80039d8 <HAL_I2C_Init+0x274>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d819      	bhi.n	80038a0 <HAL_I2C_Init+0x13c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb1 f3f3 	udiv	r3, r1, r3
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003880:	400b      	ands	r3, r1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_I2C_Init+0x138>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e59      	subs	r1, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb1 f3f3 	udiv	r3, r1, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389a:	e051      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 800389c:	2304      	movs	r3, #4
 800389e:	e04f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <HAL_I2C_Init+0x168>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e012      	b.n	80038f2 <HAL_I2C_Init+0x18e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x196>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e022      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <HAL_I2C_Init+0x1bc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e58      	subs	r0, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	fbb0 f3f3 	udiv	r3, r0, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800396e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6911      	ldr	r1, [r2, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	430b      	orrs	r3, r1
 8003982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	000186a0 	.word	0x000186a0
 80039dc:	001e847f 	.word	0x001e847f
 80039e0:	003d08ff 	.word	0x003d08ff
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
 80039fc:	4613      	mov	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7fe fede 	bl	80027c0 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 80e0 	bne.w	8003bd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4970      	ldr	r1, [pc, #448]	; (8003be0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fc58 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0d3      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x50>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d007      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2221      	movs	r2, #33	; 0x21
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a50      	ldr	r2, [pc, #320]	; (8003be4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fac2 	bl	8004034 <I2C_MasterRequestWrite>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ad0:	e066      	b.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fcd2 	bl	8004480 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fcc2 	bl	8004502 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d194      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfc:	f7fe fde0 	bl	80027c0 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 820b 	bne.w	8004026 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	497c      	ldr	r1, [pc, #496]	; (8003e0c <HAL_I2C_Master_Receive+0x224>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fb5a 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	e1fe      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2C_Master_Receive+0x50>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e1f7      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2222      	movs	r2, #34	; 0x22
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	893a      	ldrh	r2, [r7, #8]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_I2C_Master_Receive+0x228>)
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ca0:	8979      	ldrh	r1, [r7, #10]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fa46 	bl	8004138 <I2C_MasterRequestRead>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1b8      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e18c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e16c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	e14c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d8c:	e138      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	f200 80f1 	bhi.w	8003f7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d123      	bne.n	8003de8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fbed 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e139      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de6:	e10b      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d14e      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	2200      	movs	r2, #0
 8003df8:	4906      	ldr	r1, [pc, #24]	; (8003e14 <HAL_I2C_Master_Receive+0x22c>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa6a 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e10e      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
 8003e0a:	bf00      	nop
 8003e0c:	00100002 	.word	0x00100002
 8003e10:	ffff0000 	.word	0xffff0000
 8003e14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8c:	e0b8      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	4966      	ldr	r1, [pc, #408]	; (8004030 <HAL_I2C_Master_Receive+0x448>)
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fa1b 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0bf      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	494f      	ldr	r1, [pc, #316]	; (8004030 <HAL_I2C_Master_Receive+0x448>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f9ed 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e091      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f78:	e042      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fb00 	bl	8004584 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e04c      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d118      	bne.n	8004000 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f aec2 	bne.w	8003d8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	00010004 	.word	0x00010004

08004034 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	460b      	mov	r3, r1
 8004042:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d006      	beq.n	800405e <I2C_MasterRequestWrite+0x2a>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d003      	beq.n	800405e <I2C_MasterRequestWrite+0x2a>
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d108      	bne.n	8004070 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00b      	b.n	8004088 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	2b12      	cmp	r3, #18
 8004076:	d107      	bne.n	8004088 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f91d 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ae:	d103      	bne.n	80040b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e035      	b.n	8004128 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040c4:	d108      	bne.n	80040d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d4:	611a      	str	r2, [r3, #16]
 80040d6:	e01b      	b.n	8004110 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	11db      	asrs	r3, r3, #7
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f003 0306 	and.w	r3, r3, #6
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f063 030f 	orn	r3, r3, #15
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	490e      	ldr	r1, [pc, #56]	; (8004130 <I2C_MasterRequestWrite+0xfc>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f943 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e010      	b.n	8004128 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4907      	ldr	r1, [pc, #28]	; (8004134 <I2C_MasterRequestWrite+0x100>)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f933 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	00010008 	.word	0x00010008
 8004134:	00010002 	.word	0x00010002

08004138 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	460b      	mov	r3, r1
 8004146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800415c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d006      	beq.n	8004172 <I2C_MasterRequestRead+0x3a>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d003      	beq.n	8004172 <I2C_MasterRequestRead+0x3a>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004170:	d108      	bne.n	8004184 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e00b      	b.n	800419c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	2b11      	cmp	r3, #17
 800418a:	d107      	bne.n	800419c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f893 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00d      	beq.n	80041d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c2:	d103      	bne.n	80041cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e079      	b.n	80042c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d8:	d108      	bne.n	80041ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	e05f      	b.n	80042ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	11db      	asrs	r3, r3, #7
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0306 	and.w	r3, r3, #6
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f063 030f 	orn	r3, r3, #15
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4930      	ldr	r1, [pc, #192]	; (80042cc <I2C_MasterRequestRead+0x194>)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f8b9 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e054      	b.n	80042c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4929      	ldr	r1, [pc, #164]	; (80042d0 <I2C_MasterRequestRead+0x198>)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8a9 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e044      	b.n	80042c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f831 	bl	80042d4 <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d103      	bne.n	8004290 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e017      	b.n	80042c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004294:	897b      	ldrh	r3, [r7, #10]
 8004296:	11db      	asrs	r3, r3, #7
 8004298:	b2db      	uxtb	r3, r3
 800429a:	f003 0306 	and.w	r3, r3, #6
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f063 030e 	orn	r3, r3, #14
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	4907      	ldr	r1, [pc, #28]	; (80042d0 <I2C_MasterRequestRead+0x198>)
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f865 	bl	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	00010008 	.word	0x00010008
 80042d0:	00010002 	.word	0x00010002

080042d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e4:	e025      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d021      	beq.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fe fa67 	bl	80027c0 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d116      	bne.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e023      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10d      	bne.n	8004358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	e00c      	b.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	43da      	mvns	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0b6      	beq.n	80042e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004390:	e051      	b.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a0:	d123      	bne.n	80043ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e046      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d021      	beq.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f2:	f7fe f9e5 	bl	80027c0 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d302      	bcc.n	8004408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d116      	bne.n	8004436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e020      	b.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	0c1b      	lsrs	r3, r3, #16
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	43da      	mvns	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf14      	ite	ne
 8004452:	2301      	movne	r3, #1
 8004454:	2300      	moveq	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e00b      	b.n	8004472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d18d      	bne.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800448c:	e02d      	b.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8ce 	bl	8004630 <I2C_IsAcknowledgeFailed>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02d      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d021      	beq.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fe f98b 	bl	80027c0 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0220 	orr.w	r2, r3, #32
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e007      	b.n	80044fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d1ca      	bne.n	800448e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800450e:	e02d      	b.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f88d 	bl	8004630 <I2C_IsAcknowledgeFailed>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e02d      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d021      	beq.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fe f94a 	bl	80027c0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e007      	b.n	800457c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d1ca      	bne.n	8004510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004590:	e042      	b.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d119      	bne.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0210 	mvn.w	r2, #16
 80045a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e029      	b.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fe f8f4 	bl	80027c0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d116      	bne.n	8004618 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0220 	orr.w	r2, r3, #32
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e007      	b.n	8004628 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d1b5      	bne.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d11b      	bne.n	8004680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0204 	orr.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_PWREx_EnableOverDrive+0x90>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_PWREx_EnableOverDrive+0x90>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b1d      	ldr	r3, [pc, #116]	; (8004720 <HAL_PWREx_EnableOverDrive+0x90>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046b6:	4b1b      	ldr	r3, [pc, #108]	; (8004724 <HAL_PWREx_EnableOverDrive+0x94>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7fe f880 	bl	80027c0 <HAL_GetTick>
 80046c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046c2:	e009      	b.n	80046d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046c4:	f7fe f87c 	bl	80027c0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d2:	d901      	bls.n	80046d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e01f      	b.n	8004718 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_PWREx_EnableOverDrive+0x98>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d1ee      	bne.n	80046c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046e6:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_PWREx_EnableOverDrive+0x9c>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ec:	f7fe f868 	bl	80027c0 <HAL_GetTick>
 80046f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046f2:	e009      	b.n	8004708 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046f4:	f7fe f864 	bl	80027c0 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004702:	d901      	bls.n	8004708 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e007      	b.n	8004718 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004708:	4b07      	ldr	r3, [pc, #28]	; (8004728 <HAL_PWREx_EnableOverDrive+0x98>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004714:	d1ee      	bne.n	80046f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40023800 	.word	0x40023800
 8004724:	420e0040 	.word	0x420e0040
 8004728:	40007000 	.word	0x40007000
 800472c:	420e0044 	.word	0x420e0044

08004730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0cc      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b68      	ldr	r3, [pc, #416]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d90c      	bls.n	800476c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b65      	ldr	r3, [pc, #404]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0b8      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d020      	beq.n	80047ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004784:	4b59      	ldr	r3, [pc, #356]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a58      	ldr	r2, [pc, #352]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800478e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800479c:	4b53      	ldr	r3, [pc, #332]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a52      	ldr	r2, [pc, #328]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a8:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	494d      	ldr	r1, [pc, #308]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d044      	beq.n	8004850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d107      	bne.n	80047de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ce:	4b47      	ldr	r3, [pc, #284]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d119      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e07f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d003      	beq.n	80047ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b3f      	ldr	r3, [pc, #252]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3b      	ldr	r3, [pc, #236]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e067      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b37      	ldr	r3, [pc, #220]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4934      	ldr	r1, [pc, #208]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fd ffce 	bl	80027c0 <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fd ffca 	bl	80027c0 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e04f      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d20c      	bcs.n	8004878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b20      	ldr	r3, [pc, #128]	; (80048e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e032      	b.n	80048de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4916      	ldr	r1, [pc, #88]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	490e      	ldr	r1, [pc, #56]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048b6:	f000 f887 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 80048ba:	4602      	mov	r2, r0
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	490a      	ldr	r1, [pc, #40]	; (80048f0 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	5ccb      	ldrb	r3, [r1, r3]
 80048ca:	fa22 f303 	lsr.w	r3, r2, r3
 80048ce:	4a09      	ldr	r2, [pc, #36]	; (80048f4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_ClockConfig+0x1c8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fe3a 	bl	8002550 <HAL_InitTick>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023c00 	.word	0x40023c00
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800bab4 	.word	0x0800bab4
 80048f4:	20000004 	.word	0x20000004
 80048f8:	20000008 	.word	0x20000008

080048fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000004 	.word	0x20000004

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	0800bac4 	.word	0x0800bac4

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	0800bac4 	.word	0x0800bac4

08004964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	220f      	movs	r2, #15
 8004972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_GetClockConfig+0x5c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <HAL_RCC_GetClockConfig+0x60>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40023c00 	.word	0x40023c00

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b0ae      	sub	sp, #184	; 0xb8
 80049ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ee:	4bcb      	ldr	r3, [pc, #812]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	f200 8206 	bhi.w	8004e08 <HAL_RCC_GetSysClockFreq+0x440>
 80049fc:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a39 	.word	0x08004a39
 8004a08:	08004e09 	.word	0x08004e09
 8004a0c:	08004e09 	.word	0x08004e09
 8004a10:	08004e09 	.word	0x08004e09
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004e09 	.word	0x08004e09
 8004a1c:	08004e09 	.word	0x08004e09
 8004a20:	08004e09 	.word	0x08004e09
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004e09 	.word	0x08004e09
 8004a2c:	08004e09 	.word	0x08004e09
 8004a30:	08004e09 	.word	0x08004e09
 8004a34:	08004c39 	.word	0x08004c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a38:	4bb9      	ldr	r3, [pc, #740]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a3e:	e1e7      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a40:	4bb8      	ldr	r3, [pc, #736]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a46:	e1e3      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a48:	4bb4      	ldr	r3, [pc, #720]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a54:	4bb1      	ldr	r3, [pc, #708]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d071      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a60:	4bae      	ldr	r3, [pc, #696]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	099b      	lsrs	r3, r3, #6
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	6439      	str	r1, [r7, #64]	; 0x40
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ab8:	4649      	mov	r1, r9
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	1a51      	subs	r1, r2, r1
 8004aca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004acc:	4649      	mov	r1, r9
 8004ace:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	00cb      	lsls	r3, r1, #3
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aea:	4641      	mov	r1, r8
 8004aec:	00ca      	lsls	r2, r1, #3
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	4603      	mov	r3, r0
 8004af4:	4622      	mov	r2, r4
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	462b      	mov	r3, r5
 8004afc:	460a      	mov	r2, r1
 8004afe:	eb42 0303 	adc.w	r3, r2, r3
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b10:	4629      	mov	r1, r5
 8004b12:	024b      	lsls	r3, r1, #9
 8004b14:	4621      	mov	r1, r4
 8004b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	024a      	lsls	r2, r1, #9
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b34:	f7fc f83a 	bl	8000bac <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b42:	e067      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b5e:	2300      	movs	r3, #0
 8004b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b66:	4622      	mov	r2, r4
 8004b68:	462b      	mov	r3, r5
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	0159      	lsls	r1, r3, #5
 8004b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b78:	0150      	lsls	r0, r2, #5
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4621      	mov	r1, r4
 8004b80:	1a51      	subs	r1, r2, r1
 8004b82:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b84:	4629      	mov	r1, r5
 8004b86:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b98:	4649      	mov	r1, r9
 8004b9a:	018b      	lsls	r3, r1, #6
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	018a      	lsls	r2, r1, #6
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bac:	4649      	mov	r1, r9
 8004bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bc6:	4692      	mov	sl, r2
 8004bc8:	469b      	mov	fp, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	462b      	mov	r3, r5
 8004bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004be6:	4629      	mov	r1, r5
 8004be8:	028b      	lsls	r3, r1, #10
 8004bea:	4621      	mov	r1, r4
 8004bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	028a      	lsls	r2, r1, #10
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	673b      	str	r3, [r7, #112]	; 0x70
 8004c00:	677a      	str	r2, [r7, #116]	; 0x74
 8004c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004c06:	f7fb ffd1 	bl	8000bac <__aeabi_uldivmod>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4613      	mov	r3, r2
 8004c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c14:	4b41      	ldr	r3, [pc, #260]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c36:	e0eb      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c38:	4b38      	ldr	r3, [pc, #224]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c44:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d06b      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	2200      	movs	r2, #0
 8004c58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	663b      	str	r3, [r7, #96]	; 0x60
 8004c64:	2300      	movs	r3, #0
 8004c66:	667b      	str	r3, [r7, #100]	; 0x64
 8004c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c6c:	4622      	mov	r2, r4
 8004c6e:	462b      	mov	r3, r5
 8004c70:	f04f 0000 	mov.w	r0, #0
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	0159      	lsls	r1, r3, #5
 8004c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7e:	0150      	lsls	r0, r2, #5
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4621      	mov	r1, r4
 8004c86:	1a51      	subs	r1, r2, r1
 8004c88:	61b9      	str	r1, [r7, #24]
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c9e:	4659      	mov	r1, fp
 8004ca0:	018b      	lsls	r3, r1, #6
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca8:	4651      	mov	r1, sl
 8004caa:	018a      	lsls	r2, r1, #6
 8004cac:	4651      	mov	r1, sl
 8004cae:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb2:	4659      	mov	r1, fp
 8004cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ccc:	4690      	mov	r8, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	4623      	mov	r3, r4
 8004cd2:	eb18 0303 	adds.w	r3, r8, r3
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	462b      	mov	r3, r5
 8004cda:	eb49 0303 	adc.w	r3, r9, r3
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cec:	4629      	mov	r1, r5
 8004cee:	024b      	lsls	r3, r1, #9
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	024a      	lsls	r2, r1, #9
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d02:	2200      	movs	r2, #0
 8004d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d0c:	f7fb ff4e 	bl	8000bac <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d1a:	e065      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x420>
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d28:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	099b      	lsrs	r3, r3, #6
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	4611      	mov	r1, r2
 8004d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d38:	653b      	str	r3, [r7, #80]	; 0x50
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d42:	4642      	mov	r2, r8
 8004d44:	464b      	mov	r3, r9
 8004d46:	f04f 0000 	mov.w	r0, #0
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	0159      	lsls	r1, r3, #5
 8004d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d54:	0150      	lsls	r0, r2, #5
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	1a51      	subs	r1, r2, r1
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	4649      	mov	r1, r9
 8004d62:	eb63 0301 	sbc.w	r3, r3, r1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d74:	4659      	mov	r1, fp
 8004d76:	018b      	lsls	r3, r1, #6
 8004d78:	4651      	mov	r1, sl
 8004d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d7e:	4651      	mov	r1, sl
 8004d80:	018a      	lsls	r2, r1, #6
 8004d82:	4651      	mov	r1, sl
 8004d84:	1a54      	subs	r4, r2, r1
 8004d86:	4659      	mov	r1, fp
 8004d88:	eb63 0501 	sbc.w	r5, r3, r1
 8004d8c:	f04f 0200 	mov.w	r2, #0
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	00eb      	lsls	r3, r5, #3
 8004d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9a:	00e2      	lsls	r2, r4, #3
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	4643      	mov	r3, r8
 8004da2:	18e3      	adds	r3, r4, r3
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	464b      	mov	r3, r9
 8004da8:	eb45 0303 	adc.w	r3, r5, r3
 8004dac:	607b      	str	r3, [r7, #4]
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dba:	4629      	mov	r1, r5
 8004dbc:	028b      	lsls	r3, r1, #10
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	028a      	lsls	r2, r1, #10
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dda:	f7fb fee7 	bl	8000bac <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4613      	mov	r3, r2
 8004de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	0f1b      	lsrs	r3, r3, #28
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e06:	e003      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	37b8      	adds	r7, #184	; 0xb8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400

08004e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e28d      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f000 8083 	beq.w	8004f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e48:	4b94      	ldr	r3, [pc, #592]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d019      	beq.n	8004e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e54:	4b91      	ldr	r3, [pc, #580]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e5c:	2b08      	cmp	r3, #8
 8004e5e:	d106      	bne.n	8004e6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e60:	4b8e      	ldr	r3, [pc, #568]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6c:	d00c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6e:	4b8b      	ldr	r3, [pc, #556]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d112      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7a:	4b88      	ldr	r3, [pc, #544]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e86:	d10b      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	4b84      	ldr	r3, [pc, #528]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d05b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x124>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d157      	bne.n	8004f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e25a      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x90>
 8004eaa:	4b7c      	ldr	r3, [pc, #496]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a7b      	ldr	r2, [pc, #492]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e01d      	b.n	8004ef4 <HAL_RCC_OscConfig+0xcc>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCC_OscConfig+0xb4>
 8004ec2:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a75      	ldr	r2, [pc, #468]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4b73      	ldr	r3, [pc, #460]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a72      	ldr	r2, [pc, #456]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e00b      	b.n	8004ef4 <HAL_RCC_OscConfig+0xcc>
 8004edc:	4b6f      	ldr	r3, [pc, #444]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a6e      	ldr	r2, [pc, #440]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a6b      	ldr	r2, [pc, #428]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fc60 	bl	80027c0 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fd fc5c 	bl	80027c0 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e21f      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	4b61      	ldr	r3, [pc, #388]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0xdc>
 8004f22:	e014      	b.n	8004f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd fc4c 	bl	80027c0 <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fc48 	bl	80027c0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e20b      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	4b57      	ldr	r3, [pc, #348]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x104>
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d06f      	beq.n	800503a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f5a:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d017      	beq.n	8004f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f66:	4b4d      	ldr	r3, [pc, #308]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d105      	bne.n	8004f7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f86:	2b0c      	cmp	r3, #12
 8004f88:	d11c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b44      	ldr	r3, [pc, #272]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d116      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d005      	beq.n	8004fae <HAL_RCC_OscConfig+0x186>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1d3      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4937      	ldr	r1, [pc, #220]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	e03a      	b.n	800503a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_RCC_OscConfig+0x278>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fd fbf5 	bl	80027c0 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fd fbf1 	bl	80027c0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e1b4      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fec:	4b2b      	ldr	r3, [pc, #172]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff8:	4b28      	ldr	r3, [pc, #160]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4925      	ldr	r1, [pc, #148]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <HAL_RCC_OscConfig+0x278>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd fbd4 	bl	80027c0 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501c:	f7fd fbd0 	bl	80027c0 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e193      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800502e:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d036      	beq.n	80050b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d016      	beq.n	800507c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <HAL_RCC_OscConfig+0x27c>)
 8005050:	2201      	movs	r2, #1
 8005052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005054:	f7fd fbb4 	bl	80027c0 <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505c:	f7fd fbb0 	bl	80027c0 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e173      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800506e:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_OscConfig+0x274>)
 8005070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x234>
 800507a:	e01b      	b.n	80050b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507c:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <HAL_RCC_OscConfig+0x27c>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fd fb9d 	bl	80027c0 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005088:	e00e      	b.n	80050a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508a:	f7fd fb99 	bl	80027c0 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d907      	bls.n	80050a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e15c      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
 800509c:	40023800 	.word	0x40023800
 80050a0:	42470000 	.word	0x42470000
 80050a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	4b8a      	ldr	r3, [pc, #552]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1ea      	bne.n	800508a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8097 	beq.w	80051f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c6:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4a7e      	ldr	r2, [pc, #504]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6413      	str	r3, [r2, #64]	; 0x40
 80050e2:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <HAL_RCC_OscConfig+0x4b0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d118      	bne.n	8005130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fe:	4b76      	ldr	r3, [pc, #472]	; (80052d8 <HAL_RCC_OscConfig+0x4b0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a75      	ldr	r2, [pc, #468]	; (80052d8 <HAL_RCC_OscConfig+0x4b0>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7fd fb59 	bl	80027c0 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005112:	f7fd fb55 	bl	80027c0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e118      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <HAL_RCC_OscConfig+0x4b0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d106      	bne.n	8005146 <HAL_RCC_OscConfig+0x31e>
 8005138:	4b66      	ldr	r3, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a65      	ldr	r2, [pc, #404]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
 8005144:	e01c      	b.n	8005180 <HAL_RCC_OscConfig+0x358>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b05      	cmp	r3, #5
 800514c:	d10c      	bne.n	8005168 <HAL_RCC_OscConfig+0x340>
 800514e:	4b61      	ldr	r3, [pc, #388]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005152:	4a60      	ldr	r2, [pc, #384]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	f043 0304 	orr.w	r3, r3, #4
 8005158:	6713      	str	r3, [r2, #112]	; 0x70
 800515a:	4b5e      	ldr	r3, [pc, #376]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515e:	4a5d      	ldr	r2, [pc, #372]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6713      	str	r3, [r2, #112]	; 0x70
 8005166:	e00b      	b.n	8005180 <HAL_RCC_OscConfig+0x358>
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	; 0x70
 8005174:	4b57      	ldr	r3, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a56      	ldr	r2, [pc, #344]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	f023 0304 	bic.w	r3, r3, #4
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d015      	beq.n	80051b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005188:	f7fd fb1a 	bl	80027c0 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fd fb16 	bl	80027c0 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0d7      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ee      	beq.n	8005190 <HAL_RCC_OscConfig+0x368>
 80051b2:	e014      	b.n	80051de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fd fb04 	bl	80027c0 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fd fb00 	bl	80027c0 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0c1      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d2:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1ee      	bne.n	80051bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d105      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e4:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	4a3a      	ldr	r2, [pc, #232]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80ad 	beq.w	8005354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051fa:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b08      	cmp	r3, #8
 8005204:	d060      	beq.n	80052c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d145      	bne.n	800529a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800520e:	4b33      	ldr	r3, [pc, #204]	; (80052dc <HAL_RCC_OscConfig+0x4b4>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fad4 	bl	80027c0 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f7fd fad0 	bl	80027c0 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e093      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69da      	ldr	r2, [r3, #28]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	019b      	lsls	r3, r3, #6
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	085b      	lsrs	r3, r3, #1
 8005252:	3b01      	subs	r3, #1
 8005254:	041b      	lsls	r3, r3, #16
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	061b      	lsls	r3, r3, #24
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	071b      	lsls	r3, r3, #28
 8005266:	491b      	ldr	r1, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_RCC_OscConfig+0x4b4>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005272:	f7fd faa5 	bl	80027c0 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527a:	f7fd faa1 	bl	80027c0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e064      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x452>
 8005298:	e05c      	b.n	8005354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCC_OscConfig+0x4b4>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a0:	f7fd fa8e 	bl	80027c0 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fd fa8a 	bl	80027c0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e04d      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCC_OscConfig+0x4ac>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x480>
 80052c6:	e045      	b.n	8005354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e040      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40007000 	.word	0x40007000
 80052dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <HAL_RCC_OscConfig+0x538>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d030      	beq.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d129      	bne.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d122      	bne.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005318:	4293      	cmp	r3, r2
 800531a:	d119      	bne.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d10f      	bne.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d107      	bne.n	8005350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d001      	beq.n	8005354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800

08005364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e041      	b.n	80053fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fd f806 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f000 fcbc 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e04e      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d01d      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_TIM_Base_Start_IT+0xc8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d010      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e007      	b.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800

080054e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e041      	b.n	800557a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f839 	bl	8005582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 fbfc 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x24>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d109      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x3e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d109      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x58>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07c      	b.n	8005704 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0x82>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	e013      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0x92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	e00b      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	e003      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fee3 	bl	8006416 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2d      	ldr	r2, [pc, #180]	; (800570c <HAL_TIM_PWM_Start+0x174>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_PWM_Start+0xcc>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_TIM_PWM_Start+0x178>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_TIM_PWM_Start+0xd0>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_Start+0xd2>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_TIM_PWM_Start+0x174>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d01d      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIM_PWM_Start+0x17c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_TIM_PWM_Start+0x180>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_PWM_Start+0x184>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_TIM_PWM_Start+0x178>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIM_PWM_Start+0x188>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIM_PWM_Start+0x18c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d111      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d010      	beq.n	8005702 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	e007      	b.n	8005702 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800

08005728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0202 	mvn.w	r2, #2
 8005754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fab9 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 faab 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fabc 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b04      	cmp	r3, #4
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b04      	cmp	r3, #4
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0204 	mvn.w	r2, #4
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2202      	movs	r2, #2
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fa8f 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fa81 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fa92 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0208 	mvn.w	r2, #8
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2204      	movs	r2, #4
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa65 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa57 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa68 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b10      	cmp	r3, #16
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2208      	movs	r2, #8
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa3b 	bl	8005ce2 <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa2d 	bl	8005cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fa3e 	bl	8005cf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10e      	bne.n	80058ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d107      	bne.n	80058ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0201 	mvn.w	r2, #1
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fa74 	bl	8001d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d10e      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	2b80      	cmp	r3, #128	; 0x80
 80058c6:	d107      	bne.n	80058d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fe4a 	bl	800656c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d10e      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d107      	bne.n	8005904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fa03 	bl	8005d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b20      	cmp	r3, #32
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b20      	cmp	r3, #32
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0220 	mvn.w	r2, #32
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fe14 	bl	8006558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005952:	2302      	movs	r3, #2
 8005954:	e0ae      	b.n	8005ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	f200 809f 	bhi.w	8005aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059a1 	.word	0x080059a1
 8005970:	08005aa5 	.word	0x08005aa5
 8005974:	08005aa5 	.word	0x08005aa5
 8005978:	08005aa5 	.word	0x08005aa5
 800597c:	080059e1 	.word	0x080059e1
 8005980:	08005aa5 	.word	0x08005aa5
 8005984:	08005aa5 	.word	0x08005aa5
 8005988:	08005aa5 	.word	0x08005aa5
 800598c:	08005a23 	.word	0x08005a23
 8005990:	08005aa5 	.word	0x08005aa5
 8005994:	08005aa5 	.word	0x08005aa5
 8005998:	08005aa5 	.word	0x08005aa5
 800599c:	08005a63 	.word	0x08005a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa5a 	bl	8005e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f042 0208 	orr.w	r2, r2, #8
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0204 	bic.w	r2, r2, #4
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	619a      	str	r2, [r3, #24]
      break;
 80059de:	e064      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 faaa 	bl	8005f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	021a      	lsls	r2, r3, #8
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	619a      	str	r2, [r3, #24]
      break;
 8005a20:	e043      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 faff 	bl	800602c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0208 	orr.w	r2, r2, #8
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0204 	bic.w	r2, r2, #4
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	61da      	str	r2, [r3, #28]
      break;
 8005a60:	e023      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb53 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69d9      	ldr	r1, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	61da      	str	r2, [r3, #28]
      break;
 8005aa2:	e002      	b.n	8005aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e0b4      	b.n	8005c42 <HAL_TIM_ConfigClockSource+0x186>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b10:	d03e      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0xd4>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b16:	f200 8087 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1e:	f000 8086 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x172>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b26:	d87f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b70      	cmp	r3, #112	; 0x70
 8005b2a:	d01a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xa6>
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d87b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b60      	cmp	r3, #96	; 0x60
 8005b32:	d050      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d877      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d873      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d058      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d86f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b48:	2b30      	cmp	r3, #48	; 0x30
 8005b4a:	d064      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d86b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d060      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d867      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05c      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d05a      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	e062      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f000 fc30 	bl	80063d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	609a      	str	r2, [r3, #8]
      break;
 8005b8e:	e04f      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f000 fc19 	bl	80063d6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e03c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fb8d 	bl	80062e2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2150      	movs	r1, #80	; 0x50
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fbe6 	bl	80063a0 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e02c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 fbac 	bl	8006340 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2160      	movs	r1, #96	; 0x60
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fbd6 	bl	80063a0 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e01c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 fb6d 	bl	80062e2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2140      	movs	r1, #64	; 0x40
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fbc6 	bl	80063a0 <TIM_ITRx_SetConfig>
      break;
 8005c14:	e00c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f000 fbbd 	bl	80063a0 <TIM_ITRx_SetConfig>
      break;
 8005c26:	e003      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e000      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e031      	b.n	8005cc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 faa3 	bl	80061c0 <TIM_SlaveTimer_SetConfig>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e018      	b.n	8005cc6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cb2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d00f      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3d      	ldr	r2, [pc, #244]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3c      	ldr	r2, [pc, #240]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a3b      	ldr	r2, [pc, #236]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0x40>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2f      	ldr	r2, [pc, #188]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d02b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d80:	d027      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2c      	ldr	r2, [pc, #176]	; (8005e38 <TIM_Base_SetConfig+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d023      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	; (8005e3c <TIM_Base_SetConfig+0x11c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <TIM_Base_SetConfig+0x120>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d017      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a28      	ldr	r2, [pc, #160]	; (8005e48 <TIM_Base_SetConfig+0x128>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a27      	ldr	r2, [pc, #156]	; (8005e4c <TIM_Base_SetConfig+0x12c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00f      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a26      	ldr	r2, [pc, #152]	; (8005e50 <TIM_Base_SetConfig+0x130>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a25      	ldr	r2, [pc, #148]	; (8005e54 <TIM_Base_SetConfig+0x134>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a24      	ldr	r2, [pc, #144]	; (8005e58 <TIM_Base_SetConfig+0x138>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_Base_SetConfig+0xb2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a23      	ldr	r2, [pc, #140]	; (8005e5c <TIM_Base_SetConfig+0x13c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d108      	bne.n	8005de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <TIM_Base_SetConfig+0x114>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0xf8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <TIM_Base_SetConfig+0x124>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d103      	bne.n	8005e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	615a      	str	r2, [r3, #20]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	40001800 	.word	0x40001800
 8005e58:	40001c00 	.word	0x40001c00
 8005e5c:	40002000 	.word	0x40002000

08005e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0201 	bic.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0302 	bic.w	r3, r3, #2
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <TIM_OC1_SetConfig+0xd8>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_OC1_SetConfig+0x64>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <TIM_OC1_SetConfig+0xdc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10c      	bne.n	8005ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f023 0308 	bic.w	r3, r3, #8
 8005eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 0304 	bic.w	r3, r3, #4
 8005edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	; (8005f38 <TIM_OC1_SetConfig+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC1_SetConfig+0x8e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <TIM_OC1_SetConfig+0xdc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0210 	bic.w	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0320 	bic.w	r3, r3, #32
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a22      	ldr	r2, [pc, #136]	; (8006024 <TIM_OC2_SetConfig+0xe4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC2_SetConfig+0x68>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10d      	bne.n	8005fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <TIM_OC2_SetConfig+0xe4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC2_SetConfig+0x94>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a16      	ldr	r2, [pc, #88]	; (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d113      	bne.n	8005ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a21      	ldr	r2, [pc, #132]	; (800610c <TIM_OC3_SetConfig+0xe0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC3_SetConfig+0x66>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a20      	ldr	r2, [pc, #128]	; (8006110 <TIM_OC3_SetConfig+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10d      	bne.n	80060ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	021b      	lsls	r3, r3, #8
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a16      	ldr	r2, [pc, #88]	; (800610c <TIM_OC3_SetConfig+0xe0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d003      	beq.n	80060be <TIM_OC3_SetConfig+0x92>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a15      	ldr	r2, [pc, #84]	; (8006110 <TIM_OC3_SetConfig+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d113      	bne.n	80060e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a12      	ldr	r2, [pc, #72]	; (80061b8 <TIM_OC4_SetConfig+0xa4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_OC4_SetConfig+0x68>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a11      	ldr	r2, [pc, #68]	; (80061bc <TIM_OC4_SetConfig+0xa8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d109      	bne.n	8006190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	019b      	lsls	r3, r3, #6
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b70      	cmp	r3, #112	; 0x70
 8006208:	d01a      	beq.n	8006240 <TIM_SlaveTimer_SetConfig+0x80>
 800620a:	2b70      	cmp	r3, #112	; 0x70
 800620c:	d860      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 800620e:	2b60      	cmp	r3, #96	; 0x60
 8006210:	d054      	beq.n	80062bc <TIM_SlaveTimer_SetConfig+0xfc>
 8006212:	2b60      	cmp	r3, #96	; 0x60
 8006214:	d85c      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 8006216:	2b50      	cmp	r3, #80	; 0x50
 8006218:	d046      	beq.n	80062a8 <TIM_SlaveTimer_SetConfig+0xe8>
 800621a:	2b50      	cmp	r3, #80	; 0x50
 800621c:	d858      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d019      	beq.n	8006256 <TIM_SlaveTimer_SetConfig+0x96>
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	d854      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d055      	beq.n	80062d6 <TIM_SlaveTimer_SetConfig+0x116>
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d850      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 800622e:	2b20      	cmp	r3, #32
 8006230:	d051      	beq.n	80062d6 <TIM_SlaveTimer_SetConfig+0x116>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d84c      	bhi.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d04d      	beq.n	80062d6 <TIM_SlaveTimer_SetConfig+0x116>
 800623a:	2b10      	cmp	r3, #16
 800623c:	d04b      	beq.n	80062d6 <TIM_SlaveTimer_SetConfig+0x116>
 800623e:	e047      	b.n	80062d0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68d9      	ldr	r1, [r3, #12]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f000 f8c1 	bl	80063d6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006254:	e040      	b.n	80062d8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b05      	cmp	r3, #5
 800625c:	d101      	bne.n	8006262 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e03b      	b.n	80062da <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006288:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	4313      	orrs	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	621a      	str	r2, [r3, #32]
      break;
 80062a6:	e017      	b.n	80062d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	6899      	ldr	r1, [r3, #8]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	461a      	mov	r2, r3
 80062b6:	f000 f814 	bl	80062e2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80062ba:	e00d      	b.n	80062d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6899      	ldr	r1, [r3, #8]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	461a      	mov	r2, r3
 80062ca:	f000 f839 	bl	8006340 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80062ce:	e003      	b.n	80062d8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	e000      	b.n	80062d8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80062d6:	bf00      	nop
  }

  return status;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	f023 0201 	bic.w	r2, r3, #1
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800630c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f023 030a 	bic.w	r3, r3, #10
 800631e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f023 0210 	bic.w	r2, r3, #16
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800636a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800637c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	f043 0307 	orr.w	r3, r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b087      	sub	sp, #28
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	021a      	lsls	r2, r3, #8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006416:	b480      	push	{r7}
 8006418:	b087      	sub	sp, #28
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2201      	movs	r2, #1
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	43db      	mvns	r3, r3
 8006438:	401a      	ands	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1a      	ldr	r2, [r3, #32]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	431a      	orrs	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	bf00      	nop
 8006456:	371c      	adds	r7, #28
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e05a      	b.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d01d      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1a      	ldr	r2, [pc, #104]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a15      	ldr	r2, [pc, #84]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10c      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4313      	orrs	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	40010000 	.word	0x40010000
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40010400 	.word	0x40010400
 8006550:	40014000 	.word	0x40014000
 8006554:	40001800 	.word	0x40001800

08006558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e03f      	b.n	8006612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fb ff82 	bl	80024b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	; 0x24
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fe19 	bl	80071fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2220      	movs	r2, #32
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08a      	sub	sp, #40	; 0x28
 800661e:	af02      	add	r7, sp, #8
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	d17c      	bne.n	8006734 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_UART_Transmit+0x2c>
 8006640:	88fb      	ldrh	r3, [r7, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e075      	b.n	8006736 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_UART_Transmit+0x3e>
 8006654:	2302      	movs	r3, #2
 8006656:	e06e      	b.n	8006736 <HAL_UART_Transmit+0x11c>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2221      	movs	r2, #33	; 0x21
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666e:	f7fc f8a7 	bl	80027c0 <HAL_GetTick>
 8006672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d108      	bne.n	800669c <HAL_UART_Transmit+0x82>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e003      	b.n	80066a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066ac:	e02a      	b.n	8006704 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fb59 	bl	8006d70 <UART_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d001      	beq.n	80066c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e036      	b.n	8006736 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10b      	bne.n	80066e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	3302      	adds	r3, #2
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e007      	b.n	80066f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1cf      	bne.n	80066ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2200      	movs	r2, #0
 8006716:	2140      	movs	r1, #64	; 0x40
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fb29 	bl	8006d70 <UART_WaitOnFlagUntilTimeout>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e006      	b.n	8006736 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	e000      	b.n	8006736 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006734:	2302      	movs	r3, #2
  }
}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	4613      	mov	r3, r2
 800674a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b20      	cmp	r3, #32
 8006756:	d130      	bne.n	80067ba <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_UART_Transmit_IT+0x26>
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e029      	b.n	80067bc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_UART_Transmit_IT+0x38>
 8006772:	2302      	movs	r3, #2
 8006774:	e022      	b.n	80067bc <HAL_UART_Transmit_IT+0x7e>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	88fa      	ldrh	r2, [r7, #6]
 800678e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2221      	movs	r2, #33	; 0x21
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80067ba:	2302      	movs	r3, #2
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b20      	cmp	r3, #32
 80067e0:	d11d      	bne.n	800681e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <HAL_UART_Receive_IT+0x26>
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e016      	b.n	8006820 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UART_Receive_IT+0x38>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e00f      	b.n	8006820 <HAL_UART_Receive_IT+0x58>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	461a      	mov	r2, r3
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 fb19 	bl	8006e4c <UART_Start_Receive_IT>
 800681a:	4603      	mov	r3, r0
 800681c:	e000      	b.n	8006820 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800681e:	2302      	movs	r3, #2
  }
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b0ba      	sub	sp, #232	; 0xe8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800684e:	2300      	movs	r3, #0
 8006850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800685a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006866:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <HAL_UART_IRQHandler+0x66>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fbfd 	bl	8007086 <UART_Receive_IT>
      return;
 800688c:	e256      	b.n	8006d3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800688e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80de 	beq.w	8006a54 <HAL_UART_IRQHandler+0x22c>
 8006898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 80d1 	beq.w	8006a54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <HAL_UART_IRQHandler+0xae>
 80068be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f043 0201 	orr.w	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <HAL_UART_IRQHandler+0xd2>
 80068e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0202 	orr.w	r2, r3, #2
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_UART_IRQHandler+0xf6>
 8006906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f043 0204 	orr.w	r2, r3, #4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d011      	beq.n	800694e <HAL_UART_IRQHandler+0x126>
 800692a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	f043 0208 	orr.w	r2, r3, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 81ed 	beq.w	8006d32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_UART_IRQHandler+0x14e>
 8006964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb88 	bl	8007086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006980:	2b40      	cmp	r3, #64	; 0x40
 8006982:	bf0c      	ite	eq
 8006984:	2301      	moveq	r3, #1
 8006986:	2300      	movne	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <HAL_UART_IRQHandler+0x17a>
 800699a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04f      	beq.n	8006a42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa90 	bl	8006ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d141      	bne.n	8006a3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3314      	adds	r3, #20
 80069bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3314      	adds	r3, #20
 80069de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1d9      	bne.n	80069b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d013      	beq.n	8006a32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	4a7d      	ldr	r2, [pc, #500]	; (8006c04 <HAL_UART_IRQHandler+0x3dc>)
 8006a10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fc fcbc 	bl	8003394 <HAL_DMA_Abort_IT>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e00e      	b.n	8006a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f986 	bl	8006d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a38:	e00a      	b.n	8006a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f982 	bl	8006d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	e006      	b.n	8006a50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f97e 	bl	8006d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a4e:	e170      	b.n	8006d32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a50:	bf00      	nop
    return;
 8006a52:	e16e      	b.n	8006d32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	f040 814a 	bne.w	8006cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8143 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 813c 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	f040 80b4 	bne.w	8006c08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006aac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8140 	beq.w	8006d36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	f080 8139 	bcs.w	8006d36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	f000 8088 	beq.w	8006bea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b16:	e841 2300 	strex	r3, r2, [r1]
 8006b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1d9      	bne.n	8006ada <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3314      	adds	r3, #20
 8006b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3314      	adds	r3, #20
 8006b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1e1      	bne.n	8006b26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3314      	adds	r3, #20
 8006b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e3      	bne.n	8006b62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bba:	f023 0310 	bic.w	r3, r3, #16
 8006bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	330c      	adds	r3, #12
 8006bc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e3      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fc fb65 	bl	80032b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f8ac 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c00:	e099      	b.n	8006d36 <HAL_UART_IRQHandler+0x50e>
 8006c02:	bf00      	nop
 8006c04:	08006f8f 	.word	0x08006f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 808b 	beq.w	8006d3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8086 	beq.w	8006d3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	330c      	adds	r3, #12
 8006c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c52:	647a      	str	r2, [r7, #68]	; 0x44
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e3      	bne.n	8006c2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3314      	adds	r3, #20
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	623b      	str	r3, [r7, #32]
   return(result);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3314      	adds	r3, #20
 8006c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e3      	bne.n	8006c66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0310 	bic.w	r3, r3, #16
 8006cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cd0:	61fa      	str	r2, [r7, #28]
 8006cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f834 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cf0:	e023      	b.n	8006d3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <HAL_UART_IRQHandler+0x4ea>
 8006cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f953 	bl	8006fb6 <UART_Transmit_IT>
    return;
 8006d10:	e014      	b.n	8006d3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00e      	beq.n	8006d3c <HAL_UART_IRQHandler+0x514>
 8006d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f993 	bl	8007056 <UART_EndTransmit_IT>
    return;
 8006d30:	e004      	b.n	8006d3c <HAL_UART_IRQHandler+0x514>
    return;
 8006d32:	bf00      	nop
 8006d34:	e002      	b.n	8006d3c <HAL_UART_IRQHandler+0x514>
      return;
 8006d36:	bf00      	nop
 8006d38:	e000      	b.n	8006d3c <HAL_UART_IRQHandler+0x514>
      return;
 8006d3a:	bf00      	nop
  }
}
 8006d3c:	37e8      	adds	r7, #232	; 0xe8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b090      	sub	sp, #64	; 0x40
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	603b      	str	r3, [r7, #0]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d80:	e050      	b.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d88:	d04c      	beq.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d007      	beq.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d90:	f7fb fd16 	bl	80027c0 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d241      	bcs.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	e853 3f00 	ldrex	r3, [r3]
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dc0:	637a      	str	r2, [r7, #52]	; 0x34
 8006dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc8:	e841 2300 	strex	r3, r2, [r1]
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1e5      	bne.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3314      	adds	r3, #20
 8006dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	613b      	str	r3, [r7, #16]
   return(result);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f023 0301 	bic.w	r3, r3, #1
 8006dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3314      	adds	r3, #20
 8006df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df4:	623a      	str	r2, [r7, #32]
 8006df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69f9      	ldr	r1, [r7, #28]
 8006dfa:	6a3a      	ldr	r2, [r7, #32]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e00f      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d09f      	beq.n	8006d82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3740      	adds	r7, #64	; 0x40
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	88fa      	ldrh	r2, [r7, #6]
 8006e64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	88fa      	ldrh	r2, [r7, #6]
 8006e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2222      	movs	r2, #34	; 0x22
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d007      	beq.n	8006e9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0201 	orr.w	r2, r2, #1
 8006ea8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0220 	orr.w	r2, r2, #32
 8006eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b095      	sub	sp, #84	; 0x54
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ef0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3314      	adds	r3, #20
 8006f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3314      	adds	r3, #20
 8006f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d119      	bne.n	8006f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f023 0310 	bic.w	r3, r3, #16
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f60:	61ba      	str	r2, [r7, #24]
 8006f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6979      	ldr	r1, [r7, #20]
 8006f66:	69ba      	ldr	r2, [r7, #24]
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f82:	bf00      	nop
 8006f84:	3754      	adds	r7, #84	; 0x54
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f7ff fecb 	bl	8006d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b21      	cmp	r3, #33	; 0x21
 8006fc8:	d13e      	bne.n	8007048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd2:	d114      	bne.n	8006ffe <UART_Transmit_IT+0x48>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	621a      	str	r2, [r3, #32]
 8006ffc:	e008      	b.n	8007010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	1c59      	adds	r1, r3, #1
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6211      	str	r1, [r2, #32]
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29b      	uxth	r3, r3
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4619      	mov	r1, r3
 800701e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10f      	bne.n	8007044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800706c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fa f930 	bl	80012dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b08c      	sub	sp, #48	; 0x30
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b22      	cmp	r3, #34	; 0x22
 8007098:	f040 80ab 	bne.w	80071f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d117      	bne.n	80070d6 <UART_Receive_IT+0x50>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d113      	bne.n	80070d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	1c9a      	adds	r2, r3, #2
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	629a      	str	r2, [r3, #40]	; 0x28
 80070d4:	e026      	b.n	8007124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e8:	d007      	beq.n	80070fa <UART_Receive_IT+0x74>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <UART_Receive_IT+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e008      	b.n	800711a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b2db      	uxtb	r3, r3
 8007110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007114:	b2da      	uxtb	r2, r3
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29b      	uxth	r3, r3
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4619      	mov	r1, r3
 8007132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007134:	2b00      	cmp	r3, #0
 8007136:	d15a      	bne.n	80071ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0220 	bic.w	r2, r2, #32
 8007146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0201 	bic.w	r2, r2, #1
 8007166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007174:	2b01      	cmp	r3, #1
 8007176:	d135      	bne.n	80071e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	613b      	str	r3, [r7, #16]
   return(result);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f023 0310 	bic.w	r3, r3, #16
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	330c      	adds	r3, #12
 800719c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800719e:	623a      	str	r2, [r7, #32]
 80071a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	69f9      	ldr	r1, [r7, #28]
 80071a4:	6a3a      	ldr	r2, [r7, #32]
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e5      	bne.n	800717e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d10a      	bne.n	80071d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fdbb 	bl	8006d58 <HAL_UARTEx_RxEventCallback>
 80071e2:	e002      	b.n	80071ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7fa f869 	bl	80012bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e002      	b.n	80071f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3730      	adds	r7, #48	; 0x30
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007200:	b0c0      	sub	sp, #256	; 0x100
 8007202:	af00      	add	r7, sp, #0
 8007204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	68d9      	ldr	r1, [r3, #12]
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	ea40 0301 	orr.w	r3, r0, r1
 8007224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	431a      	orrs	r2, r3
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	431a      	orrs	r2, r3
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007254:	f021 010c 	bic.w	r1, r1, #12
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007262:	430b      	orrs	r3, r1
 8007264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	6999      	ldr	r1, [r3, #24]
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	ea40 0301 	orr.w	r3, r0, r1
 8007282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b8f      	ldr	r3, [pc, #572]	; (80074c8 <UART_SetConfig+0x2cc>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d005      	beq.n	800729c <UART_SetConfig+0xa0>
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b8d      	ldr	r3, [pc, #564]	; (80074cc <UART_SetConfig+0x2d0>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d104      	bne.n	80072a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fd fb4e 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 80072a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072a4:	e003      	b.n	80072ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a6:	f7fd fb35 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 80072aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b8:	f040 810c 	bne.w	80074d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	1891      	adds	r1, r2, r2
 80072d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80072d6:	415b      	adcs	r3, r3
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072de:	4621      	mov	r1, r4
 80072e0:	eb12 0801 	adds.w	r8, r2, r1
 80072e4:	4629      	mov	r1, r5
 80072e6:	eb43 0901 	adc.w	r9, r3, r1
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fe:	4690      	mov	r8, r2
 8007300:	4699      	mov	r9, r3
 8007302:	4623      	mov	r3, r4
 8007304:	eb18 0303 	adds.w	r3, r8, r3
 8007308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800730c:	462b      	mov	r3, r5
 800730e:	eb49 0303 	adc.w	r3, r9, r3
 8007312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800732a:	460b      	mov	r3, r1
 800732c:	18db      	adds	r3, r3, r3
 800732e:	653b      	str	r3, [r7, #80]	; 0x50
 8007330:	4613      	mov	r3, r2
 8007332:	eb42 0303 	adc.w	r3, r2, r3
 8007336:	657b      	str	r3, [r7, #84]	; 0x54
 8007338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800733c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007340:	f7f9 fc34 	bl	8000bac <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <UART_SetConfig+0x2d4>)
 800734a:	fba3 2302 	umull	r2, r3, r3, r2
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	011c      	lsls	r4, r3, #4
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800735c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	64b9      	str	r1, [r7, #72]	; 0x48
 800736c:	415b      	adcs	r3, r3
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007374:	4641      	mov	r1, r8
 8007376:	eb12 0a01 	adds.w	sl, r2, r1
 800737a:	4649      	mov	r1, r9
 800737c:	eb43 0b01 	adc.w	fp, r3, r1
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800738c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007394:	4692      	mov	sl, r2
 8007396:	469b      	mov	fp, r3
 8007398:	4643      	mov	r3, r8
 800739a:	eb1a 0303 	adds.w	r3, sl, r3
 800739e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a2:	464b      	mov	r3, r9
 80073a4:	eb4b 0303 	adc.w	r3, fp, r3
 80073a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073c0:	460b      	mov	r3, r1
 80073c2:	18db      	adds	r3, r3, r3
 80073c4:	643b      	str	r3, [r7, #64]	; 0x40
 80073c6:	4613      	mov	r3, r2
 80073c8:	eb42 0303 	adc.w	r3, r2, r3
 80073cc:	647b      	str	r3, [r7, #68]	; 0x44
 80073ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073d6:	f7f9 fbe9 	bl	8000bac <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <UART_SetConfig+0x2d4>)
 80073e2:	fba3 2301 	umull	r2, r3, r3, r1
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2264      	movs	r2, #100	; 0x64
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	1acb      	subs	r3, r1, r3
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073f6:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <UART_SetConfig+0x2d4>)
 80073f8:	fba3 2302 	umull	r2, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007404:	441c      	add	r4, r3
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007420:	415b      	adcs	r3, r3
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007428:	4641      	mov	r1, r8
 800742a:	1851      	adds	r1, r2, r1
 800742c:	6339      	str	r1, [r7, #48]	; 0x30
 800742e:	4649      	mov	r1, r9
 8007430:	414b      	adcs	r3, r1
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007440:	4659      	mov	r1, fp
 8007442:	00cb      	lsls	r3, r1, #3
 8007444:	4651      	mov	r1, sl
 8007446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744a:	4651      	mov	r1, sl
 800744c:	00ca      	lsls	r2, r1, #3
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	4603      	mov	r3, r0
 8007454:	4642      	mov	r2, r8
 8007456:	189b      	adds	r3, r3, r2
 8007458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800745c:	464b      	mov	r3, r9
 800745e:	460a      	mov	r2, r1
 8007460:	eb42 0303 	adc.w	r3, r2, r3
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800747c:	460b      	mov	r3, r1
 800747e:	18db      	adds	r3, r3, r3
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
 8007482:	4613      	mov	r3, r2
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800748e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007492:	f7f9 fb8b 	bl	8000bac <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <UART_SetConfig+0x2d4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	; 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	3332      	adds	r3, #50	; 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <UART_SetConfig+0x2d4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 0207 	and.w	r2, r3, #7
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c4:	e105      	b.n	80076d2 <UART_SetConfig+0x4d6>
 80074c6:	bf00      	nop
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40011400 	.word	0x40011400
 80074d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074e6:	4642      	mov	r2, r8
 80074e8:	464b      	mov	r3, r9
 80074ea:	1891      	adds	r1, r2, r2
 80074ec:	6239      	str	r1, [r7, #32]
 80074ee:	415b      	adcs	r3, r3
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f6:	4641      	mov	r1, r8
 80074f8:	1854      	adds	r4, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0501 	adc.w	r5, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	00eb      	lsls	r3, r5, #3
 800750a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750e:	00e2      	lsls	r2, r4, #3
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	4643      	mov	r3, r8
 8007516:	18e3      	adds	r3, r4, r3
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800751c:	464b      	mov	r3, r9
 800751e:	eb45 0303 	adc.w	r3, r5, r3
 8007522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007542:	4629      	mov	r1, r5
 8007544:	008b      	lsls	r3, r1, #2
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754c:	4621      	mov	r1, r4
 800754e:	008a      	lsls	r2, r1, #2
 8007550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007554:	f7f9 fb2a 	bl	8000bac <__aeabi_uldivmod>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4b60      	ldr	r3, [pc, #384]	; (80076e0 <UART_SetConfig+0x4e4>)
 800755e:	fba3 2302 	umull	r2, r3, r3, r2
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	011c      	lsls	r4, r3, #4
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	61b9      	str	r1, [r7, #24]
 8007580:	415b      	adcs	r3, r3
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6139      	str	r1, [r7, #16]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075bc:	464b      	mov	r3, r9
 80075be:	460a      	mov	r2, r1
 80075c0:	eb42 0303 	adc.w	r3, r2, r3
 80075c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075e0:	4649      	mov	r1, r9
 80075e2:	008b      	lsls	r3, r1, #2
 80075e4:	4641      	mov	r1, r8
 80075e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ea:	4641      	mov	r1, r8
 80075ec:	008a      	lsls	r2, r1, #2
 80075ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075f2:	f7f9 fadb 	bl	8000bac <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <UART_SetConfig+0x4e4>)
 80075fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	2164      	movs	r1, #100	; 0x64
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	3332      	adds	r3, #50	; 0x32
 800760e:	4a34      	ldr	r2, [pc, #208]	; (80076e0 <UART_SetConfig+0x4e4>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800761a:	441c      	add	r4, r3
 800761c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007620:	2200      	movs	r2, #0
 8007622:	673b      	str	r3, [r7, #112]	; 0x70
 8007624:	677a      	str	r2, [r7, #116]	; 0x74
 8007626:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800762a:	4642      	mov	r2, r8
 800762c:	464b      	mov	r3, r9
 800762e:	1891      	adds	r1, r2, r2
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	415b      	adcs	r3, r3
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800763a:	4641      	mov	r1, r8
 800763c:	1851      	adds	r1, r2, r1
 800763e:	6039      	str	r1, [r7, #0]
 8007640:	4649      	mov	r1, r9
 8007642:	414b      	adcs	r3, r1
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007652:	4659      	mov	r1, fp
 8007654:	00cb      	lsls	r3, r1, #3
 8007656:	4651      	mov	r1, sl
 8007658:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765c:	4651      	mov	r1, sl
 800765e:	00ca      	lsls	r2, r1, #3
 8007660:	4610      	mov	r0, r2
 8007662:	4619      	mov	r1, r3
 8007664:	4603      	mov	r3, r0
 8007666:	4642      	mov	r2, r8
 8007668:	189b      	adds	r3, r3, r2
 800766a:	66bb      	str	r3, [r7, #104]	; 0x68
 800766c:	464b      	mov	r3, r9
 800766e:	460a      	mov	r2, r1
 8007670:	eb42 0303 	adc.w	r3, r2, r3
 8007674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	663b      	str	r3, [r7, #96]	; 0x60
 8007680:	667a      	str	r2, [r7, #100]	; 0x64
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800768e:	4649      	mov	r1, r9
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	4641      	mov	r1, r8
 8007694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007698:	4641      	mov	r1, r8
 800769a:	008a      	lsls	r2, r1, #2
 800769c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076a0:	f7f9 fa84 	bl	8000bac <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <UART_SetConfig+0x4e4>)
 80076aa:	fba3 1302 	umull	r1, r3, r3, r2
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	2164      	movs	r1, #100	; 0x64
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	3332      	adds	r3, #50	; 0x32
 80076bc:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <UART_SetConfig+0x4e4>)
 80076be:	fba2 2303 	umull	r2, r3, r2, r3
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	f003 020f 	and.w	r2, r3, #15
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4422      	add	r2, r4
 80076d0:	609a      	str	r2, [r3, #8]
}
 80076d2:	bf00      	nop
 80076d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076d8:	46bd      	mov	sp, r7
 80076da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076de:	bf00      	nop
 80076e0:	51eb851f 	.word	0x51eb851f

080076e4 <__NVIC_SetPriority>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	db0a      	blt.n	800770e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	490c      	ldr	r1, [pc, #48]	; (8007730 <__NVIC_SetPriority+0x4c>)
 80076fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007702:	0112      	lsls	r2, r2, #4
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	440b      	add	r3, r1
 8007708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800770c:	e00a      	b.n	8007724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	4908      	ldr	r1, [pc, #32]	; (8007734 <__NVIC_SetPriority+0x50>)
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	3b04      	subs	r3, #4
 800771c:	0112      	lsls	r2, r2, #4
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	440b      	add	r3, r1
 8007722:	761a      	strb	r2, [r3, #24]
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	e000e100 	.word	0xe000e100
 8007734:	e000ed00 	.word	0xe000ed00

08007738 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <SysTick_Handler+0x1c>)
 800773e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007740:	f001 fd4e 	bl	80091e0 <xTaskGetSchedulerState>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d001      	beq.n	800774e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800774a:	f002 fb35 	bl	8009db8 <xPortSysTickHandler>
  }
}
 800774e:	bf00      	nop
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	e000e010 	.word	0xe000e010

08007758 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800775c:	2100      	movs	r1, #0
 800775e:	f06f 0004 	mvn.w	r0, #4
 8007762:	f7ff ffbf 	bl	80076e4 <__NVIC_SetPriority>
#endif
}
 8007766:	bf00      	nop
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007772:	f3ef 8305 	mrs	r3, IPSR
 8007776:	603b      	str	r3, [r7, #0]
  return(result);
 8007778:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800777e:	f06f 0305 	mvn.w	r3, #5
 8007782:	607b      	str	r3, [r7, #4]
 8007784:	e00c      	b.n	80077a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007786:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <osKernelInitialize+0x44>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d105      	bne.n	800779a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <osKernelInitialize+0x44>)
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007794:	2300      	movs	r3, #0
 8007796:	607b      	str	r3, [r7, #4]
 8007798:	e002      	b.n	80077a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800779a:	f04f 33ff 	mov.w	r3, #4294967295
 800779e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077a0:	687b      	ldr	r3, [r7, #4]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	2000680c 	.word	0x2000680c

080077b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ba:	f3ef 8305 	mrs	r3, IPSR
 80077be:	603b      	str	r3, [r7, #0]
  return(result);
 80077c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80077c6:	f06f 0305 	mvn.w	r3, #5
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e010      	b.n	80077f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80077ce:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <osKernelStart+0x48>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d109      	bne.n	80077ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80077d6:	f7ff ffbf 	bl	8007758 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80077da:	4b08      	ldr	r3, [pc, #32]	; (80077fc <osKernelStart+0x48>)
 80077dc:	2202      	movs	r2, #2
 80077de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80077e0:	f001 f890 	bl	8008904 <vTaskStartScheduler>
      stat = osOK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	e002      	b.n	80077f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80077ea:	f04f 33ff 	mov.w	r3, #4294967295
 80077ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80077f0:	687b      	ldr	r3, [r7, #4]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000680c 	.word	0x2000680c

08007800 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007806:	f3ef 8305 	mrs	r3, IPSR
 800780a:	603b      	str	r3, [r7, #0]
  return(result);
 800780c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007812:	f001 f9a3 	bl	8008b5c <xTaskGetTickCountFromISR>
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	e002      	b.n	8007820 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800781a:	f001 f98f 	bl	8008b3c <xTaskGetTickCount>
 800781e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007820:	687b      	ldr	r3, [r7, #4]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800782a:	b580      	push	{r7, lr}
 800782c:	b08e      	sub	sp, #56	; 0x38
 800782e:	af04      	add	r7, sp, #16
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	60b9      	str	r1, [r7, #8]
 8007834:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800783a:	f3ef 8305 	mrs	r3, IPSR
 800783e:	617b      	str	r3, [r7, #20]
  return(result);
 8007840:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007842:	2b00      	cmp	r3, #0
 8007844:	d17e      	bne.n	8007944 <osThreadNew+0x11a>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d07b      	beq.n	8007944 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007850:	2318      	movs	r3, #24
 8007852:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007858:	f04f 33ff 	mov.w	r3, #4294967295
 800785c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d045      	beq.n	80078f0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <osThreadNew+0x48>
        name = attr->name;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <osThreadNew+0x6e>
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b38      	cmp	r3, #56	; 0x38
 800788a:	d805      	bhi.n	8007898 <osThreadNew+0x6e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <osThreadNew+0x72>
        return (NULL);
 8007898:	2300      	movs	r3, #0
 800789a:	e054      	b.n	8007946 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	695b      	ldr	r3, [r3, #20]
 80078a8:	089b      	lsrs	r3, r3, #2
 80078aa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00e      	beq.n	80078d2 <osThreadNew+0xa8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	2bbb      	cmp	r3, #187	; 0xbb
 80078ba:	d90a      	bls.n	80078d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <osThreadNew+0xa8>
        mem = 1;
 80078cc:	2301      	movs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	e010      	b.n	80078f4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10c      	bne.n	80078f4 <osThreadNew+0xca>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d108      	bne.n	80078f4 <osThreadNew+0xca>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <osThreadNew+0xca>
          mem = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	e001      	b.n	80078f4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d110      	bne.n	800791c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007902:	9202      	str	r2, [sp, #8]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fe0b 	bl	800852c <xTaskCreateStatic>
 8007916:	4603      	mov	r3, r0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	e013      	b.n	8007944 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d110      	bne.n	8007944 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	b29a      	uxth	r2, r3
 8007926:	f107 0310 	add.w	r3, r7, #16
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fe56 	bl	80085e6 <xTaskCreate>
 800793a:	4603      	mov	r3, r0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d001      	beq.n	8007944 <osThreadNew+0x11a>
            hTask = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007944:	693b      	ldr	r3, [r7, #16]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3728      	adds	r7, #40	; 0x28
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007956:	f3ef 8305 	mrs	r3, IPSR
 800795a:	60bb      	str	r3, [r7, #8]
  return(result);
 800795c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <osDelay+0x1c>
    stat = osErrorISR;
 8007962:	f06f 0305 	mvn.w	r3, #5
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	e007      	b.n	800797a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <osDelay+0x2c>
      vTaskDelay(ticks);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 ff91 	bl	800889c <vTaskDelay>
    }
  }

  return (stat);
 800797a:	68fb      	ldr	r3, [r7, #12]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a07      	ldr	r2, [pc, #28]	; (80079b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007994:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	4a06      	ldr	r2, [pc, #24]	; (80079b4 <vApplicationGetIdleTaskMemory+0x30>)
 800799a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	601a      	str	r2, [r3, #0]
}
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	20006810 	.word	0x20006810
 80079b4:	200068cc 	.word	0x200068cc

080079b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4a07      	ldr	r2, [pc, #28]	; (80079e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80079c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	4a06      	ldr	r2, [pc, #24]	; (80079e8 <vApplicationGetTimerTaskMemory+0x30>)
 80079ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20006acc 	.word	0x20006acc
 80079e8:	20006b88 	.word	0x20006b88

080079ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f103 0208 	add.w	r2, r3, #8
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f04f 32ff 	mov.w	r2, #4294967295
 8007a04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f103 0208 	add.w	r2, r3, #8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0208 	add.w	r2, r3, #8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d103      	bne.n	8007aae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	e00c      	b.n	8007ac8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e002      	b.n	8007abc <vListInsert+0x2e>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d2f6      	bcs.n	8007ab6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6892      	ldr	r2, [r2, #8]
 8007b16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6852      	ldr	r2, [r2, #4]
 8007b20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d103      	bne.n	8007b34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	1e5a      	subs	r2, r3, #1
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3714      	adds	r7, #20
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007b7e:	f002 f889 	bl	8009c94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	68f9      	ldr	r1, [r7, #12]
 8007b8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	441a      	add	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	68f9      	ldr	r1, [r7, #12]
 8007bb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	441a      	add	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	22ff      	movs	r2, #255	; 0xff
 8007bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	22ff      	movs	r2, #255	; 0xff
 8007bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d114      	bne.n	8007bfe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01a      	beq.n	8007c12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3310      	adds	r3, #16
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 f93b 	bl	8008e5c <xTaskRemoveFromEventList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d012      	beq.n	8007c12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <xQueueGenericReset+0xcc>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	e009      	b.n	8007c12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3310      	adds	r3, #16
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fef2 	bl	80079ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff feed 	bl	80079ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c12:	f002 f86f 	bl	8009cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c16:	2301      	movs	r3, #1
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	e000ed04 	.word	0xe000ed04

08007c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08e      	sub	sp, #56	; 0x38
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c4a:	bf00      	nop
 8007c4c:	e7fe      	b.n	8007c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <xQueueGenericCreateStatic+0x52>
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <xQueueGenericCreateStatic+0x56>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <xQueueGenericCreateStatic+0x58>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xQueueGenericCreateStatic+0x7e>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueGenericCreateStatic+0x82>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueGenericCreateStatic+0x84>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61fb      	str	r3, [r7, #28]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cc2:	2350      	movs	r3, #80	; 0x50
 8007cc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b50      	cmp	r3, #80	; 0x50
 8007cca:	d00a      	beq.n	8007ce2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	61bb      	str	r3, [r7, #24]
}
 8007cde:	bf00      	nop
 8007ce0:	e7fe      	b.n	8007ce0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ce2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00d      	beq.n	8007d0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f805 	bl	8007d14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3730      	adds	r7, #48	; 0x30
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
 8007d20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e002      	b.n	8007d36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007d42:	2101      	movs	r1, #1
 8007d44:	69b8      	ldr	r0, [r7, #24]
 8007d46:	f7ff ff05 	bl	8007b54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08e      	sub	sp, #56	; 0x38
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <xQueueGenericSend+0x32>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d8a:	bf00      	nop
 8007d8c:	e7fe      	b.n	8007d8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <xQueueGenericSend+0x40>
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <xQueueGenericSend+0x44>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e000      	b.n	8007da2 <xQueueGenericSend+0x46>
 8007da0:	2300      	movs	r3, #0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <xQueueGenericSend+0x60>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d103      	bne.n	8007dca <xQueueGenericSend+0x6e>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <xQueueGenericSend+0x72>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericSend+0x74>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericSend+0x8e>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dea:	f001 f9f9 	bl	80091e0 <xTaskGetSchedulerState>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <xQueueGenericSend+0x9e>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <xQueueGenericSend+0xa2>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <xQueueGenericSend+0xa4>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xQueueGenericSend+0xbe>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	61fb      	str	r3, [r7, #28]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e1a:	f001 ff3b 	bl	8009c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d302      	bcc.n	8007e30 <xQueueGenericSend+0xd4>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d129      	bne.n	8007e84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e36:	f000 fa0b 	bl	8008250 <prvCopyDataToQueue>
 8007e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d010      	beq.n	8007e66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	3324      	adds	r3, #36	; 0x24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f807 	bl	8008e5c <xTaskRemoveFromEventList>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d013      	beq.n	8007e7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e54:	4b3f      	ldr	r3, [pc, #252]	; (8007f54 <xQueueGenericSend+0x1f8>)
 8007e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	e00a      	b.n	8007e7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d007      	beq.n	8007e7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e6c:	4b39      	ldr	r3, [pc, #228]	; (8007f54 <xQueueGenericSend+0x1f8>)
 8007e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e7c:	f001 ff3a 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e063      	b.n	8007f4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d103      	bne.n	8007e92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e8a:	f001 ff33 	bl	8009cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e05c      	b.n	8007f4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d106      	bne.n	8007ea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 f841 	bl	8008f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ea6:	f001 ff25 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eaa:	f000 fd9b 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eae:	f001 fef1 	bl	8009c94 <vPortEnterCritical>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebe:	d103      	bne.n	8007ec8 <xQueueGenericSend+0x16c>
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ece:	b25b      	sxtb	r3, r3
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d103      	bne.n	8007ede <xQueueGenericSend+0x182>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ede:	f001 ff09 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ee2:	1d3a      	adds	r2, r7, #4
 8007ee4:	f107 0314 	add.w	r3, r7, #20
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 f830 	bl	8008f50 <xTaskCheckForTimeOut>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d124      	bne.n	8007f40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ef8:	f000 faa2 	bl	8008440 <prvIsQueueFull>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d018      	beq.n	8007f34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	3310      	adds	r3, #16
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 ff56 	bl	8008dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f12:	f000 fa2d 	bl	8008370 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f16:	f000 fd73 	bl	8008a00 <xTaskResumeAll>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f47f af7c 	bne.w	8007e1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <xQueueGenericSend+0x1f8>)
 8007f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	e772      	b.n	8007e1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f36:	f000 fa1b 	bl	8008370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f3a:	f000 fd61 	bl	8008a00 <xTaskResumeAll>
 8007f3e:	e76c      	b.n	8007e1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f42:	f000 fa15 	bl	8008370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f46:	f000 fd5b 	bl	8008a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3738      	adds	r7, #56	; 0x38
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b090      	sub	sp, #64	; 0x40
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10a      	bne.n	8007f86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <xQueueGenericSendFromISR+0x3c>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <xQueueGenericSendFromISR+0x40>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <xQueueGenericSendFromISR+0x42>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d103      	bne.n	8007fc2 <xQueueGenericSendFromISR+0x6a>
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <xQueueGenericSendFromISR+0x6e>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e000      	b.n	8007fc8 <xQueueGenericSendFromISR+0x70>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	623b      	str	r3, [r7, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fe2:	f001 ff39 	bl	8009e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	61fa      	str	r2, [r7, #28]
 8007ffc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800a:	429a      	cmp	r2, r3
 800800c:	d302      	bcc.n	8008014 <xQueueGenericSendFromISR+0xbc>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b02      	cmp	r3, #2
 8008012:	d12f      	bne.n	8008074 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008022:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	68b9      	ldr	r1, [r7, #8]
 8008028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800802a:	f000 f911 	bl	8008250 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800802e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d112      	bne.n	800805e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d016      	beq.n	800806e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	3324      	adds	r3, #36	; 0x24
 8008044:	4618      	mov	r0, r3
 8008046:	f000 ff09 	bl	8008e5c <xTaskRemoveFromEventList>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e007      	b.n	800806e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800805e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008062:	3301      	adds	r3, #1
 8008064:	b2db      	uxtb	r3, r3
 8008066:	b25a      	sxtb	r2, r3
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800806e:	2301      	movs	r3, #1
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008072:	e001      	b.n	8008078 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008074:	2300      	movs	r3, #0
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008086:	4618      	mov	r0, r3
 8008088:	3740      	adds	r7, #64	; 0x40
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08c      	sub	sp, #48	; 0x30
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800809c:	2300      	movs	r3, #0
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10a      	bne.n	80080c0 <xQueueReceive+0x30>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	623b      	str	r3, [r7, #32]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d103      	bne.n	80080ce <xQueueReceive+0x3e>
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <xQueueReceive+0x42>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <xQueueReceive+0x44>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueReceive+0x5e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61fb      	str	r3, [r7, #28]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080ee:	f001 f877 	bl	80091e0 <xTaskGetSchedulerState>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <xQueueReceive+0x6e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <xQueueReceive+0x72>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <xQueueReceive+0x74>
 8008102:	2300      	movs	r3, #0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10a      	bne.n	800811e <xQueueReceive+0x8e>
	__asm volatile
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	61bb      	str	r3, [r7, #24]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800811e:	f001 fdb9 	bl	8009c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01f      	beq.n	800816e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800812e:	68b9      	ldr	r1, [r7, #8]
 8008130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008132:	f000 f8f7 	bl	8008324 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	3310      	adds	r3, #16
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fe86 	bl	8008e5c <xTaskRemoveFromEventList>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008156:	4b3d      	ldr	r3, [pc, #244]	; (800824c <xQueueReceive+0x1bc>)
 8008158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008166:	f001 fdc5 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 800816a:	2301      	movs	r3, #1
 800816c:	e069      	b.n	8008242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d103      	bne.n	800817c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008174:	f001 fdbe 	bl	8009cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008178:	2300      	movs	r3, #0
 800817a:	e062      	b.n	8008242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800817c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817e:	2b00      	cmp	r3, #0
 8008180:	d106      	bne.n	8008190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008182:	f107 0310 	add.w	r3, r7, #16
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fecc 	bl	8008f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800818c:	2301      	movs	r3, #1
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008190:	f001 fdb0 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008194:	f000 fc26 	bl	80089e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008198:	f001 fd7c 	bl	8009c94 <vPortEnterCritical>
 800819c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a8:	d103      	bne.n	80081b2 <xQueueReceive+0x122>
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d103      	bne.n	80081c8 <xQueueReceive+0x138>
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c8:	f001 fd94 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081cc:	1d3a      	adds	r2, r7, #4
 80081ce:	f107 0310 	add.w	r3, r7, #16
 80081d2:	4611      	mov	r1, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 febb 	bl	8008f50 <xTaskCheckForTimeOut>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d123      	bne.n	8008228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e2:	f000 f917 	bl	8008414 <prvIsQueueEmpty>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d017      	beq.n	800821c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ee:	3324      	adds	r3, #36	; 0x24
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fde1 	bl	8008dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fc:	f000 f8b8 	bl	8008370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008200:	f000 fbfe 	bl	8008a00 <xTaskResumeAll>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d189      	bne.n	800811e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <xQueueReceive+0x1bc>)
 800820c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	e780      	b.n	800811e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800821c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800821e:	f000 f8a7 	bl	8008370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008222:	f000 fbed 	bl	8008a00 <xTaskResumeAll>
 8008226:	e77a      	b.n	800811e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822a:	f000 f8a1 	bl	8008370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800822e:	f000 fbe7 	bl	8008a00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008234:	f000 f8ee 	bl	8008414 <prvIsQueueEmpty>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	f43f af6f 	beq.w	800811e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008242:	4618      	mov	r0, r3
 8008244:	3730      	adds	r7, #48	; 0x30
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	e000ed04 	.word	0xe000ed04

08008250 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10d      	bne.n	800828a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d14d      	bne.n	8008312 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 ffce 	bl	800921c <xTaskPriorityDisinherit>
 8008280:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	e043      	b.n	8008312 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d119      	bne.n	80082c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6858      	ldr	r0, [r3, #4]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008298:	461a      	mov	r2, r3
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	f002 fd2a 	bl	800acf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a8:	441a      	add	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d32b      	bcc.n	8008312 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	e026      	b.n	8008312 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68d8      	ldr	r0, [r3, #12]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082cc:	461a      	mov	r2, r3
 80082ce:	68b9      	ldr	r1, [r7, #8]
 80082d0:	f002 fd10 	bl	800acf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082dc:	425b      	negs	r3, r3
 80082de:	441a      	add	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d207      	bcs.n	8008300 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f8:	425b      	negs	r3, r3
 80082fa:	441a      	add	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b02      	cmp	r3, #2
 8008304:	d105      	bne.n	8008312 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	3b01      	subs	r3, #1
 8008310:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800831a:	697b      	ldr	r3, [r7, #20]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d018      	beq.n	8008368 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	441a      	add	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	429a      	cmp	r2, r3
 800834e:	d303      	bcc.n	8008358 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68d9      	ldr	r1, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	461a      	mov	r2, r3
 8008362:	6838      	ldr	r0, [r7, #0]
 8008364:	f002 fcc6 	bl	800acf4 <memcpy>
	}
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008378:	f001 fc8c 	bl	8009c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008382:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008384:	e011      	b.n	80083aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b00      	cmp	r3, #0
 800838c:	d012      	beq.n	80083b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3324      	adds	r3, #36	; 0x24
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fd62 	bl	8008e5c <xTaskRemoveFromEventList>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800839e:	f000 fe39 	bl	8009014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dce9      	bgt.n	8008386 <prvUnlockQueue+0x16>
 80083b2:	e000      	b.n	80083b6 <prvUnlockQueue+0x46>
					break;
 80083b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	22ff      	movs	r2, #255	; 0xff
 80083ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80083be:	f001 fc99 	bl	8009cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80083c2:	f001 fc67 	bl	8009c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083ce:	e011      	b.n	80083f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d012      	beq.n	80083fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	3310      	adds	r3, #16
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fd3d 	bl	8008e5c <xTaskRemoveFromEventList>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80083e8:	f000 fe14 	bl	8009014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80083ec:	7bbb      	ldrb	r3, [r7, #14]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80083f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dce9      	bgt.n	80083d0 <prvUnlockQueue+0x60>
 80083fc:	e000      	b.n	8008400 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80083fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	22ff      	movs	r2, #255	; 0xff
 8008404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008408:	f001 fc74 	bl	8009cf4 <vPortExitCritical>
}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800841c:	f001 fc3a 	bl	8009c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d102      	bne.n	800842e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e001      	b.n	8008432 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008432:	f001 fc5f 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008448:	f001 fc24 	bl	8009c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	429a      	cmp	r2, r3
 8008456:	d102      	bne.n	800845e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008458:	2301      	movs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	e001      	b.n	8008462 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008462:	f001 fc47 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 8008466:	68fb      	ldr	r3, [r7, #12]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e014      	b.n	80084aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008480:	4a0f      	ldr	r2, [pc, #60]	; (80084c0 <vQueueAddToRegistry+0x50>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10b      	bne.n	80084a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800848c:	490c      	ldr	r1, [pc, #48]	; (80084c0 <vQueueAddToRegistry+0x50>)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008496:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <vQueueAddToRegistry+0x50>)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	00db      	lsls	r3, r3, #3
 800849c:	4413      	add	r3, r2
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80084a2:	e006      	b.n	80084b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d9e7      	bls.n	8008480 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	20006f88 	.word	0x20006f88

080084c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d4:	f001 fbde 	bl	8009c94 <vPortEnterCritical>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d103      	bne.n	80084ee <vQueueWaitForMessageRestricted+0x2a>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d103      	bne.n	8008504 <vQueueWaitForMessageRestricted+0x40>
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	f001 fbf6 	bl	8009cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	3324      	adds	r3, #36	; 0x24
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fc73 	bl	8008e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800851e:	6978      	ldr	r0, [r7, #20]
 8008520:	f7ff ff26 	bl	8008370 <prvUnlockQueue>
	}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08e      	sub	sp, #56	; 0x38
 8008530:	af04      	add	r7, sp, #16
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	623b      	str	r3, [r7, #32]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xTaskCreateStatic+0x46>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	61fb      	str	r3, [r7, #28]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008572:	23bc      	movs	r3, #188	; 0xbc
 8008574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2bbc      	cmp	r3, #188	; 0xbc
 800857a:	d00a      	beq.n	8008592 <xTaskCreateStatic+0x66>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01e      	beq.n	80085d8 <xTaskCreateStatic+0xac>
 800859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085b2:	2300      	movs	r3, #0
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f850 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d2:	f000 f8f3 	bl	80087bc <prvAddNewTaskToReadyList>
 80085d6:	e001      	b.n	80085dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085dc:	697b      	ldr	r3, [r7, #20]
	}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b08c      	sub	sp, #48	; 0x30
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fc6c 	bl	8009ed8 <pvPortMalloc>
 8008600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00e      	beq.n	8008626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008608:	20bc      	movs	r0, #188	; 0xbc
 800860a:	f001 fc65 	bl	8009ed8 <pvPortMalloc>
 800860e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	631a      	str	r2, [r3, #48]	; 0x30
 800861c:	e005      	b.n	800862a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f001 fd26 	bl	800a070 <vPortFree>
 8008624:	e001      	b.n	800862a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d017      	beq.n	8008660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	2300      	movs	r3, #0
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f80e 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008654:	69f8      	ldr	r0, [r7, #28]
 8008656:	f000 f8b1 	bl	80087bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800865a:	2301      	movs	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	e002      	b.n	8008666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008666:	69bb      	ldr	r3, [r7, #24]
	}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	461a      	mov	r2, r3
 8008688:	21a5      	movs	r1, #165	; 0xa5
 800868a:	f002 fb41 	bl	800ad10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008698:	3b01      	subs	r3, #1
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	617b      	str	r3, [r7, #20]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01f      	beq.n	800870e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	e012      	b.n	80086fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	4413      	add	r3, r2
 80086da:	7819      	ldrb	r1, [r3, #0]
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	3334      	adds	r3, #52	; 0x34
 80086e4:	460a      	mov	r2, r1
 80086e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	3301      	adds	r3, #1
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d9e9      	bls.n	80086d4 <prvInitialiseNewTask+0x64>
 8008700:	e000      	b.n	8008704 <prvInitialiseNewTask+0x94>
			{
				break;
 8008702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800870c:	e003      	b.n	8008716 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2b37      	cmp	r3, #55	; 0x37
 800871a:	d901      	bls.n	8008720 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800871c:	2337      	movs	r3, #55	; 0x37
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800872a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff f978 	bl	8007a2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	3318      	adds	r3, #24
 8008740:	4618      	mov	r0, r3
 8008742:	f7ff f973 	bl	8007a2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008766:	2200      	movs	r2, #0
 8008768:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	3354      	adds	r3, #84	; 0x54
 8008770:	2260      	movs	r2, #96	; 0x60
 8008772:	2100      	movs	r1, #0
 8008774:	4618      	mov	r0, r3
 8008776:	f002 facb 	bl	800ad10 <memset>
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	4a0c      	ldr	r2, [pc, #48]	; (80087b0 <prvInitialiseNewTask+0x140>)
 800877e:	659a      	str	r2, [r3, #88]	; 0x58
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <prvInitialiseNewTask+0x144>)
 8008784:	65da      	str	r2, [r3, #92]	; 0x5c
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	4a0b      	ldr	r2, [pc, #44]	; (80087b8 <prvInitialiseNewTask+0x148>)
 800878a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	68f9      	ldr	r1, [r7, #12]
 8008790:	69b8      	ldr	r0, [r7, #24]
 8008792:	f001 f953 	bl	8009a3c <pxPortInitialiseStack>
 8008796:	4602      	mov	r2, r0
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d002      	beq.n	80087a8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087a8:	bf00      	nop
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	0800baec 	.word	0x0800baec
 80087b4:	0800bb0c 	.word	0x0800bb0c
 80087b8:	0800bacc 	.word	0x0800bacc

080087bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087c4:	f001 fa66 	bl	8009c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087c8:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <prvAddNewTaskToReadyList+0xc4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	4a2c      	ldr	r2, [pc, #176]	; (8008880 <prvAddNewTaskToReadyList+0xc4>)
 80087d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087d2:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <prvAddNewTaskToReadyList+0xc8>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087da:	4a2a      	ldr	r2, [pc, #168]	; (8008884 <prvAddNewTaskToReadyList+0xc8>)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087e0:	4b27      	ldr	r3, [pc, #156]	; (8008880 <prvAddNewTaskToReadyList+0xc4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d110      	bne.n	800880a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087e8:	f000 fc38 	bl	800905c <prvInitialiseTaskLists>
 80087ec:	e00d      	b.n	800880a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087ee:	4b26      	ldr	r3, [pc, #152]	; (8008888 <prvAddNewTaskToReadyList+0xcc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <prvAddNewTaskToReadyList+0xc8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	429a      	cmp	r2, r3
 8008802:	d802      	bhi.n	800880a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008804:	4a1f      	ldr	r2, [pc, #124]	; (8008884 <prvAddNewTaskToReadyList+0xc8>)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800880a:	4b20      	ldr	r3, [pc, #128]	; (800888c <prvAddNewTaskToReadyList+0xd0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3301      	adds	r3, #1
 8008810:	4a1e      	ldr	r2, [pc, #120]	; (800888c <prvAddNewTaskToReadyList+0xd0>)
 8008812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008814:	4b1d      	ldr	r3, [pc, #116]	; (800888c <prvAddNewTaskToReadyList+0xd0>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <prvAddNewTaskToReadyList+0xd4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d903      	bls.n	8008830 <prvAddNewTaskToReadyList+0x74>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4a18      	ldr	r2, [pc, #96]	; (8008890 <prvAddNewTaskToReadyList+0xd4>)
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <prvAddNewTaskToReadyList+0xd8>)
 800883e:	441a      	add	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7ff f8fd 	bl	8007a46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800884c:	f001 fa52 	bl	8009cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008850:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <prvAddNewTaskToReadyList+0xcc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00e      	beq.n	8008876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <prvAddNewTaskToReadyList+0xc8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008862:	429a      	cmp	r2, r3
 8008864:	d207      	bcs.n	8008876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <prvAddNewTaskToReadyList+0xdc>)
 8008868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886c:	601a      	str	r2, [r3, #0]
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	2000749c 	.word	0x2000749c
 8008884:	20006fc8 	.word	0x20006fc8
 8008888:	200074a8 	.word	0x200074a8
 800888c:	200074b8 	.word	0x200074b8
 8008890:	200074a4 	.word	0x200074a4
 8008894:	20006fcc 	.word	0x20006fcc
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d017      	beq.n	80088de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <vTaskDelay+0x60>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <vTaskDelay+0x30>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60bb      	str	r3, [r7, #8]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088cc:	f000 f88a 	bl	80089e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fd10 	bl	80092f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088d8:	f000 f892 	bl	8008a00 <xTaskResumeAll>
 80088dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <vTaskDelay+0x64>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200074c4 	.word	0x200074c4
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008912:	463a      	mov	r2, r7
 8008914:	1d39      	adds	r1, r7, #4
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff f832 	bl	8007984 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	460a      	mov	r2, r1
 8008932:	4924      	ldr	r1, [pc, #144]	; (80089c4 <vTaskStartScheduler+0xc0>)
 8008934:	4824      	ldr	r0, [pc, #144]	; (80089c8 <vTaskStartScheduler+0xc4>)
 8008936:	f7ff fdf9 	bl	800852c <xTaskCreateStatic>
 800893a:	4603      	mov	r3, r0
 800893c:	4a23      	ldr	r2, [pc, #140]	; (80089cc <vTaskStartScheduler+0xc8>)
 800893e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <vTaskStartScheduler+0xc8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e001      	b.n	8008952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d102      	bne.n	800895e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008958:	f000 fd22 	bl	80093a0 <xTimerCreateTimerTask>
 800895c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d11b      	bne.n	800899c <vTaskStartScheduler+0x98>
	__asm volatile
 8008964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	613b      	str	r3, [r7, #16]
}
 8008976:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008978:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <vTaskStartScheduler+0xcc>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3354      	adds	r3, #84	; 0x54
 800897e:	4a15      	ldr	r2, [pc, #84]	; (80089d4 <vTaskStartScheduler+0xd0>)
 8008980:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <vTaskStartScheduler+0xd4>)
 8008984:	f04f 32ff 	mov.w	r2, #4294967295
 8008988:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <vTaskStartScheduler+0xd8>)
 800898c:	2201      	movs	r2, #1
 800898e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008990:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <vTaskStartScheduler+0xdc>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008996:	f001 f8db 	bl	8009b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800899a:	e00e      	b.n	80089ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d10a      	bne.n	80089ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60fb      	str	r3, [r7, #12]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <vTaskStartScheduler+0xb4>
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	0800ba30 	.word	0x0800ba30
 80089c8:	0800902d 	.word	0x0800902d
 80089cc:	200074c0 	.word	0x200074c0
 80089d0:	20006fc8 	.word	0x20006fc8
 80089d4:	20000014 	.word	0x20000014
 80089d8:	200074bc 	.word	0x200074bc
 80089dc:	200074a8 	.word	0x200074a8
 80089e0:	200074a0 	.word	0x200074a0

080089e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089e8:	4b04      	ldr	r3, [pc, #16]	; (80089fc <vTaskSuspendAll+0x18>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a03      	ldr	r2, [pc, #12]	; (80089fc <vTaskSuspendAll+0x18>)
 80089f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089f2:	bf00      	nop
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	200074c4 	.word	0x200074c4

08008a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a0e:	4b42      	ldr	r3, [pc, #264]	; (8008b18 <xTaskResumeAll+0x118>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <xTaskResumeAll+0x2c>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	603b      	str	r3, [r7, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	e7fe      	b.n	8008a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a2c:	f001 f932 	bl	8009c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a30:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <xTaskResumeAll+0x118>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4a38      	ldr	r2, [pc, #224]	; (8008b18 <xTaskResumeAll+0x118>)
 8008a38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a3a:	4b37      	ldr	r3, [pc, #220]	; (8008b18 <xTaskResumeAll+0x118>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d162      	bne.n	8008b08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a42:	4b36      	ldr	r3, [pc, #216]	; (8008b1c <xTaskResumeAll+0x11c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d05e      	beq.n	8008b08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a4a:	e02f      	b.n	8008aac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4c:	4b34      	ldr	r3, [pc, #208]	; (8008b20 <xTaskResumeAll+0x120>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3318      	adds	r3, #24
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7ff f851 	bl	8007b00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7ff f84c 	bl	8007b00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6c:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <xTaskResumeAll+0x124>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d903      	bls.n	8008a7c <xTaskResumeAll+0x7c>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	4a2a      	ldr	r2, [pc, #168]	; (8008b24 <xTaskResumeAll+0x124>)
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4a27      	ldr	r2, [pc, #156]	; (8008b28 <xTaskResumeAll+0x128>)
 8008a8a:	441a      	add	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe ffd7 	bl	8007a46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	4b23      	ldr	r3, [pc, #140]	; (8008b2c <xTaskResumeAll+0x12c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d302      	bcc.n	8008aac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008aa6:	4b22      	ldr	r3, [pc, #136]	; (8008b30 <xTaskResumeAll+0x130>)
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aac:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <xTaskResumeAll+0x120>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1cb      	bne.n	8008a4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aba:	f000 fb71 	bl	80091a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008abe:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <xTaskResumeAll+0x134>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d010      	beq.n	8008aec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008aca:	f000 f859 	bl	8008b80 <xTaskIncrementTick>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <xTaskResumeAll+0x130>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f1      	bne.n	8008aca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008ae6:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <xTaskResumeAll+0x134>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008aec:	4b10      	ldr	r3, [pc, #64]	; (8008b30 <xTaskResumeAll+0x130>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008af8:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <xTaskResumeAll+0x138>)
 8008afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b08:	f001 f8f4 	bl	8009cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8008b0c:	68bb      	ldr	r3, [r7, #8]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200074c4 	.word	0x200074c4
 8008b1c:	2000749c 	.word	0x2000749c
 8008b20:	2000745c 	.word	0x2000745c
 8008b24:	200074a4 	.word	0x200074a4
 8008b28:	20006fcc 	.word	0x20006fcc
 8008b2c:	20006fc8 	.word	0x20006fc8
 8008b30:	200074b0 	.word	0x200074b0
 8008b34:	200074ac 	.word	0x200074ac
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <xTaskGetTickCount+0x1c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b48:	687b      	ldr	r3, [r7, #4]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	200074a0 	.word	0x200074a0

08008b5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b62:	f001 f979 	bl	8009e58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008b6a:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <xTaskGetTickCountFromISR+0x20>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b70:	683b      	ldr	r3, [r7, #0]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	200074a0 	.word	0x200074a0

08008b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8a:	4b4f      	ldr	r3, [pc, #316]	; (8008cc8 <xTaskIncrementTick+0x148>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f040 808f 	bne.w	8008cb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b94:	4b4d      	ldr	r3, [pc, #308]	; (8008ccc <xTaskIncrementTick+0x14c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b9c:	4a4b      	ldr	r2, [pc, #300]	; (8008ccc <xTaskIncrementTick+0x14c>)
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d120      	bne.n	8008bea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ba8:	4b49      	ldr	r3, [pc, #292]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	603b      	str	r3, [r7, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <xTaskIncrementTick+0x46>
 8008bc8:	4b41      	ldr	r3, [pc, #260]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	4b41      	ldr	r3, [pc, #260]	; (8008cd4 <xTaskIncrementTick+0x154>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a3f      	ldr	r2, [pc, #252]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	4a3f      	ldr	r2, [pc, #252]	; (8008cd4 <xTaskIncrementTick+0x154>)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	; (8008cd8 <xTaskIncrementTick+0x158>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	4a3d      	ldr	r2, [pc, #244]	; (8008cd8 <xTaskIncrementTick+0x158>)
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	f000 fadb 	bl	80091a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bea:	4b3c      	ldr	r3, [pc, #240]	; (8008cdc <xTaskIncrementTick+0x15c>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d349      	bcc.n	8008c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bf4:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d104      	bne.n	8008c08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bfe:	4b37      	ldr	r3, [pc, #220]	; (8008cdc <xTaskIncrementTick+0x15c>)
 8008c00:	f04f 32ff 	mov.w	r2, #4294967295
 8008c04:	601a      	str	r2, [r3, #0]
					break;
 8008c06:	e03f      	b.n	8008c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c08:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d203      	bcs.n	8008c28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c20:	4a2e      	ldr	r2, [pc, #184]	; (8008cdc <xTaskIncrementTick+0x15c>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c26:	e02f      	b.n	8008c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe ff67 	bl	8007b00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	3318      	adds	r3, #24
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe ff5e 	bl	8007b00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <xTaskIncrementTick+0x160>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d903      	bls.n	8008c58 <xTaskIncrementTick+0xd8>
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	4a22      	ldr	r2, [pc, #136]	; (8008ce0 <xTaskIncrementTick+0x160>)
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4a1f      	ldr	r2, [pc, #124]	; (8008ce4 <xTaskIncrementTick+0x164>)
 8008c66:	441a      	add	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fe fee9 	bl	8007a46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	4b1b      	ldr	r3, [pc, #108]	; (8008ce8 <xTaskIncrementTick+0x168>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d3b8      	bcc.n	8008bf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c82:	2301      	movs	r3, #1
 8008c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c86:	e7b5      	b.n	8008bf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c88:	4b17      	ldr	r3, [pc, #92]	; (8008ce8 <xTaskIncrementTick+0x168>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c8e:	4915      	ldr	r1, [pc, #84]	; (8008ce4 <xTaskIncrementTick+0x164>)
 8008c90:	4613      	mov	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d901      	bls.n	8008ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ca4:	4b11      	ldr	r3, [pc, #68]	; (8008cec <xTaskIncrementTick+0x16c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	617b      	str	r3, [r7, #20]
 8008cb0:	e004      	b.n	8008cbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cb2:	4b0f      	ldr	r3, [pc, #60]	; (8008cf0 <xTaskIncrementTick+0x170>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	4a0d      	ldr	r2, [pc, #52]	; (8008cf0 <xTaskIncrementTick+0x170>)
 8008cba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cbc:	697b      	ldr	r3, [r7, #20]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200074c4 	.word	0x200074c4
 8008ccc:	200074a0 	.word	0x200074a0
 8008cd0:	20007454 	.word	0x20007454
 8008cd4:	20007458 	.word	0x20007458
 8008cd8:	200074b4 	.word	0x200074b4
 8008cdc:	200074bc 	.word	0x200074bc
 8008ce0:	200074a4 	.word	0x200074a4
 8008ce4:	20006fcc 	.word	0x20006fcc
 8008ce8:	20006fc8 	.word	0x20006fc8
 8008cec:	200074b0 	.word	0x200074b0
 8008cf0:	200074ac 	.word	0x200074ac

08008cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cfa:	4b2a      	ldr	r3, [pc, #168]	; (8008da4 <vTaskSwitchContext+0xb0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d02:	4b29      	ldr	r3, [pc, #164]	; (8008da8 <vTaskSwitchContext+0xb4>)
 8008d04:	2201      	movs	r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d08:	e046      	b.n	8008d98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008d0a:	4b27      	ldr	r3, [pc, #156]	; (8008da8 <vTaskSwitchContext+0xb4>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d10:	4b26      	ldr	r3, [pc, #152]	; (8008dac <vTaskSwitchContext+0xb8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e010      	b.n	8008d3a <vTaskSwitchContext+0x46>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10a      	bne.n	8008d34 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	607b      	str	r3, [r7, #4]
}
 8008d30:	bf00      	nop
 8008d32:	e7fe      	b.n	8008d32 <vTaskSwitchContext+0x3e>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	491d      	ldr	r1, [pc, #116]	; (8008db0 <vTaskSwitchContext+0xbc>)
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0e4      	beq.n	8008d18 <vTaskSwitchContext+0x24>
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4613      	mov	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <vTaskSwitchContext+0xbc>)
 8008d5a:	4413      	add	r3, r2
 8008d5c:	60bb      	str	r3, [r7, #8]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	605a      	str	r2, [r3, #4]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d104      	bne.n	8008d7e <vTaskSwitchContext+0x8a>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4a0b      	ldr	r2, [pc, #44]	; (8008db4 <vTaskSwitchContext+0xc0>)
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	4a08      	ldr	r2, [pc, #32]	; (8008dac <vTaskSwitchContext+0xb8>)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <vTaskSwitchContext+0xc0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3354      	adds	r3, #84	; 0x54
 8008d94:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <vTaskSwitchContext+0xc4>)
 8008d96:	6013      	str	r3, [r2, #0]
}
 8008d98:	bf00      	nop
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr
 8008da4:	200074c4 	.word	0x200074c4
 8008da8:	200074b0 	.word	0x200074b0
 8008dac:	200074a4 	.word	0x200074a4
 8008db0:	20006fcc 	.word	0x20006fcc
 8008db4:	20006fc8 	.word	0x20006fc8
 8008db8:	20000014 	.word	0x20000014

08008dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	60fb      	str	r3, [r7, #12]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <vTaskPlaceOnEventList+0x44>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3318      	adds	r3, #24
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7fe fe4f 	bl	8007a8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008df0:	2101      	movs	r1, #1
 8008df2:	6838      	ldr	r0, [r7, #0]
 8008df4:	f000 fa80 	bl	80092f8 <prvAddCurrentTaskToDelayedList>
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20006fc8 	.word	0x20006fc8

08008e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10a      	bne.n	8008e2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	617b      	str	r3, [r7, #20]
}
 8008e28:	bf00      	nop
 8008e2a:	e7fe      	b.n	8008e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3318      	adds	r3, #24
 8008e32:	4619      	mov	r1, r3
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7fe fe06 	bl	8007a46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	68b8      	ldr	r0, [r7, #8]
 8008e4a:	f000 fa55 	bl	80092f8 <prvAddCurrentTaskToDelayedList>
	}
 8008e4e:	bf00      	nop
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20006fc8 	.word	0x20006fc8

08008e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60fb      	str	r3, [r7, #12]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	3318      	adds	r3, #24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fe37 	bl	8007b00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <xTaskRemoveFromEventList+0xb0>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d11d      	bne.n	8008ed6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fe fe2e 	bl	8007b00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <xTaskRemoveFromEventList+0xb4>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d903      	bls.n	8008eb8 <xTaskRemoveFromEventList+0x5c>
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	4a16      	ldr	r2, [pc, #88]	; (8008f10 <xTaskRemoveFromEventList+0xb4>)
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4a13      	ldr	r2, [pc, #76]	; (8008f14 <xTaskRemoveFromEventList+0xb8>)
 8008ec6:	441a      	add	r2, r3
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f7fe fdb9 	bl	8007a46 <vListInsertEnd>
 8008ed4:	e005      	b.n	8008ee2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3318      	adds	r3, #24
 8008eda:	4619      	mov	r1, r3
 8008edc:	480e      	ldr	r0, [pc, #56]	; (8008f18 <xTaskRemoveFromEventList+0xbc>)
 8008ede:	f7fe fdb2 	bl	8007a46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <xTaskRemoveFromEventList+0xc0>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d905      	bls.n	8008efc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <xTaskRemoveFromEventList+0xc4>)
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	e001      	b.n	8008f00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f00:	697b      	ldr	r3, [r7, #20]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200074c4 	.word	0x200074c4
 8008f10:	200074a4 	.word	0x200074a4
 8008f14:	20006fcc 	.word	0x20006fcc
 8008f18:	2000745c 	.word	0x2000745c
 8008f1c:	20006fc8 	.word	0x20006fc8
 8008f20:	200074b0 	.word	0x200074b0

08008f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <vTaskInternalSetTimeOutState+0x24>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f34:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <vTaskInternalSetTimeOutState+0x28>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	605a      	str	r2, [r3, #4]
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	200074b4 	.word	0x200074b4
 8008f4c:	200074a0 	.word	0x200074a0

08008f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10a      	bne.n	8008f76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	613b      	str	r3, [r7, #16]
}
 8008f72:	bf00      	nop
 8008f74:	e7fe      	b.n	8008f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008f92:	f000 fe7f 	bl	8009c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f96:	4b1d      	ldr	r3, [pc, #116]	; (800900c <xTaskCheckForTimeOut+0xbc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d102      	bne.n	8008fb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	e023      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <xTaskCheckForTimeOut+0xc0>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d007      	beq.n	8008fd2 <xTaskCheckForTimeOut+0x82>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	69ba      	ldr	r2, [r7, #24]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d302      	bcc.n	8008fd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	61fb      	str	r3, [r7, #28]
 8008fd0:	e015      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d20b      	bcs.n	8008ff4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff9b 	bl	8008f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61fb      	str	r3, [r7, #28]
 8008ff2:	e004      	b.n	8008ffe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008ffe:	f000 fe79 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200074a0 	.word	0x200074a0
 8009010:	200074b4 	.word	0x200074b4

08009014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009018:	4b03      	ldr	r3, [pc, #12]	; (8009028 <vTaskMissedYield+0x14>)
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
}
 800901e:	bf00      	nop
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	200074b0 	.word	0x200074b0

0800902c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009034:	f000 f852 	bl	80090dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009038:	4b06      	ldr	r3, [pc, #24]	; (8009054 <prvIdleTask+0x28>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b01      	cmp	r3, #1
 800903e:	d9f9      	bls.n	8009034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009040:	4b05      	ldr	r3, [pc, #20]	; (8009058 <prvIdleTask+0x2c>)
 8009042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009050:	e7f0      	b.n	8009034 <prvIdleTask+0x8>
 8009052:	bf00      	nop
 8009054:	20006fcc 	.word	0x20006fcc
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009062:	2300      	movs	r3, #0
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	e00c      	b.n	8009082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a12      	ldr	r2, [pc, #72]	; (80090bc <prvInitialiseTaskLists+0x60>)
 8009074:	4413      	add	r3, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fcb8 	bl	80079ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	3301      	adds	r3, #1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b37      	cmp	r3, #55	; 0x37
 8009086:	d9ef      	bls.n	8009068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009088:	480d      	ldr	r0, [pc, #52]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 800908a:	f7fe fcaf 	bl	80079ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800908e:	480d      	ldr	r0, [pc, #52]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 8009090:	f7fe fcac 	bl	80079ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009094:	480c      	ldr	r0, [pc, #48]	; (80090c8 <prvInitialiseTaskLists+0x6c>)
 8009096:	f7fe fca9 	bl	80079ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800909a:	480c      	ldr	r0, [pc, #48]	; (80090cc <prvInitialiseTaskLists+0x70>)
 800909c:	f7fe fca6 	bl	80079ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090a0:	480b      	ldr	r0, [pc, #44]	; (80090d0 <prvInitialiseTaskLists+0x74>)
 80090a2:	f7fe fca3 	bl	80079ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <prvInitialiseTaskLists+0x78>)
 80090a8:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <prvInitialiseTaskLists+0x64>)
 80090aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <prvInitialiseTaskLists+0x7c>)
 80090ae:	4a05      	ldr	r2, [pc, #20]	; (80090c4 <prvInitialiseTaskLists+0x68>)
 80090b0:	601a      	str	r2, [r3, #0]
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20006fcc 	.word	0x20006fcc
 80090c0:	2000742c 	.word	0x2000742c
 80090c4:	20007440 	.word	0x20007440
 80090c8:	2000745c 	.word	0x2000745c
 80090cc:	20007470 	.word	0x20007470
 80090d0:	20007488 	.word	0x20007488
 80090d4:	20007454 	.word	0x20007454
 80090d8:	20007458 	.word	0x20007458

080090dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80090e2:	e019      	b.n	8009118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80090e4:	f000 fdd6 	bl	8009c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090e8:	4b10      	ldr	r3, [pc, #64]	; (800912c <prvCheckTasksWaitingTermination+0x50>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe fd03 	bl	8007b00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80090fa:	4b0d      	ldr	r3, [pc, #52]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3b01      	subs	r3, #1
 8009100:	4a0b      	ldr	r2, [pc, #44]	; (8009130 <prvCheckTasksWaitingTermination+0x54>)
 8009102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800910c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800910e:	f000 fdf1 	bl	8009cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f810 	bl	8009138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <prvCheckTasksWaitingTermination+0x58>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e1      	bne.n	80090e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	20007470 	.word	0x20007470
 8009130:	2000749c 	.word	0x2000749c
 8009134:	20007484 	.word	0x20007484

08009138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3354      	adds	r3, #84	; 0x54
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fdf9 	bl	800ad3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009150:	2b00      	cmp	r3, #0
 8009152:	d108      	bne.n	8009166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009158:	4618      	mov	r0, r3
 800915a:	f000 ff89 	bl	800a070 <vPortFree>
				vPortFree( pxTCB );
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 ff86 	bl	800a070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009164:	e018      	b.n	8009198 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800916c:	2b01      	cmp	r3, #1
 800916e:	d103      	bne.n	8009178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 ff7d 	bl	800a070 <vPortFree>
	}
 8009176:	e00f      	b.n	8009198 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800917e:	2b02      	cmp	r3, #2
 8009180:	d00a      	beq.n	8009198 <prvDeleteTCB+0x60>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	60fb      	str	r3, [r7, #12]
}
 8009194:	bf00      	nop
 8009196:	e7fe      	b.n	8009196 <prvDeleteTCB+0x5e>
	}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvResetNextTaskUnblockTime+0x38>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d104      	bne.n	80091ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091b0:	4b0a      	ldr	r3, [pc, #40]	; (80091dc <prvResetNextTaskUnblockTime+0x3c>)
 80091b2:	f04f 32ff 	mov.w	r2, #4294967295
 80091b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091b8:	e008      	b.n	80091cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ba:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <prvResetNextTaskUnblockTime+0x38>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4a04      	ldr	r2, [pc, #16]	; (80091dc <prvResetNextTaskUnblockTime+0x3c>)
 80091ca:	6013      	str	r3, [r2, #0]
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	20007454 	.word	0x20007454
 80091dc:	200074bc 	.word	0x200074bc

080091e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091e6:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <xTaskGetSchedulerState+0x34>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091ee:	2301      	movs	r3, #1
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	e008      	b.n	8009206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091f4:	4b08      	ldr	r3, [pc, #32]	; (8009218 <xTaskGetSchedulerState+0x38>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091fc:	2302      	movs	r3, #2
 80091fe:	607b      	str	r3, [r7, #4]
 8009200:	e001      	b.n	8009206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009202:	2300      	movs	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009206:	687b      	ldr	r3, [r7, #4]
	}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	200074a8 	.word	0x200074a8
 8009218:	200074c4 	.word	0x200074c4

0800921c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d056      	beq.n	80092e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009232:	4b2e      	ldr	r3, [pc, #184]	; (80092ec <xTaskPriorityDisinherit+0xd0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	429a      	cmp	r2, r3
 800923a:	d00a      	beq.n	8009252 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	60fb      	str	r3, [r7, #12]
}
 800924e:	bf00      	nop
 8009250:	e7fe      	b.n	8009250 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	60bb      	str	r3, [r7, #8]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009274:	1e5a      	subs	r2, r3, #1
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009282:	429a      	cmp	r2, r3
 8009284:	d02c      	beq.n	80092e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928a:	2b00      	cmp	r3, #0
 800928c:	d128      	bne.n	80092e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3304      	adds	r3, #4
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fc34 	bl	8007b00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b0:	4b0f      	ldr	r3, [pc, #60]	; (80092f0 <xTaskPriorityDisinherit+0xd4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d903      	bls.n	80092c0 <xTaskPriorityDisinherit+0xa4>
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <xTaskPriorityDisinherit+0xd4>)
 80092be:	6013      	str	r3, [r2, #0]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4a09      	ldr	r2, [pc, #36]	; (80092f4 <xTaskPriorityDisinherit+0xd8>)
 80092ce:	441a      	add	r2, r3
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f7fe fbb5 	bl	8007a46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092dc:	2301      	movs	r3, #1
 80092de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092e0:	697b      	ldr	r3, [r7, #20]
	}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20006fc8 	.word	0x20006fc8
 80092f0:	200074a4 	.word	0x200074a4
 80092f4:	20006fcc 	.word	0x20006fcc

080092f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009302:	4b21      	ldr	r3, [pc, #132]	; (8009388 <prvAddCurrentTaskToDelayedList+0x90>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009308:	4b20      	ldr	r3, [pc, #128]	; (800938c <prvAddCurrentTaskToDelayedList+0x94>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3304      	adds	r3, #4
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe fbf6 	bl	8007b00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931a:	d10a      	bne.n	8009332 <prvAddCurrentTaskToDelayedList+0x3a>
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009322:	4b1a      	ldr	r3, [pc, #104]	; (800938c <prvAddCurrentTaskToDelayedList+0x94>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3304      	adds	r3, #4
 8009328:	4619      	mov	r1, r3
 800932a:	4819      	ldr	r0, [pc, #100]	; (8009390 <prvAddCurrentTaskToDelayedList+0x98>)
 800932c:	f7fe fb8b 	bl	8007a46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009330:	e026      	b.n	8009380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4413      	add	r3, r2
 8009338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800933a:	4b14      	ldr	r3, [pc, #80]	; (800938c <prvAddCurrentTaskToDelayedList+0x94>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	429a      	cmp	r2, r3
 8009348:	d209      	bcs.n	800935e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800934a:	4b12      	ldr	r3, [pc, #72]	; (8009394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b0f      	ldr	r3, [pc, #60]	; (800938c <prvAddCurrentTaskToDelayedList+0x94>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3304      	adds	r3, #4
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f7fe fb99 	bl	8007a8e <vListInsert>
}
 800935c:	e010      	b.n	8009380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800935e:	4b0e      	ldr	r3, [pc, #56]	; (8009398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b0a      	ldr	r3, [pc, #40]	; (800938c <prvAddCurrentTaskToDelayedList+0x94>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7fe fb8f 	bl	8007a8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009370:	4b0a      	ldr	r3, [pc, #40]	; (800939c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	429a      	cmp	r2, r3
 8009378:	d202      	bcs.n	8009380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800937a:	4a08      	ldr	r2, [pc, #32]	; (800939c <prvAddCurrentTaskToDelayedList+0xa4>)
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6013      	str	r3, [r2, #0]
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	200074a0 	.word	0x200074a0
 800938c:	20006fc8 	.word	0x20006fc8
 8009390:	20007488 	.word	0x20007488
 8009394:	20007458 	.word	0x20007458
 8009398:	20007454 	.word	0x20007454
 800939c:	200074bc 	.word	0x200074bc

080093a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08a      	sub	sp, #40	; 0x28
 80093a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093aa:	f000 fb07 	bl	80099bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093ae:	4b1c      	ldr	r3, [pc, #112]	; (8009420 <xTimerCreateTimerTask+0x80>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d021      	beq.n	80093fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093be:	1d3a      	adds	r2, r7, #4
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	f107 030c 	add.w	r3, r7, #12
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe faf5 	bl	80079b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	9202      	str	r2, [sp, #8]
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	2302      	movs	r3, #2
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	2300      	movs	r3, #0
 80093de:	460a      	mov	r2, r1
 80093e0:	4910      	ldr	r1, [pc, #64]	; (8009424 <xTimerCreateTimerTask+0x84>)
 80093e2:	4811      	ldr	r0, [pc, #68]	; (8009428 <xTimerCreateTimerTask+0x88>)
 80093e4:	f7ff f8a2 	bl	800852c <xTaskCreateStatic>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4a10      	ldr	r2, [pc, #64]	; (800942c <xTimerCreateTimerTask+0x8c>)
 80093ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <xTimerCreateTimerTask+0x8c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093f6:	2301      	movs	r3, #1
 80093f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	613b      	str	r3, [r7, #16]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009416:	697b      	ldr	r3, [r7, #20]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3718      	adds	r7, #24
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200074f8 	.word	0x200074f8
 8009424:	0800ba38 	.word	0x0800ba38
 8009428:	08009565 	.word	0x08009565
 800942c:	200074fc 	.word	0x200074fc

08009430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	; 0x28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800943e:	2300      	movs	r3, #0
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	623b      	str	r3, [r7, #32]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800945e:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <xTimerGenericCommand+0x98>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d02a      	beq.n	80094bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2b05      	cmp	r3, #5
 8009476:	dc18      	bgt.n	80094aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009478:	f7ff feb2 	bl	80091e0 <xTaskGetSchedulerState>
 800947c:	4603      	mov	r3, r0
 800947e:	2b02      	cmp	r3, #2
 8009480:	d109      	bne.n	8009496 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009482:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <xTimerGenericCommand+0x98>)
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f107 0110 	add.w	r1, r7, #16
 800948a:	2300      	movs	r3, #0
 800948c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800948e:	f7fe fc65 	bl	8007d5c <xQueueGenericSend>
 8009492:	6278      	str	r0, [r7, #36]	; 0x24
 8009494:	e012      	b.n	80094bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009496:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <xTimerGenericCommand+0x98>)
 8009498:	6818      	ldr	r0, [r3, #0]
 800949a:	f107 0110 	add.w	r1, r7, #16
 800949e:	2300      	movs	r3, #0
 80094a0:	2200      	movs	r2, #0
 80094a2:	f7fe fc5b 	bl	8007d5c <xQueueGenericSend>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24
 80094a8:	e008      	b.n	80094bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094aa:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <xTimerGenericCommand+0x98>)
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	f107 0110 	add.w	r1, r7, #16
 80094b2:	2300      	movs	r3, #0
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	f7fe fd4f 	bl	8007f58 <xQueueGenericSendFromISR>
 80094ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3728      	adds	r7, #40	; 0x28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200074f8 	.word	0x200074f8

080094cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af02      	add	r7, sp, #8
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d6:	4b22      	ldr	r3, [pc, #136]	; (8009560 <prvProcessExpiredTimer+0x94>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	3304      	adds	r3, #4
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fb0b 	bl	8007b00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094f0:	f003 0304 	and.w	r3, r3, #4
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d022      	beq.n	800953e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	699a      	ldr	r2, [r3, #24]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	18d1      	adds	r1, r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	6978      	ldr	r0, [r7, #20]
 8009506:	f000 f8d1 	bl	80096ac <prvInsertTimerInActiveList>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01f      	beq.n	8009550 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009510:	2300      	movs	r3, #0
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	2300      	movs	r3, #0
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	2100      	movs	r1, #0
 800951a:	6978      	ldr	r0, [r7, #20]
 800951c:	f7ff ff88 	bl	8009430 <xTimerGenericCommand>
 8009520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d113      	bne.n	8009550 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	60fb      	str	r3, [r7, #12]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	b2da      	uxtb	r2, r3
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	6978      	ldr	r0, [r7, #20]
 8009556:	4798      	blx	r3
}
 8009558:	bf00      	nop
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	200074f0 	.word	0x200074f0

08009564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800956c:	f107 0308 	add.w	r3, r7, #8
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f857 	bl	8009624 <prvGetNextExpireTime>
 8009576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4619      	mov	r1, r3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f803 	bl	8009588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009582:	f000 f8d5 	bl	8009730 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009586:	e7f1      	b.n	800956c <prvTimerTask+0x8>

08009588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009592:	f7ff fa27 	bl	80089e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009596:	f107 0308 	add.w	r3, r7, #8
 800959a:	4618      	mov	r0, r3
 800959c:	f000 f866 	bl	800966c <prvSampleTimeNow>
 80095a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d130      	bne.n	800960a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <prvProcessTimerOrBlockTask+0x3c>
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d806      	bhi.n	80095c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095b6:	f7ff fa23 	bl	8008a00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff ff85 	bl	80094cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095c2:	e024      	b.n	800960e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d008      	beq.n	80095dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095ca:	4b13      	ldr	r3, [pc, #76]	; (8009618 <prvProcessTimerOrBlockTask+0x90>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <prvProcessTimerOrBlockTask+0x50>
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <prvProcessTimerOrBlockTask+0x52>
 80095d8:	2300      	movs	r3, #0
 80095da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095dc:	4b0f      	ldr	r3, [pc, #60]	; (800961c <prvProcessTimerOrBlockTask+0x94>)
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	4619      	mov	r1, r3
 80095ea:	f7fe ff6b 	bl	80084c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095ee:	f7ff fa07 	bl	8008a00 <xTaskResumeAll>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <prvProcessTimerOrBlockTask+0x98>)
 80095fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	f3bf 8f6f 	isb	sy
}
 8009608:	e001      	b.n	800960e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800960a:	f7ff f9f9 	bl	8008a00 <xTaskResumeAll>
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	200074f4 	.word	0x200074f4
 800961c:	200074f8 	.word	0x200074f8
 8009620:	e000ed04 	.word	0xe000ed04

08009624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800962c:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <prvGetNextExpireTime+0x44>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <prvGetNextExpireTime+0x16>
 8009636:	2201      	movs	r2, #1
 8009638:	e000      	b.n	800963c <prvGetNextExpireTime+0x18>
 800963a:	2200      	movs	r2, #0
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d105      	bne.n	8009654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <prvGetNextExpireTime+0x44>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e001      	b.n	8009658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	200074f0 	.word	0x200074f0

0800966c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009674:	f7ff fa62 	bl	8008b3c <xTaskGetTickCount>
 8009678:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800967a:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <prvSampleTimeNow+0x3c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	429a      	cmp	r2, r3
 8009682:	d205      	bcs.n	8009690 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009684:	f000 f936 	bl	80098f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	e002      	b.n	8009696 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009696:	4a04      	ldr	r2, [pc, #16]	; (80096a8 <prvSampleTimeNow+0x3c>)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800969c:	68fb      	ldr	r3, [r7, #12]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20007500 	.word	0x20007500

080096ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d812      	bhi.n	80096f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	1ad2      	subs	r2, r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d302      	bcc.n	80096e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096e0:	2301      	movs	r3, #1
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e01b      	b.n	800971e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <prvInsertTimerInActiveList+0x7c>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4619      	mov	r1, r3
 80096f0:	4610      	mov	r0, r2
 80096f2:	f7fe f9cc 	bl	8007a8e <vListInsert>
 80096f6:	e012      	b.n	800971e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d206      	bcs.n	800970e <prvInsertTimerInActiveList+0x62>
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	429a      	cmp	r2, r3
 8009706:	d302      	bcc.n	800970e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	e007      	b.n	800971e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800970e:	4b07      	ldr	r3, [pc, #28]	; (800972c <prvInsertTimerInActiveList+0x80>)
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3304      	adds	r3, #4
 8009716:	4619      	mov	r1, r3
 8009718:	4610      	mov	r0, r2
 800971a:	f7fe f9b8 	bl	8007a8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800971e:	697b      	ldr	r3, [r7, #20]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	200074f4 	.word	0x200074f4
 800972c:	200074f0 	.word	0x200074f0

08009730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009736:	e0ca      	b.n	80098ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	da18      	bge.n	8009770 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	3304      	adds	r3, #4
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	61fb      	str	r3, [r7, #28]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009766:	6850      	ldr	r0, [r2, #4]
 8009768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800976a:	6892      	ldr	r2, [r2, #8]
 800976c:	4611      	mov	r1, r2
 800976e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f2c0 80aa 	blt.w	80098cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	695b      	ldr	r3, [r3, #20]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	3304      	adds	r3, #4
 8009788:	4618      	mov	r0, r3
 800978a:	f7fe f9b9 	bl	8007b00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800978e:	463b      	mov	r3, r7
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff ff6b 	bl	800966c <prvSampleTimeNow>
 8009796:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b09      	cmp	r3, #9
 800979c:	f200 8097 	bhi.w	80098ce <prvProcessReceivedCommands+0x19e>
 80097a0:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <prvProcessReceivedCommands+0x78>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097d1 	.word	0x080097d1
 80097b0:	080097d1 	.word	0x080097d1
 80097b4:	08009845 	.word	0x08009845
 80097b8:	08009859 	.word	0x08009859
 80097bc:	080098a3 	.word	0x080098a3
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097d1 	.word	0x080097d1
 80097c8:	08009845 	.word	0x08009845
 80097cc:	08009859 	.word	0x08009859
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097d6:	f043 0301 	orr.w	r3, r3, #1
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	18d1      	adds	r1, r2, r3
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f0:	f7ff ff5c 	bl	80096ac <prvInsertTimerInActiveList>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d069      	beq.n	80098ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fc:	6a1b      	ldr	r3, [r3, #32]
 80097fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009800:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009808:	f003 0304 	and.w	r3, r3, #4
 800980c:	2b00      	cmp	r3, #0
 800980e:	d05e      	beq.n	80098ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	441a      	add	r2, r3
 8009818:	2300      	movs	r3, #0
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	2100      	movs	r1, #0
 8009820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009822:	f7ff fe05 	bl	8009430 <xTimerGenericCommand>
 8009826:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d14f      	bne.n	80098ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	61bb      	str	r3, [r7, #24]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	b2da      	uxtb	r2, r3
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009856:	e03a      	b.n	80098ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	b2da      	uxtb	r2, r3
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	617b      	str	r3, [r7, #20]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	18d1      	adds	r1, r2, r3
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800989c:	f7ff ff06 	bl	80096ac <prvInsertTimerInActiveList>
					break;
 80098a0:	e015      	b.n	80098ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098a8:	f003 0302 	and.w	r3, r3, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d103      	bne.n	80098b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80098b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098b2:	f000 fbdd 	bl	800a070 <vPortFree>
 80098b6:	e00a      	b.n	80098ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098be:	f023 0301 	bic.w	r3, r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098ca:	e000      	b.n	80098ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80098cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ce:	4b08      	ldr	r3, [pc, #32]	; (80098f0 <prvProcessReceivedCommands+0x1c0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	1d39      	adds	r1, r7, #4
 80098d4:	2200      	movs	r2, #0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe fbda 	bl	8008090 <xQueueReceive>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f47f af2a 	bne.w	8009738 <prvProcessReceivedCommands+0x8>
	}
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	3730      	adds	r7, #48	; 0x30
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200074f8 	.word	0x200074f8

080098f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098fa:	e048      	b.n	800998e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098fc:	4b2d      	ldr	r3, [pc, #180]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009906:	4b2b      	ldr	r3, [pc, #172]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3304      	adds	r3, #4
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe f8f3 	bl	8007b00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d02e      	beq.n	800998e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4413      	add	r3, r2
 8009938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	429a      	cmp	r2, r3
 8009940:	d90e      	bls.n	8009960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800994e:	4b19      	ldr	r3, [pc, #100]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7fe f898 	bl	8007a8e <vListInsert>
 800995e:	e016      	b.n	800998e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff fd60 	bl	8009430 <xTimerGenericCommand>
 8009970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	603b      	str	r3, [r7, #0]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1b1      	bne.n	80098fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009998:	4b06      	ldr	r3, [pc, #24]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800999e:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <prvSwitchTimerLists+0xc4>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a04      	ldr	r2, [pc, #16]	; (80099b4 <prvSwitchTimerLists+0xc0>)
 80099a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099a6:	4a04      	ldr	r2, [pc, #16]	; (80099b8 <prvSwitchTimerLists+0xc4>)
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	6013      	str	r3, [r2, #0]
}
 80099ac:	bf00      	nop
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	200074f0 	.word	0x200074f0
 80099b8:	200074f4 	.word	0x200074f4

080099bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099c2:	f000 f967 	bl	8009c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <prvCheckForValidListAndQueue+0x60>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d120      	bne.n	8009a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099ce:	4814      	ldr	r0, [pc, #80]	; (8009a20 <prvCheckForValidListAndQueue+0x64>)
 80099d0:	f7fe f80c 	bl	80079ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099d4:	4813      	ldr	r0, [pc, #76]	; (8009a24 <prvCheckForValidListAndQueue+0x68>)
 80099d6:	f7fe f809 	bl	80079ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099da:	4b13      	ldr	r3, [pc, #76]	; (8009a28 <prvCheckForValidListAndQueue+0x6c>)
 80099dc:	4a10      	ldr	r2, [pc, #64]	; (8009a20 <prvCheckForValidListAndQueue+0x64>)
 80099de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099e0:	4b12      	ldr	r3, [pc, #72]	; (8009a2c <prvCheckForValidListAndQueue+0x70>)
 80099e2:	4a10      	ldr	r2, [pc, #64]	; (8009a24 <prvCheckForValidListAndQueue+0x68>)
 80099e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099e6:	2300      	movs	r3, #0
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <prvCheckForValidListAndQueue+0x74>)
 80099ec:	4a11      	ldr	r2, [pc, #68]	; (8009a34 <prvCheckForValidListAndQueue+0x78>)
 80099ee:	2110      	movs	r1, #16
 80099f0:	200a      	movs	r0, #10
 80099f2:	f7fe f917 	bl	8007c24 <xQueueGenericCreateStatic>
 80099f6:	4603      	mov	r3, r0
 80099f8:	4a08      	ldr	r2, [pc, #32]	; (8009a1c <prvCheckForValidListAndQueue+0x60>)
 80099fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099fc:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <prvCheckForValidListAndQueue+0x60>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <prvCheckForValidListAndQueue+0x60>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	490b      	ldr	r1, [pc, #44]	; (8009a38 <prvCheckForValidListAndQueue+0x7c>)
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fd30 	bl	8008470 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a10:	f000 f970 	bl	8009cf4 <vPortExitCritical>
}
 8009a14:	bf00      	nop
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200074f8 	.word	0x200074f8
 8009a20:	200074c8 	.word	0x200074c8
 8009a24:	200074dc 	.word	0x200074dc
 8009a28:	200074f0 	.word	0x200074f0
 8009a2c:	200074f4 	.word	0x200074f4
 8009a30:	200075a4 	.word	0x200075a4
 8009a34:	20007504 	.word	0x20007504
 8009a38:	0800ba40 	.word	0x0800ba40

08009a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3b04      	subs	r3, #4
 8009a4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3b04      	subs	r3, #4
 8009a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f023 0201 	bic.w	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b04      	subs	r3, #4
 8009a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a6c:	4a0c      	ldr	r2, [pc, #48]	; (8009aa0 <pxPortInitialiseStack+0x64>)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3b14      	subs	r3, #20
 8009a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3b04      	subs	r3, #4
 8009a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f06f 0202 	mvn.w	r2, #2
 8009a8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3b20      	subs	r3, #32
 8009a90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a92:	68fb      	ldr	r3, [r7, #12]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	08009aa5 	.word	0x08009aa5

08009aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aae:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <prvTaskExitError+0x54>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab6:	d00a      	beq.n	8009ace <prvTaskExitError+0x2a>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <prvTaskExitError+0x28>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60bb      	str	r3, [r7, #8]
}
 8009ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ae2:	bf00      	nop
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d0fc      	beq.n	8009ae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20000010 	.word	0x20000010
 8009afc:	00000000 	.word	0x00000000

08009b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b00:	4b07      	ldr	r3, [pc, #28]	; (8009b20 <pxCurrentTCBConst2>)
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	6808      	ldr	r0, [r1, #0]
 8009b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0a:	f380 8809 	msr	PSP, r0
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f04f 0000 	mov.w	r0, #0
 8009b16:	f380 8811 	msr	BASEPRI, r0
 8009b1a:	4770      	bx	lr
 8009b1c:	f3af 8000 	nop.w

08009b20 <pxCurrentTCBConst2>:
 8009b20:	20006fc8 	.word	0x20006fc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop

08009b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b28:	4808      	ldr	r0, [pc, #32]	; (8009b4c <prvPortStartFirstTask+0x24>)
 8009b2a:	6800      	ldr	r0, [r0, #0]
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	f380 8808 	msr	MSP, r0
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f380 8814 	msr	CONTROL, r0
 8009b3a:	b662      	cpsie	i
 8009b3c:	b661      	cpsie	f
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	df00      	svc	0
 8009b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b4a:	bf00      	nop
 8009b4c:	e000ed08 	.word	0xe000ed08

08009b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b56:	4b46      	ldr	r3, [pc, #280]	; (8009c70 <xPortStartScheduler+0x120>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a46      	ldr	r2, [pc, #280]	; (8009c74 <xPortStartScheduler+0x124>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d10a      	bne.n	8009b76 <xPortStartScheduler+0x26>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	613b      	str	r3, [r7, #16]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b76:	4b3e      	ldr	r3, [pc, #248]	; (8009c70 <xPortStartScheduler+0x120>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a3f      	ldr	r2, [pc, #252]	; (8009c78 <xPortStartScheduler+0x128>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d10a      	bne.n	8009b96 <xPortStartScheduler+0x46>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	60fb      	str	r3, [r7, #12]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b96:	4b39      	ldr	r3, [pc, #228]	; (8009c7c <xPortStartScheduler+0x12c>)
 8009b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	22ff      	movs	r2, #255	; 0xff
 8009ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b31      	ldr	r3, [pc, #196]	; (8009c80 <xPortStartScheduler+0x130>)
 8009bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bbe:	4b31      	ldr	r3, [pc, #196]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bc4:	e009      	b.n	8009bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bc6:	4b2f      	ldr	r3, [pc, #188]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	4a2d      	ldr	r2, [pc, #180]	; (8009c84 <xPortStartScheduler+0x134>)
 8009bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d0ef      	beq.n	8009bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009be6:	4b27      	ldr	r3, [pc, #156]	; (8009c84 <xPortStartScheduler+0x134>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f1c3 0307 	rsb	r3, r3, #7
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d00a      	beq.n	8009c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	60bb      	str	r3, [r7, #8]
}
 8009c04:	bf00      	nop
 8009c06:	e7fe      	b.n	8009c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c08:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	4a1d      	ldr	r2, [pc, #116]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c12:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c1a:	4a1a      	ldr	r2, [pc, #104]	; (8009c84 <xPortStartScheduler+0x134>)
 8009c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c26:	4b18      	ldr	r3, [pc, #96]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c32:	4b15      	ldr	r3, [pc, #84]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a14      	ldr	r2, [pc, #80]	; (8009c88 <xPortStartScheduler+0x138>)
 8009c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c3e:	f000 f8dd 	bl	8009dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c42:	4b12      	ldr	r3, [pc, #72]	; (8009c8c <xPortStartScheduler+0x13c>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c48:	f000 f8fc 	bl	8009e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c4c:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <xPortStartScheduler+0x140>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a0f      	ldr	r2, [pc, #60]	; (8009c90 <xPortStartScheduler+0x140>)
 8009c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c58:	f7ff ff66 	bl	8009b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c5c:	f7ff f84a 	bl	8008cf4 <vTaskSwitchContext>
	prvTaskExitError();
 8009c60:	f7ff ff20 	bl	8009aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	e000ed00 	.word	0xe000ed00
 8009c74:	410fc271 	.word	0x410fc271
 8009c78:	410fc270 	.word	0x410fc270
 8009c7c:	e000e400 	.word	0xe000e400
 8009c80:	200075f4 	.word	0x200075f4
 8009c84:	200075f8 	.word	0x200075f8
 8009c88:	e000ed20 	.word	0xe000ed20
 8009c8c:	20000010 	.word	0x20000010
 8009c90:	e000ef34 	.word	0xe000ef34

08009c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	607b      	str	r3, [r7, #4]
}
 8009cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cae:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <vPortEnterCritical+0x58>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	4a0d      	ldr	r2, [pc, #52]	; (8009cec <vPortEnterCritical+0x58>)
 8009cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cb8:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <vPortEnterCritical+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d10f      	bne.n	8009ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <vPortEnterCritical+0x5c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00a      	beq.n	8009ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <vPortEnterCritical+0x4a>
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000010 	.word	0x20000010
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cfa:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <vPortExitCritical+0x50>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <vPortExitCritical+0x24>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	607b      	str	r3, [r7, #4]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <vPortExitCritical+0x50>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	4a09      	ldr	r2, [pc, #36]	; (8009d44 <vPortExitCritical+0x50>)
 8009d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <vPortExitCritical+0x50>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <vPortExitCritical+0x42>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	f383 8811 	msr	BASEPRI, r3
}
 8009d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000010 	.word	0x20000010
	...

08009d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d50:	f3ef 8009 	mrs	r0, PSP
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <pxCurrentTCBConst>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	f01e 0f10 	tst.w	lr, #16
 8009d60:	bf08      	it	eq
 8009d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	6010      	str	r0, [r2, #0]
 8009d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d74:	f380 8811 	msr	BASEPRI, r0
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f7fe ffb8 	bl	8008cf4 <vTaskSwitchContext>
 8009d84:	f04f 0000 	mov.w	r0, #0
 8009d88:	f380 8811 	msr	BASEPRI, r0
 8009d8c:	bc09      	pop	{r0, r3}
 8009d8e:	6819      	ldr	r1, [r3, #0]
 8009d90:	6808      	ldr	r0, [r1, #0]
 8009d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d96:	f01e 0f10 	tst.w	lr, #16
 8009d9a:	bf08      	it	eq
 8009d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009da0:	f380 8809 	msr	PSP, r0
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w

08009db0 <pxCurrentTCBConst>:
 8009db0:	20006fc8 	.word	0x20006fc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	607b      	str	r3, [r7, #4]
}
 8009dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dd2:	f7fe fed5 	bl	8008b80 <xTaskIncrementTick>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ddc:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <xPortSysTickHandler+0x40>)
 8009dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	2300      	movs	r3, #0
 8009de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	f383 8811 	msr	BASEPRI, r3
}
 8009dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	e000ed04 	.word	0xe000ed04

08009dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <vPortSetupTimerInterrupt+0x34>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e06:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <vPortSetupTimerInterrupt+0x38>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <vPortSetupTimerInterrupt+0x3c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <vPortSetupTimerInterrupt+0x40>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	099b      	lsrs	r3, r3, #6
 8009e18:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <vPortSetupTimerInterrupt+0x44>)
 8009e1a:	3b01      	subs	r3, #1
 8009e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e1e:	4b04      	ldr	r3, [pc, #16]	; (8009e30 <vPortSetupTimerInterrupt+0x34>)
 8009e20:	2207      	movs	r2, #7
 8009e22:	601a      	str	r2, [r3, #0]
}
 8009e24:	bf00      	nop
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	e000e010 	.word	0xe000e010
 8009e34:	e000e018 	.word	0xe000e018
 8009e38:	20000004 	.word	0x20000004
 8009e3c:	10624dd3 	.word	0x10624dd3
 8009e40:	e000e014 	.word	0xe000e014

08009e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e54 <vPortEnableVFP+0x10>
 8009e48:	6801      	ldr	r1, [r0, #0]
 8009e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e4e:	6001      	str	r1, [r0, #0]
 8009e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e52:	bf00      	nop
 8009e54:	e000ed88 	.word	0xe000ed88

08009e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e5e:	f3ef 8305 	mrs	r3, IPSR
 8009e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b0f      	cmp	r3, #15
 8009e68:	d914      	bls.n	8009e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <vPortValidateInterruptPriority+0x70>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e74:	4b15      	ldr	r3, [pc, #84]	; (8009ecc <vPortValidateInterruptPriority+0x74>)
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	7afa      	ldrb	r2, [r7, #11]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d20a      	bcs.n	8009e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	607b      	str	r3, [r7, #4]
}
 8009e90:	bf00      	nop
 8009e92:	e7fe      	b.n	8009e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e94:	4b0e      	ldr	r3, [pc, #56]	; (8009ed0 <vPortValidateInterruptPriority+0x78>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ed4 <vPortValidateInterruptPriority+0x7c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d90a      	bls.n	8009eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	603b      	str	r3, [r7, #0]
}
 8009eb6:	bf00      	nop
 8009eb8:	e7fe      	b.n	8009eb8 <vPortValidateInterruptPriority+0x60>
	}
 8009eba:	bf00      	nop
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	e000e3f0 	.word	0xe000e3f0
 8009ecc:	200075f4 	.word	0x200075f4
 8009ed0:	e000ed0c 	.word	0xe000ed0c
 8009ed4:	200075f8 	.word	0x200075f8

08009ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ee4:	f7fe fd7e 	bl	80089e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ee8:	4b5b      	ldr	r3, [pc, #364]	; (800a058 <pvPortMalloc+0x180>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ef0:	f000 f920 	bl	800a134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ef4:	4b59      	ldr	r3, [pc, #356]	; (800a05c <pvPortMalloc+0x184>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4013      	ands	r3, r2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8093 	bne.w	800a028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d01d      	beq.n	8009f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009f08:	2208      	movs	r2, #8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d014      	beq.n	8009f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f023 0307 	bic.w	r3, r3, #7
 8009f20:	3308      	adds	r3, #8
 8009f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <pvPortMalloc+0x6c>
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	617b      	str	r3, [r7, #20]
}
 8009f40:	bf00      	nop
 8009f42:	e7fe      	b.n	8009f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d06e      	beq.n	800a028 <pvPortMalloc+0x150>
 8009f4a:	4b45      	ldr	r3, [pc, #276]	; (800a060 <pvPortMalloc+0x188>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d869      	bhi.n	800a028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f54:	4b43      	ldr	r3, [pc, #268]	; (800a064 <pvPortMalloc+0x18c>)
 8009f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f58:	4b42      	ldr	r3, [pc, #264]	; (800a064 <pvPortMalloc+0x18c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f5e:	e004      	b.n	8009f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <pvPortMalloc+0xa4>
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f1      	bne.n	8009f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f7c:	4b36      	ldr	r3, [pc, #216]	; (800a058 <pvPortMalloc+0x180>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d050      	beq.n	800a028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2208      	movs	r2, #8
 8009f8c:	4413      	add	r3, r2
 8009f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	6a3b      	ldr	r3, [r7, #32]
 8009f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d91f      	bls.n	8009fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4413      	add	r3, r2
 8009fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	613b      	str	r3, [r7, #16]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	1ad2      	subs	r2, r2, r3
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fe2:	69b8      	ldr	r0, [r7, #24]
 8009fe4:	f000 f908 	bl	800a1f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fe8:	4b1d      	ldr	r3, [pc, #116]	; (800a060 <pvPortMalloc+0x188>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	; (800a060 <pvPortMalloc+0x188>)
 8009ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ff6:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <pvPortMalloc+0x188>)
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	4b1b      	ldr	r3, [pc, #108]	; (800a068 <pvPortMalloc+0x190>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d203      	bcs.n	800a00a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a002:	4b17      	ldr	r3, [pc, #92]	; (800a060 <pvPortMalloc+0x188>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a18      	ldr	r2, [pc, #96]	; (800a068 <pvPortMalloc+0x190>)
 800a008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <pvPortMalloc+0x184>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	431a      	orrs	r2, r3
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a01e:	4b13      	ldr	r3, [pc, #76]	; (800a06c <pvPortMalloc+0x194>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3301      	adds	r3, #1
 800a024:	4a11      	ldr	r2, [pc, #68]	; (800a06c <pvPortMalloc+0x194>)
 800a026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a028:	f7fe fcea 	bl	8008a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <pvPortMalloc+0x174>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60fb      	str	r3, [r7, #12]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <pvPortMalloc+0x172>
	return pvReturn;
 800a04c:	69fb      	ldr	r3, [r7, #28]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3728      	adds	r7, #40	; 0x28
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	2000b204 	.word	0x2000b204
 800a05c:	2000b218 	.word	0x2000b218
 800a060:	2000b208 	.word	0x2000b208
 800a064:	2000b1fc 	.word	0x2000b1fc
 800a068:	2000b20c 	.word	0x2000b20c
 800a06c:	2000b210 	.word	0x2000b210

0800a070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d04d      	beq.n	800a11e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a082:	2308      	movs	r3, #8
 800a084:	425b      	negs	r3, r3
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4413      	add	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	4b24      	ldr	r3, [pc, #144]	; (800a128 <vPortFree+0xb8>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4013      	ands	r3, r2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <vPortFree+0x44>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	60fb      	str	r3, [r7, #12]
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <vPortFree+0x62>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60bb      	str	r3, [r7, #8]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	4b14      	ldr	r3, [pc, #80]	; (800a128 <vPortFree+0xb8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d01e      	beq.n	800a11e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11a      	bne.n	800a11e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	; (800a128 <vPortFree+0xb8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	401a      	ands	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0f8:	f7fe fc74 	bl	80089e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <vPortFree+0xbc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4413      	add	r3, r2
 800a106:	4a09      	ldr	r2, [pc, #36]	; (800a12c <vPortFree+0xbc>)
 800a108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a10a:	6938      	ldr	r0, [r7, #16]
 800a10c:	f000 f874 	bl	800a1f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <vPortFree+0xc0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a06      	ldr	r2, [pc, #24]	; (800a130 <vPortFree+0xc0>)
 800a118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a11a:	f7fe fc71 	bl	8008a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a11e:	bf00      	nop
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	2000b218 	.word	0x2000b218
 800a12c:	2000b208 	.word	0x2000b208
 800a130:	2000b214 	.word	0x2000b214

0800a134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a13a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a13e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <prvHeapInit+0xac>)
 800a142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00c      	beq.n	800a168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3307      	adds	r3, #7
 800a152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	4a1f      	ldr	r2, [pc, #124]	; (800a1e0 <prvHeapInit+0xac>)
 800a164:	4413      	add	r3, r2
 800a166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a16c:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <prvHeapInit+0xb0>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <prvHeapInit+0xb0>)
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a180:	2208      	movs	r2, #8
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <prvHeapInit+0xb4>)
 800a194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <prvHeapInit+0xb4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a19e:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <prvHeapInit+0xb8>)
 800a1c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <prvHeapInit+0xbc>)
 800a1ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1cc:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <prvHeapInit+0xc0>)
 800a1ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	200075fc 	.word	0x200075fc
 800a1e4:	2000b1fc 	.word	0x2000b1fc
 800a1e8:	2000b204 	.word	0x2000b204
 800a1ec:	2000b20c 	.word	0x2000b20c
 800a1f0:	2000b208 	.word	0x2000b208
 800a1f4:	2000b218 	.word	0x2000b218

0800a1f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a200:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <prvInsertBlockIntoFreeList+0xac>)
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e002      	b.n	800a20c <prvInsertBlockIntoFreeList+0x14>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	429a      	cmp	r2, r3
 800a214:	d8f7      	bhi.n	800a206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	4413      	add	r3, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d108      	bne.n	800a23a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	441a      	add	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d118      	bne.n	800a280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d00d      	beq.n	800a276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	e008      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e003      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d002      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	2000b1fc 	.word	0x2000b1fc
 800a2a8:	2000b204 	.word	0x2000b204
 800a2ac:	00000000 	.word	0x00000000

0800a2b0 <elec_offset_search>:
float theta_pos[2], P_pos[4];
float theta_min[2], P_min[4];



void elec_offset_search(CurrCtrl_IN * in, CurrCtrl_OUT * out){
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08e      	sub	sp, #56	; 0x38
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]

    float phi[2];
    float U,V,W;
    float P_tr_tol = 0.000001;
 800a2ba:	4b97      	ldr	r3, [pc, #604]	; (800a518 <elec_offset_search+0x268>)
 800a2bc:	637b      	str	r3, [r7, #52]	; 0x34
    int P_tol_ok;

    // Start search
    if(in->current_ctrl_cmd == 1 && elec_search_status == 0){
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d116      	bne.n	800a2f4 <elec_offset_search+0x44>
 800a2c6:	4b95      	ldr	r3, [pc, #596]	; (800a51c <elec_offset_search+0x26c>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d112      	bne.n	800a2f4 <elec_offset_search+0x44>
        elec_search_status = 1;
 800a2ce:	4b93      	ldr	r3, [pc, #588]	; (800a51c <elec_offset_search+0x26c>)
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	601a      	str	r2, [r3, #0]
        tick = 0;
 800a2d4:	4b92      	ldr	r3, [pc, #584]	; (800a520 <elec_offset_search+0x270>)
 800a2d6:	f04f 0200 	mov.w	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]
        reset_rls(P_pos,theta_pos,100);
 800a2dc:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800a524 <elec_offset_search+0x274>
 800a2e0:	4991      	ldr	r1, [pc, #580]	; (800a528 <elec_offset_search+0x278>)
 800a2e2:	4892      	ldr	r0, [pc, #584]	; (800a52c <elec_offset_search+0x27c>)
 800a2e4:	f000 fcb8 	bl	800ac58 <reset_rls>
        reset_rls(P_min,theta_min,100);
 800a2e8:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800a524 <elec_offset_search+0x274>
 800a2ec:	4990      	ldr	r1, [pc, #576]	; (800a530 <elec_offset_search+0x280>)
 800a2ee:	4891      	ldr	r0, [pc, #580]	; (800a534 <elec_offset_search+0x284>)
 800a2f0:	f000 fcb2 	bl	800ac58 <reset_rls>
    }

    // Reset
    if(in->current_ctrl_cmd != 1){
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d00a      	beq.n	800a312 <elec_offset_search+0x62>
        elec_search_status = 0;
 800a2fc:	4b87      	ldr	r3, [pc, #540]	; (800a51c <elec_offset_search+0x26c>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	601a      	str	r2, [r3, #0]
        elec_theta = 0;
 800a302:	4b8d      	ldr	r3, [pc, #564]	; (800a538 <elec_offset_search+0x288>)
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
        tick = 0;
 800a30a:	4b85      	ldr	r3, [pc, #532]	; (800a520 <elec_offset_search+0x270>)
 800a30c:	f04f 0200 	mov.w	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
    }

    // Search first dir
    if(elec_search_status == 1){
 800a312:	4b82      	ldr	r3, [pc, #520]	; (800a51c <elec_offset_search+0x26c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b01      	cmp	r3, #1
 800a318:	f040 8096 	bne.w	800a448 <elec_offset_search+0x198>
        elec_theta += OMEGA_rad_s*Ts;
 800a31c:	4b86      	ldr	r3, [pc, #536]	; (800a538 <elec_offset_search+0x288>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4618      	mov	r0, r3
 800a322:	f7f6 f8d9 	bl	80004d8 <__aeabi_f2d>
 800a326:	a378      	add	r3, pc, #480	; (adr r3, 800a508 <elec_offset_search+0x258>)
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f7f5 ff76 	bl	800021c <__adddf3>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4610      	mov	r0, r2
 800a336:	4619      	mov	r1, r3
 800a338:	f7f6 fbe8 	bl	8000b0c <__aeabi_d2f>
 800a33c:	4603      	mov	r3, r0
 800a33e:	4a7e      	ldr	r2, [pc, #504]	; (800a538 <elec_offset_search+0x288>)
 800a340:	6013      	str	r3, [r2, #0]
        tick++;
 800a342:	4b77      	ldr	r3, [pc, #476]	; (800a520 <elec_offset_search+0x270>)
 800a344:	edd3 7a00 	vldr	s15, [r3]
 800a348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a34c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a350:	4b73      	ldr	r3, [pc, #460]	; (800a520 <elec_offset_search+0x270>)
 800a352:	edc3 7a00 	vstr	s15, [r3]

        phi[0] = in->rotor_ang;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	60fb      	str	r3, [r7, #12]
        phi[1] = 1.0;
 800a35c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a360:	613b      	str	r3, [r7, #16]

        if(tick*Ts > 1.5){
 800a362:	4b6f      	ldr	r3, [pc, #444]	; (800a520 <elec_offset_search+0x270>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f7f6 f8b6 	bl	80004d8 <__aeabi_f2d>
 800a36c:	a368      	add	r3, pc, #416	; (adr r3, 800a510 <elec_offset_search+0x260>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f6 f909 	bl	8000588 <__aeabi_dmul>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	4610      	mov	r0, r2
 800a37c:	4619      	mov	r1, r3
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	4b6e      	ldr	r3, [pc, #440]	; (800a53c <elec_offset_search+0x28c>)
 800a384:	f7f6 fb90 	bl	8000aa8 <__aeabi_dcmpgt>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00b      	beq.n	800a3a6 <elec_offset_search+0xf6>
            rls_step(P_pos,theta_pos,phi,elec_theta);
 800a38e:	4b6a      	ldr	r3, [pc, #424]	; (800a538 <elec_offset_search+0x288>)
 800a390:	edd3 7a00 	vldr	s15, [r3]
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	eeb0 0a67 	vmov.f32	s0, s15
 800a39c:	461a      	mov	r2, r3
 800a39e:	4962      	ldr	r1, [pc, #392]	; (800a528 <elec_offset_search+0x278>)
 800a3a0:	4862      	ldr	r0, [pc, #392]	; (800a52c <elec_offset_search+0x27c>)
 800a3a2:	f000 fc15 	bl	800abd0 <rls_step>
        }

        P_tol_ok = P_pos[0] < P_tr_tol && P_pos[1] < P_tr_tol;
 800a3a6:	4b61      	ldr	r3, [pc, #388]	; (800a52c <elec_offset_search+0x27c>)
 800a3a8:	edd3 7a00 	vldr	s15, [r3]
 800a3ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b8:	dd0b      	ble.n	800a3d2 <elec_offset_search+0x122>
 800a3ba:	4b5c      	ldr	r3, [pc, #368]	; (800a52c <elec_offset_search+0x27c>)
 800a3bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800a3c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a3c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3cc:	dd01      	ble.n	800a3d2 <elec_offset_search+0x122>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <elec_offset_search+0x124>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	633b      	str	r3, [r7, #48]	; 0x30

        if(P_tol_ok || tick*Ts > 7){
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d115      	bne.n	800a408 <elec_offset_search+0x158>
 800a3dc:	4b50      	ldr	r3, [pc, #320]	; (800a520 <elec_offset_search+0x270>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7f6 f879 	bl	80004d8 <__aeabi_f2d>
 800a3e6:	a34a      	add	r3, pc, #296	; (adr r3, 800a510 <elec_offset_search+0x260>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f7f6 f8cc 	bl	8000588 <__aeabi_dmul>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	f04f 0200 	mov.w	r2, #0
 800a3fc:	4b50      	ldr	r3, [pc, #320]	; (800a540 <elec_offset_search+0x290>)
 800a3fe:	f7f6 fb53 	bl	8000aa8 <__aeabi_dcmpgt>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d006      	beq.n	800a416 <elec_offset_search+0x166>
            elec_search_status = 2;
 800a408:	4b44      	ldr	r3, [pc, #272]	; (800a51c <elec_offset_search+0x26c>)
 800a40a:	2202      	movs	r2, #2
 800a40c:	601a      	str	r2, [r3, #0]
            tick = 0;
 800a40e:	4b44      	ldr	r3, [pc, #272]	; (800a520 <elec_offset_search+0x270>)
 800a410:	f04f 0200 	mov.w	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
        }

        if(tick*Ts > 10){
 800a416:	4b42      	ldr	r3, [pc, #264]	; (800a520 <elec_offset_search+0x270>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f6 f85c 	bl	80004d8 <__aeabi_f2d>
 800a420:	a33b      	add	r3, pc, #236	; (adr r3, 800a510 <elec_offset_search+0x260>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f7f6 f8af 	bl	8000588 <__aeabi_dmul>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4610      	mov	r0, r2
 800a430:	4619      	mov	r1, r3
 800a432:	f04f 0200 	mov.w	r2, #0
 800a436:	4b43      	ldr	r3, [pc, #268]	; (800a544 <elec_offset_search+0x294>)
 800a438:	f7f6 fb36 	bl	8000aa8 <__aeabi_dcmpgt>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <elec_offset_search+0x198>
            elec_search_status = 10;
 800a442:	4b36      	ldr	r3, [pc, #216]	; (800a51c <elec_offset_search+0x26c>)
 800a444:	220a      	movs	r2, #10
 800a446:	601a      	str	r2, [r3, #0]

        }
    }

    // Seach second dir
    if(elec_search_status == 2){
 800a448:	4b34      	ldr	r3, [pc, #208]	; (800a51c <elec_offset_search+0x26c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	f040 812c 	bne.w	800a6aa <elec_offset_search+0x3fa>
        elec_theta -= OMEGA_rad_s*Ts;
 800a452:	4b39      	ldr	r3, [pc, #228]	; (800a538 <elec_offset_search+0x288>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f7f6 f83e 	bl	80004d8 <__aeabi_f2d>
 800a45c:	a32a      	add	r3, pc, #168	; (adr r3, 800a508 <elec_offset_search+0x258>)
 800a45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a462:	f7f5 fed9 	bl	8000218 <__aeabi_dsub>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4610      	mov	r0, r2
 800a46c:	4619      	mov	r1, r3
 800a46e:	f7f6 fb4d 	bl	8000b0c <__aeabi_d2f>
 800a472:	4603      	mov	r3, r0
 800a474:	4a30      	ldr	r2, [pc, #192]	; (800a538 <elec_offset_search+0x288>)
 800a476:	6013      	str	r3, [r2, #0]
        tick++;
 800a478:	4b29      	ldr	r3, [pc, #164]	; (800a520 <elec_offset_search+0x270>)
 800a47a:	edd3 7a00 	vldr	s15, [r3]
 800a47e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a482:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a486:	4b26      	ldr	r3, [pc, #152]	; (800a520 <elec_offset_search+0x270>)
 800a488:	edc3 7a00 	vstr	s15, [r3]

        phi[0] = in->rotor_ang;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	60fb      	str	r3, [r7, #12]
        phi[1] = 1.0;
 800a492:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a496:	613b      	str	r3, [r7, #16]

        if(tick*Ts > 1.5){
 800a498:	4b21      	ldr	r3, [pc, #132]	; (800a520 <elec_offset_search+0x270>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7f6 f81b 	bl	80004d8 <__aeabi_f2d>
 800a4a2:	a31b      	add	r3, pc, #108	; (adr r3, 800a510 <elec_offset_search+0x260>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	f7f6 f86e 	bl	8000588 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	4b20      	ldr	r3, [pc, #128]	; (800a53c <elec_offset_search+0x28c>)
 800a4ba:	f7f6 faf5 	bl	8000aa8 <__aeabi_dcmpgt>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <elec_offset_search+0x22c>
            rls_step(P_min,theta_min,phi,elec_theta);
 800a4c4:	4b1c      	ldr	r3, [pc, #112]	; (800a538 <elec_offset_search+0x288>)
 800a4c6:	edd3 7a00 	vldr	s15, [r3]
 800a4ca:	f107 030c 	add.w	r3, r7, #12
 800a4ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4916      	ldr	r1, [pc, #88]	; (800a530 <elec_offset_search+0x280>)
 800a4d6:	4817      	ldr	r0, [pc, #92]	; (800a534 <elec_offset_search+0x284>)
 800a4d8:	f000 fb7a 	bl	800abd0 <rls_step>
        }

        P_tol_ok = P_min[0] < P_tr_tol && P_min[1] < P_tr_tol;
 800a4dc:	4b15      	ldr	r3, [pc, #84]	; (800a534 <elec_offset_search+0x284>)
 800a4de:	edd3 7a00 	vldr	s15, [r3]
 800a4e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ee:	dd2b      	ble.n	800a548 <elec_offset_search+0x298>
 800a4f0:	4b10      	ldr	r3, [pc, #64]	; (800a534 <elec_offset_search+0x284>)
 800a4f2:	edd3 7a01 	vldr	s15, [r3, #4]
 800a4f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a502:	dd21      	ble.n	800a548 <elec_offset_search+0x298>
 800a504:	2301      	movs	r3, #1
 800a506:	e020      	b.n	800a54a <elec_offset_search+0x29a>
 800a508:	30553261 	.word	0x30553261
 800a50c:	3f63a92a 	.word	0x3f63a92a
 800a510:	30553261 	.word	0x30553261
 800a514:	3f43a92a 	.word	0x3f43a92a
 800a518:	358637bd 	.word	0x358637bd
 800a51c:	2000b21c 	.word	0x2000b21c
 800a520:	2000b224 	.word	0x2000b224
 800a524:	42c80000 	.word	0x42c80000
 800a528:	2000b228 	.word	0x2000b228
 800a52c:	2000b230 	.word	0x2000b230
 800a530:	2000b240 	.word	0x2000b240
 800a534:	2000b248 	.word	0x2000b248
 800a538:	2000b220 	.word	0x2000b220
 800a53c:	3ff80000 	.word	0x3ff80000
 800a540:	401c0000 	.word	0x401c0000
 800a544:	40240000 	.word	0x40240000
 800a548:	2300      	movs	r3, #0
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30

        if(P_tol_ok || tick*Ts > 9){
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d115      	bne.n	800a57e <elec_offset_search+0x2ce>
 800a552:	4bab      	ldr	r3, [pc, #684]	; (800a800 <elec_offset_search+0x550>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f7f5 ffbe 	bl	80004d8 <__aeabi_f2d>
 800a55c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a7e0 <elec_offset_search+0x530>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f6 f811 	bl	8000588 <__aeabi_dmul>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4610      	mov	r0, r2
 800a56c:	4619      	mov	r1, r3
 800a56e:	f04f 0200 	mov.w	r2, #0
 800a572:	4ba4      	ldr	r3, [pc, #656]	; (800a804 <elec_offset_search+0x554>)
 800a574:	f7f6 fa98 	bl	8000aa8 <__aeabi_dcmpgt>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d07c      	beq.n	800a678 <elec_offset_search+0x3c8>
            elec_search_status = 3;
 800a57e:	4ba2      	ldr	r3, [pc, #648]	; (800a808 <elec_offset_search+0x558>)
 800a580:	2203      	movs	r2, #3
 800a582:	601a      	str	r2, [r3, #0]

            // Compute no polepairs and enc offset
            
            float n_polepairs = 0.5*(theta_pos[0] + theta_min[0]);
 800a584:	4ba1      	ldr	r3, [pc, #644]	; (800a80c <elec_offset_search+0x55c>)
 800a586:	ed93 7a00 	vldr	s14, [r3]
 800a58a:	4ba1      	ldr	r3, [pc, #644]	; (800a810 <elec_offset_search+0x560>)
 800a58c:	edd3 7a00 	vldr	s15, [r3]
 800a590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a59c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
            n_polepairs = round(n_polepairs);
 800a5a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a2:	f7f5 ff99 	bl	80004d8 <__aeabi_f2d>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	ec43 2b10 	vmov	d0, r2, r3
 800a5ae:	f000 fc79 	bl	800aea4 <round>
 800a5b2:	ec53 2b10 	vmov	r2, r3, d0
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	f7f6 faa7 	bl	8000b0c <__aeabi_d2f>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            float elec_offs = 0.5*(theta_pos[1] + theta_min[1]);
 800a5c2:	4b92      	ldr	r3, [pc, #584]	; (800a80c <elec_offset_search+0x55c>)
 800a5c4:	ed93 7a01 	vldr	s14, [r3, #4]
 800a5c8:	4b91      	ldr	r3, [pc, #580]	; (800a810 <elec_offset_search+0x560>)
 800a5ca:	edd3 7a01 	vldr	s15, [r3, #4]
 800a5ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a5d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            elec_offs = elec_offs * 1.0/n_polepairs;
 800a5de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a5e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            // Round elec offs to closest range
            float pole_div = 360.0*deg2rad/n_polepairs;
 800a5ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f0:	f7f5 ff72 	bl	80004d8 <__aeabi_f2d>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	a17b      	add	r1, pc, #492	; (adr r1, 800a7e8 <elec_offset_search+0x538>)
 800a5fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fe:	f7f6 f8ed 	bl	80007dc <__aeabi_ddiv>
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4610      	mov	r0, r2
 800a608:	4619      	mov	r1, r3
 800a60a:	f7f6 fa7f 	bl	8000b0c <__aeabi_d2f>
 800a60e:	4603      	mov	r3, r0
 800a610:	627b      	str	r3, [r7, #36]	; 0x24
            int no_elec_periods = round(elec_offs/pole_div);
 800a612:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a616:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a61a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a61e:	ee16 0a90 	vmov	r0, s13
 800a622:	f7f5 ff59 	bl	80004d8 <__aeabi_f2d>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	ec43 2b10 	vmov	d0, r2, r3
 800a62e:	f000 fc39 	bl	800aea4 <round>
 800a632:	ec53 2b10 	vmov	r2, r3, d0
 800a636:	4610      	mov	r0, r2
 800a638:	4619      	mov	r1, r3
 800a63a:	f7f6 fa3f 	bl	8000abc <__aeabi_d2iz>
 800a63e:	4603      	mov	r3, r0
 800a640:	623b      	str	r3, [r7, #32]
            elec_offs -= no_elec_periods*pole_div;
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	ee07 3a90 	vmov	s15, r3
 800a648:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a64c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a650:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a654:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a65c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

            out->debug0 = elec_offs*rad2deg;
 800a660:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a664:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800a814 <elec_offset_search+0x564>
 800a668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	edc3 7a03 	vstr	s15, [r3, #12]
            out->debug1 = n_polepairs;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a676:	611a      	str	r2, [r3, #16]


        }

        if(tick*Ts > 8){
 800a678:	4b61      	ldr	r3, [pc, #388]	; (800a800 <elec_offset_search+0x550>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_f2d>
 800a682:	a357      	add	r3, pc, #348	; (adr r3, 800a7e0 <elec_offset_search+0x530>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ff7e 	bl	8000588 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4610      	mov	r0, r2
 800a692:	4619      	mov	r1, r3
 800a694:	f04f 0200 	mov.w	r2, #0
 800a698:	4b5f      	ldr	r3, [pc, #380]	; (800a818 <elec_offset_search+0x568>)
 800a69a:	f7f6 fa05 	bl	8000aa8 <__aeabi_dcmpgt>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d002      	beq.n	800a6aa <elec_offset_search+0x3fa>
            elec_search_status = 10;
 800a6a4:	4b58      	ldr	r3, [pc, #352]	; (800a808 <elec_offset_search+0x558>)
 800a6a6:	220a      	movs	r2, #10
 800a6a8:	601a      	str	r2, [r3, #0]
    //out->debug1 = theta_pos[1];
    //out->debug2 = theta_min[0];
    //out->debug3 = theta_min[1];


    out->debug2 = elec_theta;
 800a6aa:	4b5c      	ldr	r3, [pc, #368]	; (800a81c <elec_offset_search+0x56c>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	615a      	str	r2, [r3, #20]
    //out->debug3 = n_polepairs;


    if(elec_search_status== 1 || elec_search_status == 2){
 800a6b2:	4b55      	ldr	r3, [pc, #340]	; (800a808 <elec_offset_search+0x558>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d003      	beq.n	800a6c2 <elec_offset_search+0x412>
 800a6ba:	4b53      	ldr	r3, [pc, #332]	; (800a808 <elec_offset_search+0x558>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d176      	bne.n	800a7b0 <elec_offset_search+0x500>
        U = 0.3 + 0.05*sinf(elec_theta);
 800a6c2:	4b56      	ldr	r3, [pc, #344]	; (800a81c <elec_offset_search+0x56c>)
 800a6c4:	edd3 7a00 	vldr	s15, [r3]
 800a6c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6cc:	f000 fc30 	bl	800af30 <sinf>
 800a6d0:	ee10 3a10 	vmov	r3, s0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7f5 feff 	bl	80004d8 <__aeabi_f2d>
 800a6da:	a345      	add	r3, pc, #276	; (adr r3, 800a7f0 <elec_offset_search+0x540>)
 800a6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e0:	f7f5 ff52 	bl	8000588 <__aeabi_dmul>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	a342      	add	r3, pc, #264	; (adr r3, 800a7f8 <elec_offset_search+0x548>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	f7f5 fd93 	bl	800021c <__adddf3>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f7f6 fa05 	bl	8000b0c <__aeabi_d2f>
 800a702:	4603      	mov	r3, r0
 800a704:	61fb      	str	r3, [r7, #28]
        V = 0.3 + 0.05*sinf(elec_theta - 120*deg2rad);
 800a706:	4b45      	ldr	r3, [pc, #276]	; (800a81c <elec_offset_search+0x56c>)
 800a708:	edd3 7a00 	vldr	s15, [r3]
 800a70c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a820 <elec_offset_search+0x570>
 800a710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a714:	eeb0 0a67 	vmov.f32	s0, s15
 800a718:	f000 fc0a 	bl	800af30 <sinf>
 800a71c:	ee10 3a10 	vmov	r3, s0
 800a720:	4618      	mov	r0, r3
 800a722:	f7f5 fed9 	bl	80004d8 <__aeabi_f2d>
 800a726:	a332      	add	r3, pc, #200	; (adr r3, 800a7f0 <elec_offset_search+0x540>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f7f5 ff2c 	bl	8000588 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4610      	mov	r0, r2
 800a736:	4619      	mov	r1, r3
 800a738:	a32f      	add	r3, pc, #188	; (adr r3, 800a7f8 <elec_offset_search+0x548>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 fd6d 	bl	800021c <__adddf3>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4610      	mov	r0, r2
 800a748:	4619      	mov	r1, r3
 800a74a:	f7f6 f9df 	bl	8000b0c <__aeabi_d2f>
 800a74e:	4603      	mov	r3, r0
 800a750:	61bb      	str	r3, [r7, #24]
        W = 0.3 + 0.05*sinf(elec_theta + 120*deg2rad);
 800a752:	4b32      	ldr	r3, [pc, #200]	; (800a81c <elec_offset_search+0x56c>)
 800a754:	edd3 7a00 	vldr	s15, [r3]
 800a758:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a820 <elec_offset_search+0x570>
 800a75c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a760:	eeb0 0a67 	vmov.f32	s0, s15
 800a764:	f000 fbe4 	bl	800af30 <sinf>
 800a768:	ee10 3a10 	vmov	r3, s0
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7f5 feb3 	bl	80004d8 <__aeabi_f2d>
 800a772:	a31f      	add	r3, pc, #124	; (adr r3, 800a7f0 <elec_offset_search+0x540>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 ff06 	bl	8000588 <__aeabi_dmul>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4610      	mov	r0, r2
 800a782:	4619      	mov	r1, r3
 800a784:	a31c      	add	r3, pc, #112	; (adr r3, 800a7f8 <elec_offset_search+0x548>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd47 	bl	800021c <__adddf3>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4610      	mov	r0, r2
 800a794:	4619      	mov	r1, r3
 800a796:	f7f6 f9b9 	bl	8000b0c <__aeabi_d2f>
 800a79a:	4603      	mov	r3, r0
 800a79c:	617b      	str	r3, [r7, #20]

        out->phase_U = U;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	69fa      	ldr	r2, [r7, #28]
 800a7a2:	601a      	str	r2, [r3, #0]
        out->phase_V = V;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	69ba      	ldr	r2, [r7, #24]
 800a7a8:	605a      	str	r2, [r3, #4]
        out->phase_W = W;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	609a      	str	r2, [r3, #8]
    }


    // If done or error
    if(elec_search_status == 3 || elec_search_status == 10){
 800a7b0:	4b15      	ldr	r3, [pc, #84]	; (800a808 <elec_offset_search+0x558>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	d003      	beq.n	800a7c0 <elec_offset_search+0x510>
 800a7b8:	4b13      	ldr	r3, [pc, #76]	; (800a808 <elec_offset_search+0x558>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b0a      	cmp	r3, #10
 800a7be:	d10b      	bne.n	800a7d8 <elec_offset_search+0x528>
        out->phase_U = 0.5;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a7c6:	601a      	str	r2, [r3, #0]
        out->phase_V = 0.5;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a7ce:	605a      	str	r2, [r3, #4]
        out->phase_W = 0.5;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a7d6:	609a      	str	r2, [r3, #8]
    }

}
 800a7d8:	bf00      	nop
 800a7da:	3738      	adds	r7, #56	; 0x38
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	30553261 	.word	0x30553261
 800a7e4:	3f43a92a 	.word	0x3f43a92a
 800a7e8:	51000000 	.word	0x51000000
 800a7ec:	401921fb 	.word	0x401921fb
 800a7f0:	9999999a 	.word	0x9999999a
 800a7f4:	3fa99999 	.word	0x3fa99999
 800a7f8:	33333333 	.word	0x33333333
 800a7fc:	3fd33333 	.word	0x3fd33333
 800a800:	2000b224 	.word	0x2000b224
 800a804:	40220000 	.word	0x40220000
 800a808:	2000b21c 	.word	0x2000b21c
 800a80c:	2000b228 	.word	0x2000b228
 800a810:	2000b240 	.word	0x2000b240
 800a814:	3c8efa35 	.word	0x3c8efa35
 800a818:	40200000 	.word	0x40200000
 800a81c:	2000b220 	.word	0x2000b220
 800a820:	40060a92 	.word	0x40060a92

0800a824 <current_ctrl>:





volatile void current_ctrl(CurrCtrl_IN * in, CurrCtrl_OUT * out){
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]

    

    elec_offset_search(in,out);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f7ff fd3d 	bl	800a2b0 <elec_offset_search>


}
 800a836:	bf00      	nop
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <mat_times_vec2>:
    res[1] = -1*mat[1]*1/determ;
    res[2] = -1*mat[2]*1/determ;
    res[3] = mat[0]*1/determ;
}

void mat_times_vec2(float* mat, float* vec, float* res){
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
    /* 2x2 matrix times a 2x1 vector*/

    res[0] = mat[0]*vec[0] + mat[1]*vec[1];
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	ed93 7a00 	vldr	s14, [r3]
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	edd3 7a00 	vldr	s15, [r3]
 800a856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3304      	adds	r3, #4
 800a85e:	edd3 6a00 	vldr	s13, [r3]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	3304      	adds	r3, #4
 800a866:	edd3 7a00 	vldr	s15, [r3]
 800a86a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a86e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	edc3 7a00 	vstr	s15, [r3]
    res[1] = mat[2]*vec[0] + mat[3]*vec[1];
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3308      	adds	r3, #8
 800a87c:	ed93 7a00 	vldr	s14, [r3]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	edd3 7a00 	vldr	s15, [r3]
 800a886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	330c      	adds	r3, #12
 800a88e:	edd3 6a00 	vldr	s13, [r3]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	3304      	adds	r3, #4
 800a896:	edd3 7a00 	vldr	s15, [r3]
 800a89a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a6:	edc3 7a00 	vstr	s15, [r3]
}
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <mat_times_mat2>:

void mat_times_mat2(float*mat1, float*mat2, float* res){
 800a8b6:	b480      	push	{r7}
 800a8b8:	b085      	sub	sp, #20
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
    /* 2x2 matrix times a 2x2 matrix*/

    res[0] = mat1[0]*mat2[0] + mat1[1]*mat2[2];
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	ed93 7a00 	vldr	s14, [r3]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	edd3 7a00 	vldr	s15, [r3]
 800a8ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	edd3 6a00 	vldr	s13, [r3]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	3308      	adds	r3, #8
 800a8de:	edd3 7a00 	vldr	s15, [r3]
 800a8e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	edc3 7a00 	vstr	s15, [r3]
    res[1] = mat1[0]*mat2[1] + mat1[1]*mat2[3];
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	ed93 7a00 	vldr	s14, [r3]
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	edd3 7a00 	vldr	s15, [r3]
 800a8fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3304      	adds	r3, #4
 800a906:	edd3 6a00 	vldr	s13, [r3]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	330c      	adds	r3, #12
 800a90e:	edd3 7a00 	vldr	s15, [r3]
 800a912:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3304      	adds	r3, #4
 800a91a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a91e:	edc3 7a00 	vstr	s15, [r3]

    res[2] = mat1[2]*mat2[0] + mat1[3]*mat2[1];
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	3308      	adds	r3, #8
 800a926:	ed93 7a00 	vldr	s14, [r3]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	edd3 7a00 	vldr	s15, [r3]
 800a930:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	330c      	adds	r3, #12
 800a938:	edd3 6a00 	vldr	s13, [r3]
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	3304      	adds	r3, #4
 800a940:	edd3 7a00 	vldr	s15, [r3]
 800a944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3308      	adds	r3, #8
 800a94c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a950:	edc3 7a00 	vstr	s15, [r3]
    res[3] = mat1[2]*mat2[1] + mat1[3]*mat2[3];
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3308      	adds	r3, #8
 800a958:	ed93 7a00 	vldr	s14, [r3]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3304      	adds	r3, #4
 800a960:	edd3 7a00 	vldr	s15, [r3]
 800a964:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	330c      	adds	r3, #12
 800a96c:	edd3 6a00 	vldr	s13, [r3]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	330c      	adds	r3, #12
 800a974:	edd3 7a00 	vldr	s15, [r3]
 800a978:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	330c      	adds	r3, #12
 800a980:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a984:	edc3 7a00 	vstr	s15, [r3]

}
 800a988:	bf00      	nop
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <compute_K2>:


void compute_K2(float* P, float* phi, float lam, float* K){
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	ed87 0a01 	vstr	s0, [r7, #4]
 800a9a2:	603a      	str	r2, [r7, #0]
    /* Compuites the "Kalman gain" used in RLS*/

    mat_times_vec2(P,phi,K);
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7ff ff48 	bl	800a83e <mat_times_vec2>

    float gain;

    gain = lam + phi[0]*K[0] + phi[1]*K[1];
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	ed93 7a00 	vldr	s14, [r3]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	edd3 7a00 	vldr	s15, [r3]
 800a9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9be:	edd7 7a01 	vldr	s15, [r7, #4]
 800a9c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	edd3 6a00 	vldr	s13, [r3]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	edd3 7a00 	vldr	s15, [r3]
 800a9d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9de:	edc7 7a05 	vstr	s15, [r7, #20]

    K[0] *= 1/gain;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	ed93 7a00 	vldr	s14, [r3]
 800a9e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a9ec:	edd7 6a05 	vldr	s13, [r7, #20]
 800a9f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a9f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	edc3 7a00 	vstr	s15, [r3]
    K[1] *= 1/gain;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	3304      	adds	r3, #4
 800aa02:	ed93 7a00 	vldr	s14, [r3]
 800aa06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aa0a:	edd7 6a05 	vldr	s13, [r7, #20]
 800aa0e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	3304      	adds	r3, #4
 800aa16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1a:	edc3 7a00 	vstr	s15, [r3]
}
 800aa1e:	bf00      	nop
 800aa20:	3718      	adds	r7, #24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <compute_P>:


void compute_P(float* K,float* phi, float* P, float lam, float* P_res){
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b08a      	sub	sp, #40	; 0x28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6178      	str	r0, [r7, #20]
 800aa2e:	6139      	str	r1, [r7, #16]
 800aa30:	60fa      	str	r2, [r7, #12]
 800aa32:	ed87 0a02 	vstr	s0, [r7, #8]
 800aa36:	607b      	str	r3, [r7, #4]
    /* Computes the covariance matrix P*/

    float tmp_mat[4];

    tmp_mat[0] = 1 - K[0]*phi[0];
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	ed93 7a00 	vldr	s14, [r3]
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	edd3 7a00 	vldr	s15, [r3]
 800aa44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa50:	edc7 7a06 	vstr	s15, [r7, #24]
    tmp_mat[1] = - K[0]*phi[1];
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	edd3 7a00 	vldr	s15, [r3]
 800aa5a:	eeb1 7a67 	vneg.f32	s14, s15
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	3304      	adds	r3, #4
 800aa62:	edd3 7a00 	vldr	s15, [r3]
 800aa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa6a:	edc7 7a07 	vstr	s15, [r7, #28]

    tmp_mat[2] = - K[1]*phi[0];
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3304      	adds	r3, #4
 800aa72:	edd3 7a00 	vldr	s15, [r3]
 800aa76:	eeb1 7a67 	vneg.f32	s14, s15
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	edd3 7a00 	vldr	s15, [r3]
 800aa80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa84:	edc7 7a08 	vstr	s15, [r7, #32]
    tmp_mat[3] = 1 - K[1]*phi[1];
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	ed93 7a00 	vldr	s14, [r3]
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	3304      	adds	r3, #4
 800aa94:	edd3 7a00 	vldr	s15, [r3]
 800aa98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaa4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    mat_times_mat2(tmp_mat,P,P_res);
 800aaa8:	f107 0318 	add.w	r3, r7, #24
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff ff00 	bl	800a8b6 <mat_times_mat2>

    P_res[0] *= 1/lam;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	ed93 7a00 	vldr	s14, [r3]
 800aabc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aac0:	edd7 6a02 	vldr	s13, [r7, #8]
 800aac4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800aac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	edc3 7a00 	vstr	s15, [r3]
    P_res[1] *= 1/lam;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3304      	adds	r3, #4
 800aad6:	ed93 7a00 	vldr	s14, [r3]
 800aada:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aade:	edd7 6a02 	vldr	s13, [r7, #8]
 800aae2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	3304      	adds	r3, #4
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc3 7a00 	vstr	s15, [r3]
    P_res[2] *= 1/lam;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	3308      	adds	r3, #8
 800aaf6:	ed93 7a00 	vldr	s14, [r3]
 800aafa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800aafe:	edd7 6a02 	vldr	s13, [r7, #8]
 800ab02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	3308      	adds	r3, #8
 800ab0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0e:	edc3 7a00 	vstr	s15, [r3]
    P_res[3] *= 1/lam;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	330c      	adds	r3, #12
 800ab16:	ed93 7a00 	vldr	s14, [r3]
 800ab1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ab1e:	edd7 6a02 	vldr	s13, [r7, #8]
 800ab22:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	edc3 7a00 	vstr	s15, [r3]
}
 800ab32:	bf00      	nop
 800ab34:	3728      	adds	r7, #40	; 0x28
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <compute_theta>:

void compute_theta(float* K, float* phi, float* theta, float y, float* theta_plus){
 800ab3a:	b480      	push	{r7}
 800ab3c:	b089      	sub	sp, #36	; 0x24
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6178      	str	r0, [r7, #20]
 800ab42:	6139      	str	r1, [r7, #16]
 800ab44:	60fa      	str	r2, [r7, #12]
 800ab46:	ed87 0a02 	vstr	s0, [r7, #8]
 800ab4a:	607b      	str	r3, [r7, #4]
    /* Computes the updated theta vecotr*/

    float eps;

    eps = y - (phi[0]*theta[0] + phi[1]*theta[1]);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	ed93 7a00 	vldr	s14, [r3]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	edd3 7a00 	vldr	s15, [r3]
 800ab58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	edd3 6a00 	vldr	s13, [r3]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	3304      	adds	r3, #4
 800ab68:	edd3 7a00 	vldr	s15, [r3]
 800ab6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab74:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab7c:	edc7 7a07 	vstr	s15, [r7, #28]

    theta_plus[0] = theta[0] + K[0]*eps;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	ed93 7a00 	vldr	s14, [r3]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	edd3 6a00 	vldr	s13, [r3]
 800ab8c:	edd7 7a07 	vldr	s15, [r7, #28]
 800ab90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	edc3 7a00 	vstr	s15, [r3]
    theta_plus[1] = theta[1] + K[1]*eps;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3304      	adds	r3, #4
 800aba2:	ed93 7a00 	vldr	s14, [r3]
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	3304      	adds	r3, #4
 800abaa:	edd3 6a00 	vldr	s13, [r3]
 800abae:	edd7 7a07 	vldr	s15, [r7, #28]
 800abb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3304      	adds	r3, #4
 800abba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abbe:	edc3 7a00 	vstr	s15, [r3]
}
 800abc2:	bf00      	nop
 800abc4:	3724      	adds	r7, #36	; 0x24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
	...

0800abd0 <rls_step>:


void rls_step(float* P, float* theta, float* phi, float y){
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08e      	sub	sp, #56	; 0x38
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	ed87 0a00 	vstr	s0, [r7]
    float K[2];
    float lam = 0.999;
 800abe0:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <rls_step+0x84>)
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
    float theta_plus[2];
    float Pp[4];

    compute_K2(P,phi,lam,K);
 800abe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abe8:	461a      	mov	r2, r3
 800abea:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fecf 	bl	800a994 <compute_K2>
    compute_P(K,phi,P,lam,Pp);
 800abf6:	f107 0314 	add.w	r3, r7, #20
 800abfa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800abfe:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	6879      	ldr	r1, [r7, #4]
 800ac06:	f7ff ff0e 	bl	800aa26 <compute_P>
    compute_theta(K,phi,theta,y,theta_plus);
 800ac0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac0e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ac12:	ed97 0a00 	vldr	s0, [r7]
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	f7ff ff8e 	bl	800ab3a <compute_theta>

    theta[0] = theta_plus[0];
 800ac1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	601a      	str	r2, [r3, #0]
    theta[1] = theta_plus[1];
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	3304      	adds	r3, #4
 800ac28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac2a:	601a      	str	r2, [r3, #0]

    P[0] = Pp[0];
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	601a      	str	r2, [r3, #0]
    P[1] = Pp[1];
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3304      	adds	r3, #4
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	601a      	str	r2, [r3, #0]
    P[2] = Pp[2];
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3308      	adds	r3, #8
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	601a      	str	r2, [r3, #0]
    P[3] = Pp[3];
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	330c      	adds	r3, #12
 800ac46:	6a3a      	ldr	r2, [r7, #32]
 800ac48:	601a      	str	r2, [r3, #0]
}
 800ac4a:	bf00      	nop
 800ac4c:	3738      	adds	r7, #56	; 0x38
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	3f7fbe77 	.word	0x3f7fbe77

0800ac58 <reset_rls>:

void reset_rls(float* P, float* theta, float Pinit){
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	ed87 0a01 	vstr	s0, [r7, #4]
    P[0] = Pinit;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	601a      	str	r2, [r3, #0]
    P[3] = Pinit;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	601a      	str	r2, [r3, #0]
    P[1] = 0;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3304      	adds	r3, #4
 800ac78:	f04f 0200 	mov.w	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
    P[2] = 0;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3308      	adds	r3, #8
 800ac82:	f04f 0200 	mov.w	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]

    theta[0] = 0;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f04f 0200 	mov.w	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
    theta[1] = 0;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3304      	adds	r3, #4
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	601a      	str	r2, [r3, #0]
}
 800ac9a:	bf00      	nop
 800ac9c:	3714      	adds	r7, #20
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
	...

0800aca8 <__libc_init_array>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4d0d      	ldr	r5, [pc, #52]	; (800ace0 <__libc_init_array+0x38>)
 800acac:	4c0d      	ldr	r4, [pc, #52]	; (800ace4 <__libc_init_array+0x3c>)
 800acae:	1b64      	subs	r4, r4, r5
 800acb0:	10a4      	asrs	r4, r4, #2
 800acb2:	2600      	movs	r6, #0
 800acb4:	42a6      	cmp	r6, r4
 800acb6:	d109      	bne.n	800accc <__libc_init_array+0x24>
 800acb8:	4d0b      	ldr	r5, [pc, #44]	; (800ace8 <__libc_init_array+0x40>)
 800acba:	4c0c      	ldr	r4, [pc, #48]	; (800acec <__libc_init_array+0x44>)
 800acbc:	f000 fe94 	bl	800b9e8 <_init>
 800acc0:	1b64      	subs	r4, r4, r5
 800acc2:	10a4      	asrs	r4, r4, #2
 800acc4:	2600      	movs	r6, #0
 800acc6:	42a6      	cmp	r6, r4
 800acc8:	d105      	bne.n	800acd6 <__libc_init_array+0x2e>
 800acca:	bd70      	pop	{r4, r5, r6, pc}
 800accc:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd0:	4798      	blx	r3
 800acd2:	3601      	adds	r6, #1
 800acd4:	e7ee      	b.n	800acb4 <__libc_init_array+0xc>
 800acd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800acda:	4798      	blx	r3
 800acdc:	3601      	adds	r6, #1
 800acde:	e7f2      	b.n	800acc6 <__libc_init_array+0x1e>
 800ace0:	0800bf04 	.word	0x0800bf04
 800ace4:	0800bf04 	.word	0x0800bf04
 800ace8:	0800bf04 	.word	0x0800bf04
 800acec:	0800bf08 	.word	0x0800bf08

0800acf0 <__retarget_lock_acquire_recursive>:
 800acf0:	4770      	bx	lr

0800acf2 <__retarget_lock_release_recursive>:
 800acf2:	4770      	bx	lr

0800acf4 <memcpy>:
 800acf4:	440a      	add	r2, r1
 800acf6:	4291      	cmp	r1, r2
 800acf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acfc:	d100      	bne.n	800ad00 <memcpy+0xc>
 800acfe:	4770      	bx	lr
 800ad00:	b510      	push	{r4, lr}
 800ad02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad0a:	4291      	cmp	r1, r2
 800ad0c:	d1f9      	bne.n	800ad02 <memcpy+0xe>
 800ad0e:	bd10      	pop	{r4, pc}

0800ad10 <memset>:
 800ad10:	4402      	add	r2, r0
 800ad12:	4603      	mov	r3, r0
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d100      	bne.n	800ad1a <memset+0xa>
 800ad18:	4770      	bx	lr
 800ad1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad1e:	e7f9      	b.n	800ad14 <memset+0x4>

0800ad20 <cleanup_glue>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	460c      	mov	r4, r1
 800ad24:	6809      	ldr	r1, [r1, #0]
 800ad26:	4605      	mov	r5, r0
 800ad28:	b109      	cbz	r1, 800ad2e <cleanup_glue+0xe>
 800ad2a:	f7ff fff9 	bl	800ad20 <cleanup_glue>
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4628      	mov	r0, r5
 800ad32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad36:	f000 b869 	b.w	800ae0c <_free_r>
	...

0800ad3c <_reclaim_reent>:
 800ad3c:	4b2c      	ldr	r3, [pc, #176]	; (800adf0 <_reclaim_reent+0xb4>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4283      	cmp	r3, r0
 800ad42:	b570      	push	{r4, r5, r6, lr}
 800ad44:	4604      	mov	r4, r0
 800ad46:	d051      	beq.n	800adec <_reclaim_reent+0xb0>
 800ad48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ad4a:	b143      	cbz	r3, 800ad5e <_reclaim_reent+0x22>
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d14a      	bne.n	800ade8 <_reclaim_reent+0xac>
 800ad52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad54:	6819      	ldr	r1, [r3, #0]
 800ad56:	b111      	cbz	r1, 800ad5e <_reclaim_reent+0x22>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 f857 	bl	800ae0c <_free_r>
 800ad5e:	6961      	ldr	r1, [r4, #20]
 800ad60:	b111      	cbz	r1, 800ad68 <_reclaim_reent+0x2c>
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f852 	bl	800ae0c <_free_r>
 800ad68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad6a:	b111      	cbz	r1, 800ad72 <_reclaim_reent+0x36>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 f84d 	bl	800ae0c <_free_r>
 800ad72:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad74:	b111      	cbz	r1, 800ad7c <_reclaim_reent+0x40>
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 f848 	bl	800ae0c <_free_r>
 800ad7c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ad7e:	b111      	cbz	r1, 800ad86 <_reclaim_reent+0x4a>
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 f843 	bl	800ae0c <_free_r>
 800ad86:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ad88:	b111      	cbz	r1, 800ad90 <_reclaim_reent+0x54>
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f000 f83e 	bl	800ae0c <_free_r>
 800ad90:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ad92:	b111      	cbz	r1, 800ad9a <_reclaim_reent+0x5e>
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 f839 	bl	800ae0c <_free_r>
 800ad9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ad9c:	b111      	cbz	r1, 800ada4 <_reclaim_reent+0x68>
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f834 	bl	800ae0c <_free_r>
 800ada4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ada6:	b111      	cbz	r1, 800adae <_reclaim_reent+0x72>
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 f82f 	bl	800ae0c <_free_r>
 800adae:	69a3      	ldr	r3, [r4, #24]
 800adb0:	b1e3      	cbz	r3, 800adec <_reclaim_reent+0xb0>
 800adb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adb4:	4620      	mov	r0, r4
 800adb6:	4798      	blx	r3
 800adb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800adba:	b1b9      	cbz	r1, 800adec <_reclaim_reent+0xb0>
 800adbc:	4620      	mov	r0, r4
 800adbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800adc2:	f7ff bfad 	b.w	800ad20 <cleanup_glue>
 800adc6:	5949      	ldr	r1, [r1, r5]
 800adc8:	b941      	cbnz	r1, 800addc <_reclaim_reent+0xa0>
 800adca:	3504      	adds	r5, #4
 800adcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adce:	2d80      	cmp	r5, #128	; 0x80
 800add0:	68d9      	ldr	r1, [r3, #12]
 800add2:	d1f8      	bne.n	800adc6 <_reclaim_reent+0x8a>
 800add4:	4620      	mov	r0, r4
 800add6:	f000 f819 	bl	800ae0c <_free_r>
 800adda:	e7ba      	b.n	800ad52 <_reclaim_reent+0x16>
 800addc:	680e      	ldr	r6, [r1, #0]
 800adde:	4620      	mov	r0, r4
 800ade0:	f000 f814 	bl	800ae0c <_free_r>
 800ade4:	4631      	mov	r1, r6
 800ade6:	e7ef      	b.n	800adc8 <_reclaim_reent+0x8c>
 800ade8:	2500      	movs	r5, #0
 800adea:	e7ef      	b.n	800adcc <_reclaim_reent+0x90>
 800adec:	bd70      	pop	{r4, r5, r6, pc}
 800adee:	bf00      	nop
 800adf0:	20000014 	.word	0x20000014

0800adf4 <__malloc_lock>:
 800adf4:	4801      	ldr	r0, [pc, #4]	; (800adfc <__malloc_lock+0x8>)
 800adf6:	f7ff bf7b 	b.w	800acf0 <__retarget_lock_acquire_recursive>
 800adfa:	bf00      	nop
 800adfc:	2000b258 	.word	0x2000b258

0800ae00 <__malloc_unlock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__malloc_unlock+0x8>)
 800ae02:	f7ff bf76 	b.w	800acf2 <__retarget_lock_release_recursive>
 800ae06:	bf00      	nop
 800ae08:	2000b258 	.word	0x2000b258

0800ae0c <_free_r>:
 800ae0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	d044      	beq.n	800ae9c <_free_r+0x90>
 800ae12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae16:	9001      	str	r0, [sp, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae1e:	bfb8      	it	lt
 800ae20:	18e4      	addlt	r4, r4, r3
 800ae22:	f7ff ffe7 	bl	800adf4 <__malloc_lock>
 800ae26:	4a1e      	ldr	r2, [pc, #120]	; (800aea0 <_free_r+0x94>)
 800ae28:	9801      	ldr	r0, [sp, #4]
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	b933      	cbnz	r3, 800ae3c <_free_r+0x30>
 800ae2e:	6063      	str	r3, [r4, #4]
 800ae30:	6014      	str	r4, [r2, #0]
 800ae32:	b003      	add	sp, #12
 800ae34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae38:	f7ff bfe2 	b.w	800ae00 <__malloc_unlock>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d908      	bls.n	800ae52 <_free_r+0x46>
 800ae40:	6825      	ldr	r5, [r4, #0]
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf01      	itttt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	1949      	addeq	r1, r1, r5
 800ae4e:	6021      	streq	r1, [r4, #0]
 800ae50:	e7ed      	b.n	800ae2e <_free_r+0x22>
 800ae52:	461a      	mov	r2, r3
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b10b      	cbz	r3, 800ae5c <_free_r+0x50>
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d9fa      	bls.n	800ae52 <_free_r+0x46>
 800ae5c:	6811      	ldr	r1, [r2, #0]
 800ae5e:	1855      	adds	r5, r2, r1
 800ae60:	42a5      	cmp	r5, r4
 800ae62:	d10b      	bne.n	800ae7c <_free_r+0x70>
 800ae64:	6824      	ldr	r4, [r4, #0]
 800ae66:	4421      	add	r1, r4
 800ae68:	1854      	adds	r4, r2, r1
 800ae6a:	42a3      	cmp	r3, r4
 800ae6c:	6011      	str	r1, [r2, #0]
 800ae6e:	d1e0      	bne.n	800ae32 <_free_r+0x26>
 800ae70:	681c      	ldr	r4, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	6053      	str	r3, [r2, #4]
 800ae76:	4421      	add	r1, r4
 800ae78:	6011      	str	r1, [r2, #0]
 800ae7a:	e7da      	b.n	800ae32 <_free_r+0x26>
 800ae7c:	d902      	bls.n	800ae84 <_free_r+0x78>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	e7d6      	b.n	800ae32 <_free_r+0x26>
 800ae84:	6825      	ldr	r5, [r4, #0]
 800ae86:	1961      	adds	r1, r4, r5
 800ae88:	428b      	cmp	r3, r1
 800ae8a:	bf04      	itt	eq
 800ae8c:	6819      	ldreq	r1, [r3, #0]
 800ae8e:	685b      	ldreq	r3, [r3, #4]
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	bf04      	itt	eq
 800ae94:	1949      	addeq	r1, r1, r5
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	6054      	str	r4, [r2, #4]
 800ae9a:	e7ca      	b.n	800ae32 <_free_r+0x26>
 800ae9c:	b003      	add	sp, #12
 800ae9e:	bd30      	pop	{r4, r5, pc}
 800aea0:	2000b25c 	.word	0x2000b25c

0800aea4 <round>:
 800aea4:	ec51 0b10 	vmov	r0, r1, d0
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800aeae:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800aeb2:	2c13      	cmp	r4, #19
 800aeb4:	ee10 2a10 	vmov	r2, s0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	dc19      	bgt.n	800aef0 <round+0x4c>
 800aebc:	2c00      	cmp	r4, #0
 800aebe:	da09      	bge.n	800aed4 <round+0x30>
 800aec0:	3401      	adds	r4, #1
 800aec2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800aec6:	d103      	bne.n	800aed0 <round+0x2c>
 800aec8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aecc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aed0:	2200      	movs	r2, #0
 800aed2:	e028      	b.n	800af26 <round+0x82>
 800aed4:	4d15      	ldr	r5, [pc, #84]	; (800af2c <round+0x88>)
 800aed6:	4125      	asrs	r5, r4
 800aed8:	ea01 0605 	and.w	r6, r1, r5
 800aedc:	4332      	orrs	r2, r6
 800aede:	d00e      	beq.n	800aefe <round+0x5a>
 800aee0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aee4:	fa42 f404 	asr.w	r4, r2, r4
 800aee8:	4423      	add	r3, r4
 800aeea:	ea23 0305 	bic.w	r3, r3, r5
 800aeee:	e7ef      	b.n	800aed0 <round+0x2c>
 800aef0:	2c33      	cmp	r4, #51	; 0x33
 800aef2:	dd07      	ble.n	800af04 <round+0x60>
 800aef4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aef8:	d101      	bne.n	800aefe <round+0x5a>
 800aefa:	f7f5 f98f 	bl	800021c <__adddf3>
 800aefe:	ec41 0b10 	vmov	d0, r0, r1
 800af02:	bd70      	pop	{r4, r5, r6, pc}
 800af04:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800af08:	f04f 35ff 	mov.w	r5, #4294967295
 800af0c:	40f5      	lsrs	r5, r6
 800af0e:	4228      	tst	r0, r5
 800af10:	d0f5      	beq.n	800aefe <round+0x5a>
 800af12:	2101      	movs	r1, #1
 800af14:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800af18:	fa01 f404 	lsl.w	r4, r1, r4
 800af1c:	1912      	adds	r2, r2, r4
 800af1e:	bf28      	it	cs
 800af20:	185b      	addcs	r3, r3, r1
 800af22:	ea22 0205 	bic.w	r2, r2, r5
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	e7e8      	b.n	800aefe <round+0x5a>
 800af2c:	000fffff 	.word	0x000fffff

0800af30 <sinf>:
 800af30:	ee10 3a10 	vmov	r3, s0
 800af34:	b507      	push	{r0, r1, r2, lr}
 800af36:	4a1f      	ldr	r2, [pc, #124]	; (800afb4 <sinf+0x84>)
 800af38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af3c:	4293      	cmp	r3, r2
 800af3e:	dc07      	bgt.n	800af50 <sinf+0x20>
 800af40:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800afb8 <sinf+0x88>
 800af44:	2000      	movs	r0, #0
 800af46:	b003      	add	sp, #12
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	f000 bc48 	b.w	800b7e0 <__kernel_sinf>
 800af50:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af54:	db04      	blt.n	800af60 <sinf+0x30>
 800af56:	ee30 0a40 	vsub.f32	s0, s0, s0
 800af5a:	b003      	add	sp, #12
 800af5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800af60:	4668      	mov	r0, sp
 800af62:	f000 f82b 	bl	800afbc <__ieee754_rem_pio2f>
 800af66:	f000 0003 	and.w	r0, r0, #3
 800af6a:	2801      	cmp	r0, #1
 800af6c:	d00a      	beq.n	800af84 <sinf+0x54>
 800af6e:	2802      	cmp	r0, #2
 800af70:	d00f      	beq.n	800af92 <sinf+0x62>
 800af72:	b9c0      	cbnz	r0, 800afa6 <sinf+0x76>
 800af74:	eddd 0a01 	vldr	s1, [sp, #4]
 800af78:	ed9d 0a00 	vldr	s0, [sp]
 800af7c:	2001      	movs	r0, #1
 800af7e:	f000 fc2f 	bl	800b7e0 <__kernel_sinf>
 800af82:	e7ea      	b.n	800af5a <sinf+0x2a>
 800af84:	eddd 0a01 	vldr	s1, [sp, #4]
 800af88:	ed9d 0a00 	vldr	s0, [sp]
 800af8c:	f000 f952 	bl	800b234 <__kernel_cosf>
 800af90:	e7e3      	b.n	800af5a <sinf+0x2a>
 800af92:	eddd 0a01 	vldr	s1, [sp, #4]
 800af96:	ed9d 0a00 	vldr	s0, [sp]
 800af9a:	2001      	movs	r0, #1
 800af9c:	f000 fc20 	bl	800b7e0 <__kernel_sinf>
 800afa0:	eeb1 0a40 	vneg.f32	s0, s0
 800afa4:	e7d9      	b.n	800af5a <sinf+0x2a>
 800afa6:	eddd 0a01 	vldr	s1, [sp, #4]
 800afaa:	ed9d 0a00 	vldr	s0, [sp]
 800afae:	f000 f941 	bl	800b234 <__kernel_cosf>
 800afb2:	e7f5      	b.n	800afa0 <sinf+0x70>
 800afb4:	3f490fd8 	.word	0x3f490fd8
 800afb8:	00000000 	.word	0x00000000

0800afbc <__ieee754_rem_pio2f>:
 800afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afbe:	ee10 6a10 	vmov	r6, s0
 800afc2:	4b8e      	ldr	r3, [pc, #568]	; (800b1fc <__ieee754_rem_pio2f+0x240>)
 800afc4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800afc8:	429d      	cmp	r5, r3
 800afca:	b087      	sub	sp, #28
 800afcc:	eef0 7a40 	vmov.f32	s15, s0
 800afd0:	4604      	mov	r4, r0
 800afd2:	dc05      	bgt.n	800afe0 <__ieee754_rem_pio2f+0x24>
 800afd4:	2300      	movs	r3, #0
 800afd6:	ed80 0a00 	vstr	s0, [r0]
 800afda:	6043      	str	r3, [r0, #4]
 800afdc:	2000      	movs	r0, #0
 800afde:	e01a      	b.n	800b016 <__ieee754_rem_pio2f+0x5a>
 800afe0:	4b87      	ldr	r3, [pc, #540]	; (800b200 <__ieee754_rem_pio2f+0x244>)
 800afe2:	429d      	cmp	r5, r3
 800afe4:	dc46      	bgt.n	800b074 <__ieee754_rem_pio2f+0xb8>
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b204 <__ieee754_rem_pio2f+0x248>
 800afec:	4b86      	ldr	r3, [pc, #536]	; (800b208 <__ieee754_rem_pio2f+0x24c>)
 800afee:	f025 050f 	bic.w	r5, r5, #15
 800aff2:	dd1f      	ble.n	800b034 <__ieee754_rem_pio2f+0x78>
 800aff4:	429d      	cmp	r5, r3
 800aff6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800affa:	d00e      	beq.n	800b01a <__ieee754_rem_pio2f+0x5e>
 800affc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b20c <__ieee754_rem_pio2f+0x250>
 800b000:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b004:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b008:	ed80 0a00 	vstr	s0, [r0]
 800b00c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b010:	2001      	movs	r0, #1
 800b012:	edc4 7a01 	vstr	s15, [r4, #4]
 800b016:	b007      	add	sp, #28
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b01a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b210 <__ieee754_rem_pio2f+0x254>
 800b01e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b214 <__ieee754_rem_pio2f+0x258>
 800b022:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b026:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b02a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b02e:	edc0 6a00 	vstr	s13, [r0]
 800b032:	e7eb      	b.n	800b00c <__ieee754_rem_pio2f+0x50>
 800b034:	429d      	cmp	r5, r3
 800b036:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b03a:	d00e      	beq.n	800b05a <__ieee754_rem_pio2f+0x9e>
 800b03c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b20c <__ieee754_rem_pio2f+0x250>
 800b040:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b044:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b048:	ed80 0a00 	vstr	s0, [r0]
 800b04c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	edc4 7a01 	vstr	s15, [r4, #4]
 800b058:	e7dd      	b.n	800b016 <__ieee754_rem_pio2f+0x5a>
 800b05a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b210 <__ieee754_rem_pio2f+0x254>
 800b05e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b214 <__ieee754_rem_pio2f+0x258>
 800b062:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b066:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b06a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b06e:	edc0 6a00 	vstr	s13, [r0]
 800b072:	e7eb      	b.n	800b04c <__ieee754_rem_pio2f+0x90>
 800b074:	4b68      	ldr	r3, [pc, #416]	; (800b218 <__ieee754_rem_pio2f+0x25c>)
 800b076:	429d      	cmp	r5, r3
 800b078:	dc72      	bgt.n	800b160 <__ieee754_rem_pio2f+0x1a4>
 800b07a:	f000 fbf9 	bl	800b870 <fabsf>
 800b07e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b21c <__ieee754_rem_pio2f+0x260>
 800b082:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b086:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b08a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b08e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b092:	ee17 0a90 	vmov	r0, s15
 800b096:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b204 <__ieee754_rem_pio2f+0x248>
 800b09a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b09e:	281f      	cmp	r0, #31
 800b0a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b20c <__ieee754_rem_pio2f+0x250>
 800b0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a8:	eeb1 6a47 	vneg.f32	s12, s14
 800b0ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b0b0:	ee16 2a90 	vmov	r2, s13
 800b0b4:	dc1c      	bgt.n	800b0f0 <__ieee754_rem_pio2f+0x134>
 800b0b6:	495a      	ldr	r1, [pc, #360]	; (800b220 <__ieee754_rem_pio2f+0x264>)
 800b0b8:	1e47      	subs	r7, r0, #1
 800b0ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b0be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b0c2:	428b      	cmp	r3, r1
 800b0c4:	d014      	beq.n	800b0f0 <__ieee754_rem_pio2f+0x134>
 800b0c6:	6022      	str	r2, [r4, #0]
 800b0c8:	ed94 7a00 	vldr	s14, [r4]
 800b0cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b0d0:	2e00      	cmp	r6, #0
 800b0d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0d6:	ed84 0a01 	vstr	s0, [r4, #4]
 800b0da:	da9c      	bge.n	800b016 <__ieee754_rem_pio2f+0x5a>
 800b0dc:	eeb1 7a47 	vneg.f32	s14, s14
 800b0e0:	eeb1 0a40 	vneg.f32	s0, s0
 800b0e4:	ed84 7a00 	vstr	s14, [r4]
 800b0e8:	ed84 0a01 	vstr	s0, [r4, #4]
 800b0ec:	4240      	negs	r0, r0
 800b0ee:	e792      	b.n	800b016 <__ieee754_rem_pio2f+0x5a>
 800b0f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b0f4:	15eb      	asrs	r3, r5, #23
 800b0f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b0fa:	2d08      	cmp	r5, #8
 800b0fc:	dde3      	ble.n	800b0c6 <__ieee754_rem_pio2f+0x10a>
 800b0fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b210 <__ieee754_rem_pio2f+0x254>
 800b102:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b214 <__ieee754_rem_pio2f+0x258>
 800b106:	eef0 6a40 	vmov.f32	s13, s0
 800b10a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b10e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b112:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b116:	eef0 7a40 	vmov.f32	s15, s0
 800b11a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b11e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b122:	ee15 2a90 	vmov	r2, s11
 800b126:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b12a:	1a5b      	subs	r3, r3, r1
 800b12c:	2b19      	cmp	r3, #25
 800b12e:	dc04      	bgt.n	800b13a <__ieee754_rem_pio2f+0x17e>
 800b130:	edc4 5a00 	vstr	s11, [r4]
 800b134:	eeb0 0a66 	vmov.f32	s0, s13
 800b138:	e7c6      	b.n	800b0c8 <__ieee754_rem_pio2f+0x10c>
 800b13a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b224 <__ieee754_rem_pio2f+0x268>
 800b13e:	eeb0 0a66 	vmov.f32	s0, s13
 800b142:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b146:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b14a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b228 <__ieee754_rem_pio2f+0x26c>
 800b14e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b152:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b156:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b15a:	ed84 7a00 	vstr	s14, [r4]
 800b15e:	e7b3      	b.n	800b0c8 <__ieee754_rem_pio2f+0x10c>
 800b160:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b164:	db06      	blt.n	800b174 <__ieee754_rem_pio2f+0x1b8>
 800b166:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b16a:	edc0 7a01 	vstr	s15, [r0, #4]
 800b16e:	edc0 7a00 	vstr	s15, [r0]
 800b172:	e733      	b.n	800afdc <__ieee754_rem_pio2f+0x20>
 800b174:	15ea      	asrs	r2, r5, #23
 800b176:	3a86      	subs	r2, #134	; 0x86
 800b178:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b184:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b22c <__ieee754_rem_pio2f+0x270>
 800b188:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b18c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b190:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b198:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b19c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b1a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b1ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b4:	edcd 7a05 	vstr	s15, [sp, #20]
 800b1b8:	d11e      	bne.n	800b1f8 <__ieee754_rem_pio2f+0x23c>
 800b1ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c2:	bf14      	ite	ne
 800b1c4:	2302      	movne	r3, #2
 800b1c6:	2301      	moveq	r3, #1
 800b1c8:	4919      	ldr	r1, [pc, #100]	; (800b230 <__ieee754_rem_pio2f+0x274>)
 800b1ca:	9101      	str	r1, [sp, #4]
 800b1cc:	2102      	movs	r1, #2
 800b1ce:	9100      	str	r1, [sp, #0]
 800b1d0:	a803      	add	r0, sp, #12
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f000 f88e 	bl	800b2f4 <__kernel_rem_pio2f>
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	f6bf af1c 	bge.w	800b016 <__ieee754_rem_pio2f+0x5a>
 800b1de:	edd4 7a00 	vldr	s15, [r4]
 800b1e2:	eef1 7a67 	vneg.f32	s15, s15
 800b1e6:	edc4 7a00 	vstr	s15, [r4]
 800b1ea:	edd4 7a01 	vldr	s15, [r4, #4]
 800b1ee:	eef1 7a67 	vneg.f32	s15, s15
 800b1f2:	edc4 7a01 	vstr	s15, [r4, #4]
 800b1f6:	e779      	b.n	800b0ec <__ieee754_rem_pio2f+0x130>
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e7e5      	b.n	800b1c8 <__ieee754_rem_pio2f+0x20c>
 800b1fc:	3f490fd8 	.word	0x3f490fd8
 800b200:	4016cbe3 	.word	0x4016cbe3
 800b204:	3fc90f80 	.word	0x3fc90f80
 800b208:	3fc90fd0 	.word	0x3fc90fd0
 800b20c:	37354443 	.word	0x37354443
 800b210:	37354400 	.word	0x37354400
 800b214:	2e85a308 	.word	0x2e85a308
 800b218:	43490f80 	.word	0x43490f80
 800b21c:	3f22f984 	.word	0x3f22f984
 800b220:	0800bb2c 	.word	0x0800bb2c
 800b224:	2e85a300 	.word	0x2e85a300
 800b228:	248d3132 	.word	0x248d3132
 800b22c:	43800000 	.word	0x43800000
 800b230:	0800bbac 	.word	0x0800bbac

0800b234 <__kernel_cosf>:
 800b234:	ee10 3a10 	vmov	r3, s0
 800b238:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b23c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b240:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b244:	da05      	bge.n	800b252 <__kernel_cosf+0x1e>
 800b246:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b24a:	ee17 2a90 	vmov	r2, s15
 800b24e:	2a00      	cmp	r2, #0
 800b250:	d03d      	beq.n	800b2ce <__kernel_cosf+0x9a>
 800b252:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b256:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b2d4 <__kernel_cosf+0xa0>
 800b25a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b2d8 <__kernel_cosf+0xa4>
 800b25e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b2dc <__kernel_cosf+0xa8>
 800b262:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <__kernel_cosf+0xac>)
 800b264:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b268:	4293      	cmp	r3, r2
 800b26a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b2e4 <__kernel_cosf+0xb0>
 800b26e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b272:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b2e8 <__kernel_cosf+0xb4>
 800b276:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b27a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b2ec <__kernel_cosf+0xb8>
 800b27e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b282:	eeb0 7a66 	vmov.f32	s14, s13
 800b286:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b28a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b28e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b292:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b296:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b29a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b29e:	dc04      	bgt.n	800b2aa <__kernel_cosf+0x76>
 800b2a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b2a4:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b2a8:	4770      	bx	lr
 800b2aa:	4a11      	ldr	r2, [pc, #68]	; (800b2f0 <__kernel_cosf+0xbc>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfda      	itte	le
 800b2b0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b2b4:	ee06 3a90 	vmovle	s13, r3
 800b2b8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b2bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b2c0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b2c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2cc:	4770      	bx	lr
 800b2ce:	eeb0 0a46 	vmov.f32	s0, s12
 800b2d2:	4770      	bx	lr
 800b2d4:	ad47d74e 	.word	0xad47d74e
 800b2d8:	310f74f6 	.word	0x310f74f6
 800b2dc:	3d2aaaab 	.word	0x3d2aaaab
 800b2e0:	3e999999 	.word	0x3e999999
 800b2e4:	b493f27c 	.word	0xb493f27c
 800b2e8:	37d00d01 	.word	0x37d00d01
 800b2ec:	bab60b61 	.word	0xbab60b61
 800b2f0:	3f480000 	.word	0x3f480000

0800b2f4 <__kernel_rem_pio2f>:
 800b2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f8:	ed2d 8b04 	vpush	{d8-d9}
 800b2fc:	b0d9      	sub	sp, #356	; 0x164
 800b2fe:	4688      	mov	r8, r1
 800b300:	9002      	str	r0, [sp, #8]
 800b302:	49bb      	ldr	r1, [pc, #748]	; (800b5f0 <__kernel_rem_pio2f+0x2fc>)
 800b304:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b30c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b310:	1e59      	subs	r1, r3, #1
 800b312:	1d13      	adds	r3, r2, #4
 800b314:	db27      	blt.n	800b366 <__kernel_rem_pio2f+0x72>
 800b316:	f1b2 0b03 	subs.w	fp, r2, #3
 800b31a:	bf48      	it	mi
 800b31c:	f102 0b04 	addmi.w	fp, r2, #4
 800b320:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b324:	1c45      	adds	r5, r0, #1
 800b326:	00ec      	lsls	r4, r5, #3
 800b328:	1a47      	subs	r7, r0, r1
 800b32a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b32e:	9403      	str	r4, [sp, #12]
 800b330:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b334:	eb0a 0c01 	add.w	ip, sl, r1
 800b338:	ae1c      	add	r6, sp, #112	; 0x70
 800b33a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b33e:	2400      	movs	r4, #0
 800b340:	4564      	cmp	r4, ip
 800b342:	dd12      	ble.n	800b36a <__kernel_rem_pio2f+0x76>
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	ac1c      	add	r4, sp, #112	; 0x70
 800b348:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b34c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b350:	f04f 0c00 	mov.w	ip, #0
 800b354:	45d4      	cmp	ip, sl
 800b356:	dc27      	bgt.n	800b3a8 <__kernel_rem_pio2f+0xb4>
 800b358:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b35c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b360:	4627      	mov	r7, r4
 800b362:	2600      	movs	r6, #0
 800b364:	e016      	b.n	800b394 <__kernel_rem_pio2f+0xa0>
 800b366:	2000      	movs	r0, #0
 800b368:	e7dc      	b.n	800b324 <__kernel_rem_pio2f+0x30>
 800b36a:	42e7      	cmn	r7, r4
 800b36c:	bf5d      	ittte	pl
 800b36e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b372:	ee07 3a90 	vmovpl	s15, r3
 800b376:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b37a:	eef0 7a47 	vmovmi.f32	s15, s14
 800b37e:	ece6 7a01 	vstmia	r6!, {s15}
 800b382:	3401      	adds	r4, #1
 800b384:	e7dc      	b.n	800b340 <__kernel_rem_pio2f+0x4c>
 800b386:	ecf9 6a01 	vldmia	r9!, {s13}
 800b38a:	ed97 7a00 	vldr	s14, [r7]
 800b38e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b392:	3601      	adds	r6, #1
 800b394:	428e      	cmp	r6, r1
 800b396:	f1a7 0704 	sub.w	r7, r7, #4
 800b39a:	ddf4      	ble.n	800b386 <__kernel_rem_pio2f+0x92>
 800b39c:	eceb 7a01 	vstmia	fp!, {s15}
 800b3a0:	f10c 0c01 	add.w	ip, ip, #1
 800b3a4:	3404      	adds	r4, #4
 800b3a6:	e7d5      	b.n	800b354 <__kernel_rem_pio2f+0x60>
 800b3a8:	ab08      	add	r3, sp, #32
 800b3aa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b3ae:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b5fc <__kernel_rem_pio2f+0x308>
 800b3b2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b5f8 <__kernel_rem_pio2f+0x304>
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b3bc:	4656      	mov	r6, sl
 800b3be:	00b3      	lsls	r3, r6, #2
 800b3c0:	9305      	str	r3, [sp, #20]
 800b3c2:	ab58      	add	r3, sp, #352	; 0x160
 800b3c4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b3c8:	ac08      	add	r4, sp, #32
 800b3ca:	ab44      	add	r3, sp, #272	; 0x110
 800b3cc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b3d0:	46a4      	mov	ip, r4
 800b3d2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b3d6:	4637      	mov	r7, r6
 800b3d8:	2f00      	cmp	r7, #0
 800b3da:	f1a0 0004 	sub.w	r0, r0, #4
 800b3de:	dc4f      	bgt.n	800b480 <__kernel_rem_pio2f+0x18c>
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b3e6:	f000 fa8d 	bl	800b904 <scalbnf>
 800b3ea:	eeb0 8a40 	vmov.f32	s16, s0
 800b3ee:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b3f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b3f6:	f000 fa43 	bl	800b880 <floorf>
 800b3fa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b3fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b402:	2d00      	cmp	r5, #0
 800b404:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b408:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b40c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b410:	ee17 9a90 	vmov	r9, s15
 800b414:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b418:	dd44      	ble.n	800b4a4 <__kernel_rem_pio2f+0x1b0>
 800b41a:	f106 3cff 	add.w	ip, r6, #4294967295
 800b41e:	ab08      	add	r3, sp, #32
 800b420:	f1c5 0e08 	rsb	lr, r5, #8
 800b424:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b428:	fa47 f00e 	asr.w	r0, r7, lr
 800b42c:	4481      	add	r9, r0
 800b42e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b432:	1a3f      	subs	r7, r7, r0
 800b434:	f1c5 0007 	rsb	r0, r5, #7
 800b438:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b43c:	4107      	asrs	r7, r0
 800b43e:	2f00      	cmp	r7, #0
 800b440:	dd3f      	ble.n	800b4c2 <__kernel_rem_pio2f+0x1ce>
 800b442:	f04f 0e00 	mov.w	lr, #0
 800b446:	f109 0901 	add.w	r9, r9, #1
 800b44a:	4673      	mov	r3, lr
 800b44c:	4576      	cmp	r6, lr
 800b44e:	dc6b      	bgt.n	800b528 <__kernel_rem_pio2f+0x234>
 800b450:	2d00      	cmp	r5, #0
 800b452:	dd04      	ble.n	800b45e <__kernel_rem_pio2f+0x16a>
 800b454:	2d01      	cmp	r5, #1
 800b456:	d078      	beq.n	800b54a <__kernel_rem_pio2f+0x256>
 800b458:	2d02      	cmp	r5, #2
 800b45a:	f000 8081 	beq.w	800b560 <__kernel_rem_pio2f+0x26c>
 800b45e:	2f02      	cmp	r7, #2
 800b460:	d12f      	bne.n	800b4c2 <__kernel_rem_pio2f+0x1ce>
 800b462:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b466:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b46a:	b353      	cbz	r3, 800b4c2 <__kernel_rem_pio2f+0x1ce>
 800b46c:	4628      	mov	r0, r5
 800b46e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b472:	f000 fa47 	bl	800b904 <scalbnf>
 800b476:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b47a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b47e:	e020      	b.n	800b4c2 <__kernel_rem_pio2f+0x1ce>
 800b480:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b484:	3f01      	subs	r7, #1
 800b486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b48a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b492:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b496:	ecac 0a01 	vstmia	ip!, {s0}
 800b49a:	ed90 0a00 	vldr	s0, [r0]
 800b49e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b4a2:	e799      	b.n	800b3d8 <__kernel_rem_pio2f+0xe4>
 800b4a4:	d105      	bne.n	800b4b2 <__kernel_rem_pio2f+0x1be>
 800b4a6:	1e70      	subs	r0, r6, #1
 800b4a8:	ab08      	add	r3, sp, #32
 800b4aa:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b4ae:	11ff      	asrs	r7, r7, #7
 800b4b0:	e7c5      	b.n	800b43e <__kernel_rem_pio2f+0x14a>
 800b4b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b4b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4be:	da31      	bge.n	800b524 <__kernel_rem_pio2f+0x230>
 800b4c0:	2700      	movs	r7, #0
 800b4c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	f040 809b 	bne.w	800b604 <__kernel_rem_pio2f+0x310>
 800b4ce:	1e74      	subs	r4, r6, #1
 800b4d0:	46a4      	mov	ip, r4
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	45d4      	cmp	ip, sl
 800b4d6:	da4a      	bge.n	800b56e <__kernel_rem_pio2f+0x27a>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d07a      	beq.n	800b5d2 <__kernel_rem_pio2f+0x2de>
 800b4dc:	ab08      	add	r3, sp, #32
 800b4de:	3d08      	subs	r5, #8
 800b4e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 8081 	beq.w	800b5ec <__kernel_rem_pio2f+0x2f8>
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b4f0:	00a5      	lsls	r5, r4, #2
 800b4f2:	f000 fa07 	bl	800b904 <scalbnf>
 800b4f6:	aa44      	add	r2, sp, #272	; 0x110
 800b4f8:	1d2b      	adds	r3, r5, #4
 800b4fa:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b5fc <__kernel_rem_pio2f+0x308>
 800b4fe:	18d1      	adds	r1, r2, r3
 800b500:	4622      	mov	r2, r4
 800b502:	2a00      	cmp	r2, #0
 800b504:	f280 80ae 	bge.w	800b664 <__kernel_rem_pio2f+0x370>
 800b508:	4622      	mov	r2, r4
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	f2c0 80cc 	blt.w	800b6a8 <__kernel_rem_pio2f+0x3b4>
 800b510:	a944      	add	r1, sp, #272	; 0x110
 800b512:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b516:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b5f4 <__kernel_rem_pio2f+0x300>
 800b51a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b51e:	2000      	movs	r0, #0
 800b520:	1aa1      	subs	r1, r4, r2
 800b522:	e0b6      	b.n	800b692 <__kernel_rem_pio2f+0x39e>
 800b524:	2702      	movs	r7, #2
 800b526:	e78c      	b.n	800b442 <__kernel_rem_pio2f+0x14e>
 800b528:	6820      	ldr	r0, [r4, #0]
 800b52a:	b94b      	cbnz	r3, 800b540 <__kernel_rem_pio2f+0x24c>
 800b52c:	b118      	cbz	r0, 800b536 <__kernel_rem_pio2f+0x242>
 800b52e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b532:	6020      	str	r0, [r4, #0]
 800b534:	2001      	movs	r0, #1
 800b536:	f10e 0e01 	add.w	lr, lr, #1
 800b53a:	3404      	adds	r4, #4
 800b53c:	4603      	mov	r3, r0
 800b53e:	e785      	b.n	800b44c <__kernel_rem_pio2f+0x158>
 800b540:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b544:	6020      	str	r0, [r4, #0]
 800b546:	4618      	mov	r0, r3
 800b548:	e7f5      	b.n	800b536 <__kernel_rem_pio2f+0x242>
 800b54a:	1e74      	subs	r4, r6, #1
 800b54c:	a808      	add	r0, sp, #32
 800b54e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b552:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b556:	f10d 0c20 	add.w	ip, sp, #32
 800b55a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b55e:	e77e      	b.n	800b45e <__kernel_rem_pio2f+0x16a>
 800b560:	1e74      	subs	r4, r6, #1
 800b562:	a808      	add	r0, sp, #32
 800b564:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b568:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b56c:	e7f3      	b.n	800b556 <__kernel_rem_pio2f+0x262>
 800b56e:	ab08      	add	r3, sp, #32
 800b570:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b574:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b578:	4318      	orrs	r0, r3
 800b57a:	e7ab      	b.n	800b4d4 <__kernel_rem_pio2f+0x1e0>
 800b57c:	f10c 0c01 	add.w	ip, ip, #1
 800b580:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b584:	2c00      	cmp	r4, #0
 800b586:	d0f9      	beq.n	800b57c <__kernel_rem_pio2f+0x288>
 800b588:	9b05      	ldr	r3, [sp, #20]
 800b58a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b58e:	eb0d 0003 	add.w	r0, sp, r3
 800b592:	9b01      	ldr	r3, [sp, #4]
 800b594:	18f4      	adds	r4, r6, r3
 800b596:	ab1c      	add	r3, sp, #112	; 0x70
 800b598:	1c77      	adds	r7, r6, #1
 800b59a:	384c      	subs	r0, #76	; 0x4c
 800b59c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b5a0:	4466      	add	r6, ip
 800b5a2:	42be      	cmp	r6, r7
 800b5a4:	f6ff af0b 	blt.w	800b3be <__kernel_rem_pio2f+0xca>
 800b5a8:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b5ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b5b0:	ee07 3a90 	vmov	s15, r3
 800b5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5b8:	f04f 0c00 	mov.w	ip, #0
 800b5bc:	ece4 7a01 	vstmia	r4!, {s15}
 800b5c0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b5c4:	46a1      	mov	r9, r4
 800b5c6:	458c      	cmp	ip, r1
 800b5c8:	dd07      	ble.n	800b5da <__kernel_rem_pio2f+0x2e6>
 800b5ca:	ece0 7a01 	vstmia	r0!, {s15}
 800b5ce:	3701      	adds	r7, #1
 800b5d0:	e7e7      	b.n	800b5a2 <__kernel_rem_pio2f+0x2ae>
 800b5d2:	9804      	ldr	r0, [sp, #16]
 800b5d4:	f04f 0c01 	mov.w	ip, #1
 800b5d8:	e7d2      	b.n	800b580 <__kernel_rem_pio2f+0x28c>
 800b5da:	ecfe 6a01 	vldmia	lr!, {s13}
 800b5de:	ed39 7a01 	vldmdb	r9!, {s14}
 800b5e2:	f10c 0c01 	add.w	ip, ip, #1
 800b5e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b5ea:	e7ec      	b.n	800b5c6 <__kernel_rem_pio2f+0x2d2>
 800b5ec:	3c01      	subs	r4, #1
 800b5ee:	e775      	b.n	800b4dc <__kernel_rem_pio2f+0x1e8>
 800b5f0:	0800bef0 	.word	0x0800bef0
 800b5f4:	0800bec4 	.word	0x0800bec4
 800b5f8:	43800000 	.word	0x43800000
 800b5fc:	3b800000 	.word	0x3b800000
 800b600:	00000000 	.word	0x00000000
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	eeb0 0a48 	vmov.f32	s0, s16
 800b60a:	1a98      	subs	r0, r3, r2
 800b60c:	f000 f97a 	bl	800b904 <scalbnf>
 800b610:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b5f8 <__kernel_rem_pio2f+0x304>
 800b614:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61c:	db19      	blt.n	800b652 <__kernel_rem_pio2f+0x35e>
 800b61e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b5fc <__kernel_rem_pio2f+0x308>
 800b622:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b626:	aa08      	add	r2, sp, #32
 800b628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b62c:	1c74      	adds	r4, r6, #1
 800b62e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b632:	3508      	adds	r5, #8
 800b634:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b63c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b640:	ee10 3a10 	vmov	r3, s0
 800b644:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b648:	ee17 3a90 	vmov	r3, s15
 800b64c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b650:	e74b      	b.n	800b4ea <__kernel_rem_pio2f+0x1f6>
 800b652:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b656:	aa08      	add	r2, sp, #32
 800b658:	ee10 3a10 	vmov	r3, s0
 800b65c:	4634      	mov	r4, r6
 800b65e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b662:	e742      	b.n	800b4ea <__kernel_rem_pio2f+0x1f6>
 800b664:	a808      	add	r0, sp, #32
 800b666:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b66a:	9001      	str	r0, [sp, #4]
 800b66c:	ee07 0a90 	vmov	s15, r0
 800b670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b674:	3a01      	subs	r2, #1
 800b676:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b67a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b67e:	ed61 7a01 	vstmdb	r1!, {s15}
 800b682:	e73e      	b.n	800b502 <__kernel_rem_pio2f+0x20e>
 800b684:	ecfc 6a01 	vldmia	ip!, {s13}
 800b688:	ecb6 7a01 	vldmia	r6!, {s14}
 800b68c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b690:	3001      	adds	r0, #1
 800b692:	4550      	cmp	r0, sl
 800b694:	dc01      	bgt.n	800b69a <__kernel_rem_pio2f+0x3a6>
 800b696:	4288      	cmp	r0, r1
 800b698:	ddf4      	ble.n	800b684 <__kernel_rem_pio2f+0x390>
 800b69a:	a858      	add	r0, sp, #352	; 0x160
 800b69c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b6a0:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b6a4:	3a01      	subs	r2, #1
 800b6a6:	e730      	b.n	800b50a <__kernel_rem_pio2f+0x216>
 800b6a8:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b6aa:	2a02      	cmp	r2, #2
 800b6ac:	dc09      	bgt.n	800b6c2 <__kernel_rem_pio2f+0x3ce>
 800b6ae:	2a00      	cmp	r2, #0
 800b6b0:	dc2a      	bgt.n	800b708 <__kernel_rem_pio2f+0x414>
 800b6b2:	d043      	beq.n	800b73c <__kernel_rem_pio2f+0x448>
 800b6b4:	f009 0007 	and.w	r0, r9, #7
 800b6b8:	b059      	add	sp, #356	; 0x164
 800b6ba:	ecbd 8b04 	vpop	{d8-d9}
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d1f5      	bne.n	800b6b4 <__kernel_rem_pio2f+0x3c0>
 800b6c8:	ab30      	add	r3, sp, #192	; 0xc0
 800b6ca:	442b      	add	r3, r5
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f1a1 0104 	sub.w	r1, r1, #4
 800b6d8:	dc51      	bgt.n	800b77e <__kernel_rem_pio2f+0x48a>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	2901      	cmp	r1, #1
 800b6de:	f1a2 0204 	sub.w	r2, r2, #4
 800b6e2:	dc5c      	bgt.n	800b79e <__kernel_rem_pio2f+0x4aa>
 800b6e4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	2c01      	cmp	r4, #1
 800b6ec:	dc67      	bgt.n	800b7be <__kernel_rem_pio2f+0x4ca>
 800b6ee:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b6f2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b6f6:	2f00      	cmp	r7, #0
 800b6f8:	d167      	bne.n	800b7ca <__kernel_rem_pio2f+0x4d6>
 800b6fa:	edc8 6a00 	vstr	s13, [r8]
 800b6fe:	ed88 7a01 	vstr	s14, [r8, #4]
 800b702:	edc8 7a02 	vstr	s15, [r8, #8]
 800b706:	e7d5      	b.n	800b6b4 <__kernel_rem_pio2f+0x3c0>
 800b708:	aa30      	add	r2, sp, #192	; 0xc0
 800b70a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b70e:	4413      	add	r3, r2
 800b710:	4622      	mov	r2, r4
 800b712:	2a00      	cmp	r2, #0
 800b714:	da24      	bge.n	800b760 <__kernel_rem_pio2f+0x46c>
 800b716:	b34f      	cbz	r7, 800b76c <__kernel_rem_pio2f+0x478>
 800b718:	eef1 7a47 	vneg.f32	s15, s14
 800b71c:	edc8 7a00 	vstr	s15, [r8]
 800b720:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b728:	aa31      	add	r2, sp, #196	; 0xc4
 800b72a:	2301      	movs	r3, #1
 800b72c:	429c      	cmp	r4, r3
 800b72e:	da20      	bge.n	800b772 <__kernel_rem_pio2f+0x47e>
 800b730:	b10f      	cbz	r7, 800b736 <__kernel_rem_pio2f+0x442>
 800b732:	eef1 7a67 	vneg.f32	s15, s15
 800b736:	edc8 7a01 	vstr	s15, [r8, #4]
 800b73a:	e7bb      	b.n	800b6b4 <__kernel_rem_pio2f+0x3c0>
 800b73c:	aa30      	add	r2, sp, #192	; 0xc0
 800b73e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b600 <__kernel_rem_pio2f+0x30c>
 800b742:	4413      	add	r3, r2
 800b744:	2c00      	cmp	r4, #0
 800b746:	da05      	bge.n	800b754 <__kernel_rem_pio2f+0x460>
 800b748:	b10f      	cbz	r7, 800b74e <__kernel_rem_pio2f+0x45a>
 800b74a:	eef1 7a67 	vneg.f32	s15, s15
 800b74e:	edc8 7a00 	vstr	s15, [r8]
 800b752:	e7af      	b.n	800b6b4 <__kernel_rem_pio2f+0x3c0>
 800b754:	ed33 7a01 	vldmdb	r3!, {s14}
 800b758:	3c01      	subs	r4, #1
 800b75a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b75e:	e7f1      	b.n	800b744 <__kernel_rem_pio2f+0x450>
 800b760:	ed73 7a01 	vldmdb	r3!, {s15}
 800b764:	3a01      	subs	r2, #1
 800b766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b76a:	e7d2      	b.n	800b712 <__kernel_rem_pio2f+0x41e>
 800b76c:	eef0 7a47 	vmov.f32	s15, s14
 800b770:	e7d4      	b.n	800b71c <__kernel_rem_pio2f+0x428>
 800b772:	ecb2 7a01 	vldmia	r2!, {s14}
 800b776:	3301      	adds	r3, #1
 800b778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b77c:	e7d6      	b.n	800b72c <__kernel_rem_pio2f+0x438>
 800b77e:	edd1 7a00 	vldr	s15, [r1]
 800b782:	edd1 6a01 	vldr	s13, [r1, #4]
 800b786:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b78a:	3801      	subs	r0, #1
 800b78c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b790:	ed81 7a00 	vstr	s14, [r1]
 800b794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b798:	edc1 7a01 	vstr	s15, [r1, #4]
 800b79c:	e799      	b.n	800b6d2 <__kernel_rem_pio2f+0x3de>
 800b79e:	edd2 7a00 	vldr	s15, [r2]
 800b7a2:	edd2 6a01 	vldr	s13, [r2, #4]
 800b7a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b7aa:	3901      	subs	r1, #1
 800b7ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7b0:	ed82 7a00 	vstr	s14, [r2]
 800b7b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b8:	edc2 7a01 	vstr	s15, [r2, #4]
 800b7bc:	e78e      	b.n	800b6dc <__kernel_rem_pio2f+0x3e8>
 800b7be:	ed33 7a01 	vldmdb	r3!, {s14}
 800b7c2:	3c01      	subs	r4, #1
 800b7c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b7c8:	e78f      	b.n	800b6ea <__kernel_rem_pio2f+0x3f6>
 800b7ca:	eef1 6a66 	vneg.f32	s13, s13
 800b7ce:	eeb1 7a47 	vneg.f32	s14, s14
 800b7d2:	edc8 6a00 	vstr	s13, [r8]
 800b7d6:	ed88 7a01 	vstr	s14, [r8, #4]
 800b7da:	eef1 7a67 	vneg.f32	s15, s15
 800b7de:	e790      	b.n	800b702 <__kernel_rem_pio2f+0x40e>

0800b7e0 <__kernel_sinf>:
 800b7e0:	ee10 3a10 	vmov	r3, s0
 800b7e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b7ec:	da04      	bge.n	800b7f8 <__kernel_sinf+0x18>
 800b7ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b7f2:	ee17 3a90 	vmov	r3, s15
 800b7f6:	b35b      	cbz	r3, 800b850 <__kernel_sinf+0x70>
 800b7f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b7fc:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b854 <__kernel_sinf+0x74>
 800b800:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b858 <__kernel_sinf+0x78>
 800b804:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b808:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b85c <__kernel_sinf+0x7c>
 800b80c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b810:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b860 <__kernel_sinf+0x80>
 800b814:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b818:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b864 <__kernel_sinf+0x84>
 800b81c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b820:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b824:	b930      	cbnz	r0, 800b834 <__kernel_sinf+0x54>
 800b826:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b868 <__kernel_sinf+0x88>
 800b82a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b82e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b832:	4770      	bx	lr
 800b834:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b838:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b83c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b840:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b844:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b86c <__kernel_sinf+0x8c>
 800b848:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b84c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	2f2ec9d3 	.word	0x2f2ec9d3
 800b858:	b2d72f34 	.word	0xb2d72f34
 800b85c:	3638ef1b 	.word	0x3638ef1b
 800b860:	b9500d01 	.word	0xb9500d01
 800b864:	3c088889 	.word	0x3c088889
 800b868:	be2aaaab 	.word	0xbe2aaaab
 800b86c:	3e2aaaab 	.word	0x3e2aaaab

0800b870 <fabsf>:
 800b870:	ee10 3a10 	vmov	r3, s0
 800b874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b878:	ee00 3a10 	vmov	s0, r3
 800b87c:	4770      	bx	lr
	...

0800b880 <floorf>:
 800b880:	ee10 3a10 	vmov	r3, s0
 800b884:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b888:	3a7f      	subs	r2, #127	; 0x7f
 800b88a:	2a16      	cmp	r2, #22
 800b88c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b890:	dc2a      	bgt.n	800b8e8 <floorf+0x68>
 800b892:	2a00      	cmp	r2, #0
 800b894:	da11      	bge.n	800b8ba <floorf+0x3a>
 800b896:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b8f8 <floorf+0x78>
 800b89a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b89e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8a6:	dd05      	ble.n	800b8b4 <floorf+0x34>
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da23      	bge.n	800b8f4 <floorf+0x74>
 800b8ac:	4a13      	ldr	r2, [pc, #76]	; (800b8fc <floorf+0x7c>)
 800b8ae:	2900      	cmp	r1, #0
 800b8b0:	bf18      	it	ne
 800b8b2:	4613      	movne	r3, r2
 800b8b4:	ee00 3a10 	vmov	s0, r3
 800b8b8:	4770      	bx	lr
 800b8ba:	4911      	ldr	r1, [pc, #68]	; (800b900 <floorf+0x80>)
 800b8bc:	4111      	asrs	r1, r2
 800b8be:	420b      	tst	r3, r1
 800b8c0:	d0fa      	beq.n	800b8b8 <floorf+0x38>
 800b8c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b8f8 <floorf+0x78>
 800b8c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d2:	ddef      	ble.n	800b8b4 <floorf+0x34>
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bfbe      	ittt	lt
 800b8d8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b8dc:	fa40 f202 	asrlt.w	r2, r0, r2
 800b8e0:	189b      	addlt	r3, r3, r2
 800b8e2:	ea23 0301 	bic.w	r3, r3, r1
 800b8e6:	e7e5      	b.n	800b8b4 <floorf+0x34>
 800b8e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b8ec:	d3e4      	bcc.n	800b8b8 <floorf+0x38>
 800b8ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8f2:	4770      	bx	lr
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e7dd      	b.n	800b8b4 <floorf+0x34>
 800b8f8:	7149f2ca 	.word	0x7149f2ca
 800b8fc:	bf800000 	.word	0xbf800000
 800b900:	007fffff 	.word	0x007fffff

0800b904 <scalbnf>:
 800b904:	ee10 3a10 	vmov	r3, s0
 800b908:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b90c:	d025      	beq.n	800b95a <scalbnf+0x56>
 800b90e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b912:	d302      	bcc.n	800b91a <scalbnf+0x16>
 800b914:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b918:	4770      	bx	lr
 800b91a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b91e:	d122      	bne.n	800b966 <scalbnf+0x62>
 800b920:	4b2a      	ldr	r3, [pc, #168]	; (800b9cc <scalbnf+0xc8>)
 800b922:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b9d0 <scalbnf+0xcc>
 800b926:	4298      	cmp	r0, r3
 800b928:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b92c:	db16      	blt.n	800b95c <scalbnf+0x58>
 800b92e:	ee10 3a10 	vmov	r3, s0
 800b932:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b936:	3a19      	subs	r2, #25
 800b938:	4402      	add	r2, r0
 800b93a:	2afe      	cmp	r2, #254	; 0xfe
 800b93c:	dd15      	ble.n	800b96a <scalbnf+0x66>
 800b93e:	ee10 3a10 	vmov	r3, s0
 800b942:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b9d4 <scalbnf+0xd0>
 800b946:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b9d8 <scalbnf+0xd4>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	eeb0 7a67 	vmov.f32	s14, s15
 800b950:	bfb8      	it	lt
 800b952:	eef0 7a66 	vmovlt.f32	s15, s13
 800b956:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b95a:	4770      	bx	lr
 800b95c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b9dc <scalbnf+0xd8>
 800b960:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b964:	4770      	bx	lr
 800b966:	0dd2      	lsrs	r2, r2, #23
 800b968:	e7e6      	b.n	800b938 <scalbnf+0x34>
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	dd06      	ble.n	800b97c <scalbnf+0x78>
 800b96e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b972:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b976:	ee00 3a10 	vmov	s0, r3
 800b97a:	4770      	bx	lr
 800b97c:	f112 0f16 	cmn.w	r2, #22
 800b980:	da1a      	bge.n	800b9b8 <scalbnf+0xb4>
 800b982:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b986:	4298      	cmp	r0, r3
 800b988:	ee10 3a10 	vmov	r3, s0
 800b98c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b990:	dd0a      	ble.n	800b9a8 <scalbnf+0xa4>
 800b992:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b9d4 <scalbnf+0xd0>
 800b996:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b9d8 <scalbnf+0xd4>
 800b99a:	eef0 7a40 	vmov.f32	s15, s0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bf18      	it	ne
 800b9a2:	eeb0 0a47 	vmovne.f32	s0, s14
 800b9a6:	e7db      	b.n	800b960 <scalbnf+0x5c>
 800b9a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b9dc <scalbnf+0xd8>
 800b9ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b9e0 <scalbnf+0xdc>
 800b9b0:	eef0 7a40 	vmov.f32	s15, s0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	e7f3      	b.n	800b9a0 <scalbnf+0x9c>
 800b9b8:	3219      	adds	r2, #25
 800b9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b9c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b9e4 <scalbnf+0xe0>
 800b9c6:	ee07 3a10 	vmov	s14, r3
 800b9ca:	e7c4      	b.n	800b956 <scalbnf+0x52>
 800b9cc:	ffff3cb0 	.word	0xffff3cb0
 800b9d0:	4c000000 	.word	0x4c000000
 800b9d4:	7149f2ca 	.word	0x7149f2ca
 800b9d8:	f149f2ca 	.word	0xf149f2ca
 800b9dc:	0da24260 	.word	0x0da24260
 800b9e0:	8da24260 	.word	0x8da24260
 800b9e4:	33000000 	.word	0x33000000

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
