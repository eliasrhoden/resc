
debug_serial_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002038  08002038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002048  08002048  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002048  08002048  00012048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002050  08002050  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002054  08002054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002064  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002064  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d7  00000000  00000000  00029ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ee  00000000  00000000  0002c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae73  00000000  00000000  0004cde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca312  00000000  00000000  00057c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121f6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  00121fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002020 	.word	0x08002020

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002020 	.word	0x08002020

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 f9e5 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f81d 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f8ad 	bl	8000674 <MX_GPIO_Init>
  MX_TIM10_Init();
 800051a:	f000 f887 	bl	800062c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 800051e:	480b      	ldr	r0, [pc, #44]	; (800054c <main+0x44>)
 8000520:	f001 fafe 	bl	8001b20 <HAL_TIM_Base_Start_IT>


int aaa = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int a = 0;a<1000;a++){
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	e005      	b.n	800053a <main+0x32>
		  aaa += 1;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
	  for(int a = 0;a<1000;a++){
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000540:	dbf5      	blt.n	800052e <main+0x26>
	  }
	  aaa += 1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3301      	adds	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
	  for(int a = 0;a<1000;a++){
 8000548:	e7ee      	b.n	8000528 <main+0x20>
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2234      	movs	r2, #52	; 0x34
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fd56 	bl	8002010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 0308 	add.w	r3, r7, #8
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <SystemClock_Config+0xd4>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a29      	ldr	r2, [pc, #164]	; (8000624 <SystemClock_Config+0xd4>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xd4>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <SystemClock_Config+0xd8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xd8>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xd8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b8:	2310      	movs	r3, #16
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c4:	2310      	movs	r3, #16
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 ffb0 	bl	8001544 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ea:	f000 f8db 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fc84 	bl	8000f18 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000616:	f000 f8c5 	bl	80007a4 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_TIM10_Init+0x40>)
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <MX_TIM10_Init+0x44>)
 8000634:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 10;
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_TIM10_Init+0x40>)
 8000638:	220a      	movs	r2, #10
 800063a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_TIM10_Init+0x40>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_TIM10_Init+0x40>)
 8000644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000648:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_TIM10_Init+0x40>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_TIM10_Init+0x40>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_TIM10_Init+0x40>)
 8000658:	f001 fa12 	bl	8001a80 <HAL_TIM_Base_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000662:	f000 f89f 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40014400 	.word	0x40014400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b35      	ldr	r3, [pc, #212]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a34      	ldr	r2, [pc, #208]	; (8000764 <MX_GPIO_Init+0xf0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b32      	ldr	r3, [pc, #200]	; (8000764 <MX_GPIO_Init+0xf0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b2e      	ldr	r3, [pc, #184]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2d      	ldr	r2, [pc, #180]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <MX_GPIO_Init+0xf0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_GPIO_Init+0xf4>)
 8000700:	f000 fbf0 	bl	8000ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4814      	ldr	r0, [pc, #80]	; (800076c <MX_GPIO_Init+0xf8>)
 800071c:	f000 fa4e 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000720:	230c      	movs	r3, #12
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000730:	2307      	movs	r3, #7
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	; (8000768 <MX_GPIO_Init+0xf4>)
 800073c:	f000 fa3e 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_GPIO_Init+0xf4>)
 8000758:	f000 fa30 	bl	8000bbc <HAL_GPIO_Init>

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
volatile int gelnn1;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

	gelnn1 += 1;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000780:	6013      	str	r3, [r2, #0]
	if(gelnn1 > 10){
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	dd04      	ble.n	8000794 <HAL_TIM_PeriodElapsedCallback+0x24>
		gelnn1 += 1;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	3301      	adds	r3, #1
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000792:	6013      	str	r3, [r2, #0]
	}


}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000070 	.word	0x20000070

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <HAL_MspInit+0x4c>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <HAL_MspInit+0x4c>)
 80007c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_MspInit+0x4c>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x4c>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6413      	str	r3, [r2, #64]	; 0x40
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x4c>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ee:	2007      	movs	r0, #7
 80007f0:	f000 f9a2 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800

08000800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_TIM_Base_MspInit+0x48>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d115      	bne.n	800083e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 800081c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_TIM_Base_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2019      	movs	r0, #25
 8000834:	f000 f98b 	bl	8000b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000838:	2019      	movs	r0, #25
 800083a:	f000 f9a4 	bl	8000b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40014400 	.word	0x40014400
 800084c:	40023800 	.word	0x40023800

08000850 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000856:	f001 f9d3 	bl	8001c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000028 	.word	0x20000028

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b2:	f7ff ffd7 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f001 fb87 	bl	8001fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fe25 	bl	8000508 <main>
  bx  lr    
 80008be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	08002058 	.word	0x08002058
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	20000078 	.word	0x20000078

080008d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_Init+0x40>)
 80008e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_Init+0x40>)
 80008f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x40>)
 80008fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f917 	bl	8000b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff ff4e 	bl	80007b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023c00 	.word	0x40023c00

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f92f 	bl	8000ba2 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f8f7 	bl	8000b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000074 	.word	0x20000074

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b04:	d301      	bcc.n	8000b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00f      	b.n	8000b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <SysTick_Config+0x40>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b12:	210f      	movs	r1, #15
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f7ff ff8e 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <SysTick_Config+0x40>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SysTick_Config+0x40>)
 8000b24:	2207      	movs	r2, #7
 8000b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	e000e010 	.word	0xe000e010

08000b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff29 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b60:	f7ff ff3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f7ff ff8e 	bl	8000a8c <NVIC_EncodePriority>
 8000b70:	4602      	mov	r2, r0
 8000b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff5d 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff31 	bl	80009fc <__NVIC_EnableIRQ>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ffa2 	bl	8000af4 <SysTick_Config>
 8000bb0:	4603      	mov	r3, r0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	e165      	b.n	8000ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	697a      	ldr	r2, [r7, #20]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	f040 8154 	bne.w	8000e9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d005      	beq.n	8000c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d130      	bne.n	8000c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	f003 0201 	and.w	r2, r3, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d017      	beq.n	8000cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2203      	movs	r2, #3
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d123      	bne.n	8000d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	08da      	lsrs	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3208      	adds	r2, #8
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	220f      	movs	r2, #15
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	69b9      	ldr	r1, [r7, #24]
 8000cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0203 	and.w	r2, r3, #3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f000 80ae 	beq.w	8000e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a5c      	ldr	r2, [pc, #368]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <HAL_GPIO_Init+0x300>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d5e:	4a58      	ldr	r2, [pc, #352]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_GPIO_Init+0x308>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d025      	beq.n	8000dd6 <HAL_GPIO_Init+0x21a>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4e      	ldr	r2, [pc, #312]	; (8000ec8 <HAL_GPIO_Init+0x30c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01f      	beq.n	8000dd2 <HAL_GPIO_Init+0x216>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4d      	ldr	r2, [pc, #308]	; (8000ecc <HAL_GPIO_Init+0x310>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0x212>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4c      	ldr	r2, [pc, #304]	; (8000ed0 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d013      	beq.n	8000dca <HAL_GPIO_Init+0x20e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4b      	ldr	r2, [pc, #300]	; (8000ed4 <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d00d      	beq.n	8000dc6 <HAL_GPIO_Init+0x20a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d007      	beq.n	8000dc2 <HAL_GPIO_Init+0x206>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a49      	ldr	r2, [pc, #292]	; (8000edc <HAL_GPIO_Init+0x320>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_GPIO_Init+0x202>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x21c>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x304>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e98:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <HAL_GPIO_Init+0x324>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae96 	bls.w	8000bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40013c00 	.word	0x40013c00

08000ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f00:	e003      	b.n	8000f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f02:	887b      	ldrh	r3, [r7, #2]
 8000f04:	041a      	lsls	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	619a      	str	r2, [r3, #24]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e0cc      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b68      	ldr	r3, [pc, #416]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d90c      	bls.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	4b63      	ldr	r3, [pc, #396]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e0b8      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d020      	beq.n	8000fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a52      	ldr	r2, [pc, #328]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f90:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	494d      	ldr	r1, [pc, #308]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d044      	beq.n	8001038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d107      	bne.n	8000fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d119      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e07f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d107      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e06f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe6:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e067      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff6:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f023 0203 	bic.w	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4934      	ldr	r1, [pc, #208]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001008:	f7ff fcba 	bl	8000980 <HAL_GetTick>
 800100c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100e:	e00a      	b.n	8001026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff fcb6 	bl	8000980 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	f241 3288 	movw	r2, #5000	; 0x1388
 800101e:	4293      	cmp	r3, r2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e04f      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 020c 	and.w	r2, r3, #12
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	429a      	cmp	r2, r3
 8001036:	d1eb      	bne.n	8001010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d20c      	bcs.n	8001060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d001      	beq.n	8001060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e032      	b.n	80010c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d008      	beq.n	800107e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4916      	ldr	r1, [pc, #88]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	4313      	orrs	r3, r2
 800107c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b00      	cmp	r3, #0
 8001088:	d009      	beq.n	800109e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800109e:	f000 f821 	bl	80010e4 <HAL_RCC_GetSysClockFreq>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	091b      	lsrs	r3, r3, #4
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	490a      	ldr	r1, [pc, #40]	; (80010d8 <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	5ccb      	ldrb	r3, [r1, r3]
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_RCC_ClockConfig+0x1c4>)
 80010b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_RCC_ClockConfig+0x1c8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fc2e 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	08002038 	.word	0x08002038
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e8:	b0ae      	sub	sp, #184	; 0xb8
 80010ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800110a:	4bcb      	ldr	r3, [pc, #812]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b0c      	cmp	r3, #12
 8001114:	f200 8206 	bhi.w	8001524 <HAL_RCC_GetSysClockFreq+0x440>
 8001118:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <HAL_RCC_GetSysClockFreq+0x3c>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001155 	.word	0x08001155
 8001124:	08001525 	.word	0x08001525
 8001128:	08001525 	.word	0x08001525
 800112c:	08001525 	.word	0x08001525
 8001130:	0800115d 	.word	0x0800115d
 8001134:	08001525 	.word	0x08001525
 8001138:	08001525 	.word	0x08001525
 800113c:	08001525 	.word	0x08001525
 8001140:	08001165 	.word	0x08001165
 8001144:	08001525 	.word	0x08001525
 8001148:	08001525 	.word	0x08001525
 800114c:	08001525 	.word	0x08001525
 8001150:	08001355 	.word	0x08001355
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001154:	4bb9      	ldr	r3, [pc, #740]	; (800143c <HAL_RCC_GetSysClockFreq+0x358>)
 8001156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800115a:	e1e7      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800115c:	4bb8      	ldr	r3, [pc, #736]	; (8001440 <HAL_RCC_GetSysClockFreq+0x35c>)
 800115e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001162:	e1e3      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001164:	4bb4      	ldr	r3, [pc, #720]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800116c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001170:	4bb1      	ldr	r3, [pc, #708]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d071      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800117c:	4bae      	ldr	r3, [pc, #696]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	2200      	movs	r2, #0
 8001184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001188:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800118c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001194:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800119e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80011a2:	4622      	mov	r2, r4
 80011a4:	462b      	mov	r3, r5
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	f04f 0100 	mov.w	r1, #0
 80011ae:	0159      	lsls	r1, r3, #5
 80011b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011b4:	0150      	lsls	r0, r2, #5
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4621      	mov	r1, r4
 80011bc:	1a51      	subs	r1, r2, r1
 80011be:	6439      	str	r1, [r7, #64]	; 0x40
 80011c0:	4629      	mov	r1, r5
 80011c2:	eb63 0301 	sbc.w	r3, r3, r1
 80011c6:	647b      	str	r3, [r7, #68]	; 0x44
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80011d4:	4649      	mov	r1, r9
 80011d6:	018b      	lsls	r3, r1, #6
 80011d8:	4641      	mov	r1, r8
 80011da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011de:	4641      	mov	r1, r8
 80011e0:	018a      	lsls	r2, r1, #6
 80011e2:	4641      	mov	r1, r8
 80011e4:	1a51      	subs	r1, r2, r1
 80011e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80011e8:	4649      	mov	r1, r9
 80011ea:	eb63 0301 	sbc.w	r3, r3, r1
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80011fc:	4649      	mov	r1, r9
 80011fe:	00cb      	lsls	r3, r1, #3
 8001200:	4641      	mov	r1, r8
 8001202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001206:	4641      	mov	r1, r8
 8001208:	00ca      	lsls	r2, r1, #3
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	4603      	mov	r3, r0
 8001210:	4622      	mov	r2, r4
 8001212:	189b      	adds	r3, r3, r2
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
 8001216:	462b      	mov	r3, r5
 8001218:	460a      	mov	r2, r1
 800121a:	eb42 0303 	adc.w	r3, r2, r3
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800122c:	4629      	mov	r1, r5
 800122e:	024b      	lsls	r3, r1, #9
 8001230:	4621      	mov	r1, r4
 8001232:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001236:	4621      	mov	r1, r4
 8001238:	024a      	lsls	r2, r1, #9
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001242:	2200      	movs	r2, #0
 8001244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800124c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001250:	f7fe ffd8 	bl	8000204 <__aeabi_uldivmod>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4613      	mov	r3, r2
 800125a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800125e:	e067      	b.n	8001330 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001260:	4b75      	ldr	r3, [pc, #468]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	099b      	lsrs	r3, r3, #6
 8001266:	2200      	movs	r2, #0
 8001268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800126c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001270:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001278:	67bb      	str	r3, [r7, #120]	; 0x78
 800127a:	2300      	movs	r3, #0
 800127c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800127e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001282:	4622      	mov	r2, r4
 8001284:	462b      	mov	r3, r5
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	0159      	lsls	r1, r3, #5
 8001290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001294:	0150      	lsls	r0, r2, #5
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4621      	mov	r1, r4
 800129c:	1a51      	subs	r1, r2, r1
 800129e:	62b9      	str	r1, [r7, #40]	; 0x28
 80012a0:	4629      	mov	r1, r5
 80012a2:	eb63 0301 	sbc.w	r3, r3, r1
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80012b4:	4649      	mov	r1, r9
 80012b6:	018b      	lsls	r3, r1, #6
 80012b8:	4641      	mov	r1, r8
 80012ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012be:	4641      	mov	r1, r8
 80012c0:	018a      	lsls	r2, r1, #6
 80012c2:	4641      	mov	r1, r8
 80012c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80012c8:	4649      	mov	r1, r9
 80012ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80012da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80012de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012e2:	4692      	mov	sl, r2
 80012e4:	469b      	mov	fp, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	eb1a 0303 	adds.w	r3, sl, r3
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	462b      	mov	r3, r5
 80012f0:	eb4b 0303 	adc.w	r3, fp, r3
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001302:	4629      	mov	r1, r5
 8001304:	028b      	lsls	r3, r1, #10
 8001306:	4621      	mov	r1, r4
 8001308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800130c:	4621      	mov	r1, r4
 800130e:	028a      	lsls	r2, r1, #10
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001318:	2200      	movs	r2, #0
 800131a:	673b      	str	r3, [r7, #112]	; 0x70
 800131c:	677a      	str	r2, [r7, #116]	; 0x74
 800131e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001322:	f7fe ff6f 	bl	8000204 <__aeabi_uldivmod>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4613      	mov	r3, r2
 800132c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001330:	4b41      	ldr	r3, [pc, #260]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	3301      	adds	r3, #1
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001352:	e0eb      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800135c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001360:	4b35      	ldr	r3, [pc, #212]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d06b      	beq.n	8001444 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_RCC_GetSysClockFreq+0x354>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	099b      	lsrs	r3, r3, #6
 8001372:	2200      	movs	r2, #0
 8001374:	66bb      	str	r3, [r7, #104]	; 0x68
 8001376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800137a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137e:	663b      	str	r3, [r7, #96]	; 0x60
 8001380:	2300      	movs	r3, #0
 8001382:	667b      	str	r3, [r7, #100]	; 0x64
 8001384:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001388:	4622      	mov	r2, r4
 800138a:	462b      	mov	r3, r5
 800138c:	f04f 0000 	mov.w	r0, #0
 8001390:	f04f 0100 	mov.w	r1, #0
 8001394:	0159      	lsls	r1, r3, #5
 8001396:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800139a:	0150      	lsls	r0, r2, #5
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4621      	mov	r1, r4
 80013a2:	1a51      	subs	r1, r2, r1
 80013a4:	61b9      	str	r1, [r7, #24]
 80013a6:	4629      	mov	r1, r5
 80013a8:	eb63 0301 	sbc.w	r3, r3, r1
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80013ba:	4659      	mov	r1, fp
 80013bc:	018b      	lsls	r3, r1, #6
 80013be:	4651      	mov	r1, sl
 80013c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013c4:	4651      	mov	r1, sl
 80013c6:	018a      	lsls	r2, r1, #6
 80013c8:	4651      	mov	r1, sl
 80013ca:	ebb2 0801 	subs.w	r8, r2, r1
 80013ce:	4659      	mov	r1, fp
 80013d0:	eb63 0901 	sbc.w	r9, r3, r1
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013e8:	4690      	mov	r8, r2
 80013ea:	4699      	mov	r9, r3
 80013ec:	4623      	mov	r3, r4
 80013ee:	eb18 0303 	adds.w	r3, r8, r3
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	462b      	mov	r3, r5
 80013f6:	eb49 0303 	adc.w	r3, r9, r3
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001408:	4629      	mov	r1, r5
 800140a:	024b      	lsls	r3, r1, #9
 800140c:	4621      	mov	r1, r4
 800140e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001412:	4621      	mov	r1, r4
 8001414:	024a      	lsls	r2, r1, #9
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800141e:	2200      	movs	r2, #0
 8001420:	65bb      	str	r3, [r7, #88]	; 0x58
 8001422:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001424:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001428:	f7fe feec 	bl	8000204 <__aeabi_uldivmod>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4613      	mov	r3, r2
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001436:	e065      	b.n	8001504 <HAL_RCC_GetSysClockFreq+0x420>
 8001438:	40023800 	.word	0x40023800
 800143c:	00f42400 	.word	0x00f42400
 8001440:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_GetSysClockFreq+0x458>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	099b      	lsrs	r3, r3, #6
 800144a:	2200      	movs	r2, #0
 800144c:	4618      	mov	r0, r3
 800144e:	4611      	mov	r1, r2
 8001450:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001454:	653b      	str	r3, [r7, #80]	; 0x50
 8001456:	2300      	movs	r3, #0
 8001458:	657b      	str	r3, [r7, #84]	; 0x54
 800145a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800145e:	4642      	mov	r2, r8
 8001460:	464b      	mov	r3, r9
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4641      	mov	r1, r8
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	4649      	mov	r1, r9
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001490:	4659      	mov	r1, fp
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4651      	mov	r1, sl
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4651      	mov	r1, sl
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4651      	mov	r1, sl
 80014a0:	1a54      	subs	r4, r2, r1
 80014a2:	4659      	mov	r1, fp
 80014a4:	eb63 0501 	sbc.w	r5, r3, r1
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	00eb      	lsls	r3, r5, #3
 80014b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014b6:	00e2      	lsls	r2, r4, #3
 80014b8:	4614      	mov	r4, r2
 80014ba:	461d      	mov	r5, r3
 80014bc:	4643      	mov	r3, r8
 80014be:	18e3      	adds	r3, r4, r3
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	464b      	mov	r3, r9
 80014c4:	eb45 0303 	adc.w	r3, r5, r3
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014d6:	4629      	mov	r1, r5
 80014d8:	028b      	lsls	r3, r1, #10
 80014da:	4621      	mov	r1, r4
 80014dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014e0:	4621      	mov	r1, r4
 80014e2:	028a      	lsls	r2, r1, #10
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014ec:	2200      	movs	r2, #0
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80014f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80014f6:	f7fe fe85 	bl	8000204 <__aeabi_uldivmod>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4613      	mov	r3, r2
 8001500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_GetSysClockFreq+0x458>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0f1b      	lsrs	r3, r3, #28
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001522:	e003      	b.n	800152c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800152a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800152c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001530:	4618      	mov	r0, r3
 8001532:	37b8      	adds	r7, #184	; 0xb8
 8001534:	46bd      	mov	sp, r7
 8001536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	00f42400 	.word	0x00f42400

08001544 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e28d      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8083 	beq.w	800166a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001564:	4b94      	ldr	r3, [pc, #592]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b04      	cmp	r3, #4
 800156e:	d019      	beq.n	80015a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001570:	4b91      	ldr	r3, [pc, #580]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001578:	2b08      	cmp	r3, #8
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800157c:	4b8e      	ldr	r3, [pc, #568]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001588:	d00c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800158a:	4b8b      	ldr	r3, [pc, #556]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d112      	bne.n	80015bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001596:	4b88      	ldr	r3, [pc, #544]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a2:	d10b      	bne.n	80015bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4b84      	ldr	r3, [pc, #528]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d05b      	beq.n	8001668 <HAL_RCC_OscConfig+0x124>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d157      	bne.n	8001668 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e25a      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x90>
 80015c6:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0xcc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0xb4>
 80015de:	4b76      	ldr	r3, [pc, #472]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a75      	ldr	r2, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b73      	ldr	r3, [pc, #460]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a72      	ldr	r2, [pc, #456]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0xcc>
 80015f8:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6e      	ldr	r2, [pc, #440]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b6c      	ldr	r3, [pc, #432]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a6b      	ldr	r2, [pc, #428]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff f9b2 	bl	8000980 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff f9ae 	bl	8000980 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e21f      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001632:	4b61      	ldr	r3, [pc, #388]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0xdc>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff f99e 	bl	8000980 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff f99a 	bl	8000980 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e20b      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165a:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x104>
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06f      	beq.n	8001756 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b00      	cmp	r3, #0
 8001680:	d017      	beq.n	80016b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800168a:	2b08      	cmp	r3, #8
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b41      	ldr	r3, [pc, #260]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x186>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1d3      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e03a      	b.n	8001756 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d020      	beq.n	800172a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x278>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff f947 	bl	8000980 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f6:	f7ff f943 	bl	8000980 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1b4      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001714:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4925      	ldr	r1, [pc, #148]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x278>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff f926 	bl	8000980 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001738:	f7ff f922 	bl	8000980 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e193      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	2b00      	cmp	r3, #0
 8001760:	d036      	beq.n	80017d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d016      	beq.n	8001798 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff f906 	bl	8000980 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001778:	f7ff f902 	bl	8000980 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e173      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x274>)
 800178c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x234>
 8001796:	e01b      	b.n	80017d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179e:	f7ff f8ef 	bl	8000980 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	e00e      	b.n	80017c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a6:	f7ff f8eb 	bl	8000980 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d907      	bls.n	80017c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e15c      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
 80017b8:	40023800 	.word	0x40023800
 80017bc:	42470000 	.word	0x42470000
 80017c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80017c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1ea      	bne.n	80017a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 8097 	beq.w	800190c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a7e      	ldr	r2, [pc, #504]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4b79      	ldr	r3, [pc, #484]	; (80019f4 <HAL_RCC_OscConfig+0x4b0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x4b0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a75      	ldr	r2, [pc, #468]	; (80019f4 <HAL_RCC_OscConfig+0x4b0>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001826:	f7ff f8ab 	bl	8000980 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800182e:	f7ff f8a7 	bl	8000980 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e118      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x4b0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x31e>
 8001854:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a65      	ldr	r2, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	e01c      	b.n	800189c <HAL_RCC_OscConfig+0x358>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b05      	cmp	r3, #5
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x340>
 800186a:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a60      	ldr	r2, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5d      	ldr	r2, [pc, #372]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x358>
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	4a59      	ldr	r2, [pc, #356]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6713      	str	r3, [r2, #112]	; 0x70
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a4:	f7ff f86c 	bl	8000980 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ac:	f7ff f868 	bl	8000980 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e0d7      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ee      	beq.n	80018ac <HAL_RCC_OscConfig+0x368>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d0:	f7ff f856 	bl	8000980 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d8:	f7ff f852 	bl	8000980 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e0c1      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	4b40      	ldr	r3, [pc, #256]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a3a      	ldr	r2, [pc, #232]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80ad 	beq.w	8001a70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001916:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b08      	cmp	r3, #8
 8001920:	d060      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d145      	bne.n	80019b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x4b4>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f826 	bl	8000980 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001938:	f7ff f822 	bl	8000980 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e093      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	071b      	lsls	r3, r3, #28
 8001982:	491b      	ldr	r1, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	4313      	orrs	r3, r2
 8001986:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x4b4>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7fe fff7 	bl	8000980 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001996:	f7fe fff3 	bl	8000980 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e064      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x452>
 80019b4:	e05c      	b.n	8001a70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x4b4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7fe ffe0 	bl	8000980 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c4:	f7fe ffdc 	bl	8000980 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e04d      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x480>
 80019e2:	e045      	b.n	8001a70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e040      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <HAL_RCC_OscConfig+0x538>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d030      	beq.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d129      	bne.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d122      	bne.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d119      	bne.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d10f      	bne.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d107      	bne.n	8001a6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e041      	b.n	8001b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe feaa 	bl	8000800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3304      	adds	r3, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	4610      	mov	r0, r2
 8001ac0:	f000 f9ce 	bl	8001e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d001      	beq.n	8001b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04e      	b.n	8001bd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d022      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b62:	d01d      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d018      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <HAL_TIM_Base_Start_IT+0xcc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d013      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00e      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1b      	ldr	r2, [pc, #108]	; (8001bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d009      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a19      	ldr	r2, [pc, #100]	; (8001bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_TIM_Base_Start_IT+0x80>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d010      	beq.n	8001bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0201 	orr.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bc2:	e007      	b.n	8001bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40000800 	.word	0x40000800
 8001bf0:	40000c00 	.word	0x40000c00
 8001bf4:	40010400 	.word	0x40010400
 8001bf8:	40014000 	.word	0x40014000
 8001bfc:	40001800 	.word	0x40001800

08001c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0202 	mvn.w	r2, #2
 8001c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8ee 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8e0 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8f1 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0204 	mvn.w	r2, #4
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8c4 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8b6 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8c7 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0208 	mvn.w	r2, #8
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2204      	movs	r2, #4
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f89a 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f88c 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f89d 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d122      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d11b      	bne.n	8001d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0210 	mvn.w	r2, #16
 8001d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f870 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d44:	e005      	b.n	8001d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f862 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f873 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d10e      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f06f 0201 	mvn.w	r2, #1
 8001d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fcf6 	bl	8000770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	d10e      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d107      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f902 	bl	8001fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	2b40      	cmp	r3, #64	; 0x40
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d107      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f838 	bl	8001e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d10e      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	d107      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8cc 	bl	8001fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a40      	ldr	r2, [pc, #256]	; (8001f74 <TIM_Base_SetConfig+0x114>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7e:	d00f      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <TIM_Base_SetConfig+0x118>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3c      	ldr	r2, [pc, #240]	; (8001f7c <TIM_Base_SetConfig+0x11c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3b      	ldr	r2, [pc, #236]	; (8001f80 <TIM_Base_SetConfig+0x120>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3a      	ldr	r2, [pc, #232]	; (8001f84 <TIM_Base_SetConfig+0x124>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <TIM_Base_SetConfig+0x114>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec0:	d027      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <TIM_Base_SetConfig+0x118>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d023      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2b      	ldr	r2, [pc, #172]	; (8001f7c <TIM_Base_SetConfig+0x11c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <TIM_Base_SetConfig+0x120>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <TIM_Base_SetConfig+0x124>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d017      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <TIM_Base_SetConfig+0x128>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <TIM_Base_SetConfig+0x12c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <TIM_Base_SetConfig+0x130>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <TIM_Base_SetConfig+0x134>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <TIM_Base_SetConfig+0x138>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <TIM_Base_SetConfig+0x13c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <TIM_Base_SetConfig+0x114>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0xf8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <TIM_Base_SetConfig+0x124>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40000400 	.word	0x40000400
 8001f7c:	40000800 	.word	0x40000800
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40010400 	.word	0x40010400
 8001f88:	40014000 	.word	0x40014000
 8001f8c:	40014400 	.word	0x40014400
 8001f90:	40014800 	.word	0x40014800
 8001f94:	40001800 	.word	0x40001800
 8001f98:	40001c00 	.word	0x40001c00
 8001f9c:	40002000 	.word	0x40002000

08001fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <__libc_init_array>:
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4d0d      	ldr	r5, [pc, #52]	; (8002000 <__libc_init_array+0x38>)
 8001fcc:	4c0d      	ldr	r4, [pc, #52]	; (8002004 <__libc_init_array+0x3c>)
 8001fce:	1b64      	subs	r4, r4, r5
 8001fd0:	10a4      	asrs	r4, r4, #2
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	42a6      	cmp	r6, r4
 8001fd6:	d109      	bne.n	8001fec <__libc_init_array+0x24>
 8001fd8:	4d0b      	ldr	r5, [pc, #44]	; (8002008 <__libc_init_array+0x40>)
 8001fda:	4c0c      	ldr	r4, [pc, #48]	; (800200c <__libc_init_array+0x44>)
 8001fdc:	f000 f820 	bl	8002020 <_init>
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	2600      	movs	r6, #0
 8001fe6:	42a6      	cmp	r6, r4
 8001fe8:	d105      	bne.n	8001ff6 <__libc_init_array+0x2e>
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff0:	4798      	blx	r3
 8001ff2:	3601      	adds	r6, #1
 8001ff4:	e7ee      	b.n	8001fd4 <__libc_init_array+0xc>
 8001ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffa:	4798      	blx	r3
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e7f2      	b.n	8001fe6 <__libc_init_array+0x1e>
 8002000:	08002050 	.word	0x08002050
 8002004:	08002050 	.word	0x08002050
 8002008:	08002050 	.word	0x08002050
 800200c:	08002054 	.word	0x08002054

08002010 <memset>:
 8002010:	4402      	add	r2, r0
 8002012:	4603      	mov	r3, r0
 8002014:	4293      	cmp	r3, r2
 8002016:	d100      	bne.n	800201a <memset+0xa>
 8002018:	4770      	bx	lr
 800201a:	f803 1b01 	strb.w	r1, [r3], #1
 800201e:	e7f9      	b.n	8002014 <memset+0x4>

08002020 <_init>:
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	bf00      	nop
 8002024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002026:	bc08      	pop	{r3}
 8002028:	469e      	mov	lr, r3
 800202a:	4770      	bx	lr

0800202c <_fini>:
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202e:	bf00      	nop
 8002030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002032:	bc08      	pop	{r3}
 8002034:	469e      	mov	lr, r3
 8002036:	4770      	bx	lr
